/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/bean.js":
/*!********************!*\
  !*** ./js/bean.js ***!
  \********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/*!\n  * bean.js - copyright Jacob Thornton 2011\n  * https://github.com/fat/bean\n  * MIT License\n  * special thanks to:\n  * dean edwards: http://dean.edwards.name/\n  * dperini: https://github.com/dperini/nwevents\n  * the entire mootools team: github.com/mootools/mootools-core\n  */\nconst bean = function (context) {\n  var __uid = 1,\n      registry = {},\n      collected = {},\n      overOut = /over|out/,\n      namespace = /[^\\.]*(?=\\..*)\\.|.*/,\n      stripName = /\\..*/,\n      addEvent = 'addEventListener',\n      attachEvent = 'attachEvent',\n      removeEvent = 'removeEventListener',\n      detachEvent = 'detachEvent',\n      doc = context.document || {},\n      root = doc.documentElement || {},\n      W3C_MODEL = root[addEvent],\n      eventSupport = W3C_MODEL ? addEvent : attachEvent,\n      isDescendant = function isDescendant(parent, child) {\n    var node = child.parentNode;\n    while (node !== null) {\n      if (node == parent) {\n        return true;\n      }\n      node = node.parentNode;\n    }\n  },\n      retrieveUid = function retrieveUid(obj, uid) {\n    return obj.__uid = uid && uid + '::' + __uid++ || obj.__uid || __uid++;\n  },\n      retrieveEvents = function retrieveEvents(element) {\n    var uid = retrieveUid(element);\n    return registry[uid] = registry[uid] || {};\n  },\n      listener = W3C_MODEL ? function (element, type, fn, add) {\n    element[add ? addEvent : removeEvent](type, fn, false);\n  } : function (element, type, fn, add, custom) {\n    custom && add && (element['_on' + custom] = element['_on' + custom] || 0);\n    element[add ? attachEvent : detachEvent]('on' + type, fn);\n  },\n      nativeHandler = function nativeHandler(element, fn, args) {\n    return function (event, arg) {\n      event = fixEvent(event || ((this.ownerDocument || this.document || this).parentWindow || context).event);\n      return fn.apply(element, [event].concat(args).concat(arg));\n    };\n  },\n      customHandler = function customHandler(element, fn, type, condition, args) {\n    return function (e) {\n      if (condition ? condition.apply(this, arguments) : W3C_MODEL ? true : e && e.propertyName == '_on' + type || !e) {\n        fn.apply(element, Array.prototype.slice.call(arguments, e ? 0 : 1).concat(args));\n      }\n    };\n  },\n      addListener = function addListener(element, orgType, _fn, args) {\n    var type = orgType.replace(stripName, ''),\n        events = retrieveEvents(element),\n        handlers = events[type] || (events[type] = {}),\n        originalFn = _fn,\n        uid = retrieveUid(_fn, orgType.replace(namespace, ''));\n    if (handlers[uid]) {\n      return element;\n    }\n    var custom = customEvents[type];\n    if (custom) {\n      _fn = custom.condition ? customHandler(element, _fn, type, custom.condition) : _fn;\n      type = custom.base || type;\n    }\n    var isNative = nativeEvents[type];\n    _fn = isNative ? nativeHandler(element, _fn, args) : customHandler(element, _fn, type, false, args);\n    isNative = W3C_MODEL || isNative;\n    if (type == 'unload') {\n      var org = _fn;\n      _fn = function fn() {\n        removeListener(element, type, _fn) && org();\n      };\n    }\n    element[eventSupport] && listener(element, isNative ? type : 'propertychange', _fn, true, !isNative && type);\n    handlers[uid] = _fn;\n    _fn.__uid = uid;\n    _fn.__originalFn = originalFn;\n    return type == 'unload' ? element : collected[retrieveUid(element)] = element;\n  },\n      removeListener = function removeListener(element, orgType, handler) {\n    var uid,\n        names,\n        uids,\n        i,\n        events = retrieveEvents(element),\n        type = orgType.replace(stripName, '');\n    if (!events || !events[type]) {\n      return element;\n    }\n    names = orgType.replace(namespace, '');\n    uids = names ? names.split('.') : [handler.__uid];\n\n    function destroyHandler(uid) {\n      handler = events[type][uid];\n      if (!handler) {\n        return;\n      }\n      delete events[type][uid];\n      if (element[eventSupport]) {\n        type = customEvents[type] ? customEvents[type].base : type;\n        var isNative = W3C_MODEL || nativeEvents[type];\n        listener(element, isNative ? type : 'propertychange', handler, false, !isNative && type);\n      }\n    }\n\n    destroyHandler(names); //get combos\n    for (i = uids.length; i--; destroyHandler(uids[i])) {} //get singles\n\n    return element;\n  },\n      del = function del(selector, fn, $) {\n    return function (e) {\n      var array = typeof selector == 'string' ? $(selector, this) : selector;\n      for (var target = e.target; target && target != this; target = target.parentNode) {\n        for (var i = array.length; i--;) {\n          if (array[i] == target) {\n            return fn.apply(target, arguments);\n          }\n        }\n      }\n    };\n  },\n      add = function add(element, events, fn, delfn, $) {\n    if (typeof events == 'object' && !fn) {\n      for (var type in events) {\n        events.hasOwnProperty(type) && add(element, type, events[type]);\n      }\n    } else {\n      var isDel = typeof fn == 'string',\n          types = (isDel ? fn : events).split(' ');\n      fn = isDel ? del(events, delfn, $) : fn;\n      for (var i = types.length; i--;) {\n        addListener(element, types[i], fn, Array.prototype.slice.call(arguments, isDel ? 4 : 3));\n      }\n    }\n    return element;\n  },\n      remove = function remove(element, orgEvents, fn) {\n    var k,\n        m,\n        type,\n        events,\n        i,\n        isString = typeof orgEvents == 'string',\n        names = isString && orgEvents.replace(namespace, ''),\n        names = names && names.split('.'),\n        rm = removeListener,\n        attached = retrieveEvents(element);\n    if (isString && /\\s/.test(orgEvents)) {\n      orgEvents = orgEvents.split(' ');\n      i = orgEvents.length - 1;\n      while (remove(element, orgEvents[i]) && i--) {}\n      return element;\n    }\n    events = isString ? orgEvents.replace(stripName, '') : orgEvents;\n    if (!attached || names || isString && !attached[events]) {\n      for (k in attached) {\n        if (attached.hasOwnProperty(k)) {\n          for (i in attached[k]) {\n            for (m = names.length; m--;) {\n              attached[k].hasOwnProperty(i) && new RegExp('^' + names[m] + '::\\\\d*(\\\\..*)?$').test(i) && rm(element, [k, i].join('.'));\n            }\n          }\n        }\n      }\n      return element;\n    }\n    if (typeof fn == 'function') {\n      rm(element, events, fn);\n    } else if (names) {\n      rm(element, orgEvents);\n    } else {\n      rm = events ? rm : remove;\n      type = isString && events;\n      events = events ? fn || attached[events] || events : attached;\n      for (k in events) {\n        if (events.hasOwnProperty(k)) {\n          rm(element, type || k, events[k]);\n          delete events[k]; // remove unused leaf keys\n        }\n      }\n    }\n    return element;\n  },\n      fire = function fire(element, type, args) {\n    var evt,\n        k,\n        i,\n        m,\n        types = type.split(' ');\n    for (i = types.length; i--;) {\n      type = types[i].replace(stripName, '');\n      var isNative = nativeEvents[type],\n          isNamespace = types[i].replace(namespace, ''),\n          handlers = retrieveEvents(element)[type];\n      if (isNamespace) {\n        isNamespace = isNamespace.split('.');\n        for (k = isNamespace.length; k--;) {\n          for (m in handlers) {\n            handlers.hasOwnProperty(m) && new RegExp('^' + isNamespace[k] + '::\\\\d*(\\\\..*)?$').test(m) && handlers[m].apply(element, [false].concat(args));\n          }\n        }\n      } else if (!args && element[eventSupport]) {\n        fireListener(isNative, type, element);\n      } else {\n        for (k in handlers) {\n          handlers.hasOwnProperty(k) && handlers[k].apply(element, [false].concat(args));\n        }\n      }\n    }\n    return element;\n  },\n      fireListener = W3C_MODEL ? function (isNative, type, element) {\n    evt = document.createEvent(isNative ? \"HTMLEvents\" : \"UIEvents\");\n    evt[isNative ? 'initEvent' : 'initUIEvent'](type, true, true, context, 1);\n    element.dispatchEvent(evt);\n  } : function (isNative, type, element) {\n    isNative ? element.fireEvent('on' + type, document.createEventObject()) : element['_on' + type]++;\n  },\n      clone = function clone(element, from, type) {\n    var events = retrieveEvents(from),\n        obj,\n        k;\n    var uid = retrieveUid(element);\n    obj = type ? events[type] : events;\n    for (k in obj) {\n      obj.hasOwnProperty(k) && (type ? add : clone)(element, type || from, type ? obj[k].__originalFn : k);\n    }\n    return element;\n  },\n      fixEvent = function fixEvent(e) {\n    var result = {};\n    if (!e) {\n      return result;\n    }\n    var type = e.type,\n        target = e.target || e.srcElement;\n    result.preventDefault = fixEvent.preventDefault(e);\n    result.stopPropagation = fixEvent.stopPropagation(e);\n    result.target = target && target.nodeType == 3 ? target.parentNode : target;\n    if (type && type.indexOf('key')) {\n      result.keyCode = e.which || e.keyCode;\n    } else if (/click|mouse|menu/i.test(type)) {\n      result.rightClick = e.which == 3 || e.button == 2;\n      result.pos = { x: 0, y: 0 };\n      if (e.pageX || e.pageY) {\n        result.clientX = e.pageX;\n        result.clientY = e.pageY;\n      } else if (e.clientX || e.clientY) {\n        result.clientX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n        result.clientY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n      }\n      overOut.test(type) && (result.relatedTarget = e.relatedTarget || e[(type == 'mouseover' ? 'from' : 'to') + 'Element']);\n    }\n    for (var k in e) {\n      if (!(k in result)) {\n        result[k] = e[k];\n      }\n    }\n    return result;\n  };\n\n  fixEvent.preventDefault = function (e) {\n    return function () {\n      if (e.preventDefault) {\n        e.preventDefault();\n      } else {\n        e.returnValue = false;\n      }\n    };\n  };\n\n  fixEvent.stopPropagation = function (e) {\n    return function () {\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      } else {\n        e.cancelBubble = true;\n      }\n    };\n  };\n\n  var nativeEvents = { click: 1, dblclick: 1, mouseup: 1, mousedown: 1, contextmenu: 1, //mouse buttons\n    mousewheel: 1, DOMMouseScroll: 1, //mouse wheel\n    mouseover: 1, mouseout: 1, mousemove: 1, selectstart: 1, selectend: 1, //mouse movement\n    keydown: 1, keypress: 1, keyup: 1, //keyboard\n    orientationchange: 1, // mobile\n    touchstart: 1, touchmove: 1, touchend: 1, touchcancel: 1, // touch\n    gesturestart: 1, gesturechange: 1, gestureend: 1, // gesture\n    focus: 1, blur: 1, change: 1, reset: 1, select: 1, submit: 1, //form elements\n    load: 1, unload: 1, beforeunload: 1, resize: 1, move: 1, DOMContentLoaded: 1, readystatechange: 1, //window\n    error: 0, abort: 1, scroll: 1 }; //misc\n\n  function check(event) {\n    var related = event.relatedTarget;\n    if (!related) {\n      return related === null;\n    }\n    return related != this && related.prefix != 'xul' && !/document/.test(this.toString()) && !isDescendant(this, related);\n  }\n\n  var customEvents = {\n    mouseenter: { base: 'mouseover', condition: check },\n    mouseleave: { base: 'mouseout', condition: check\n      //    mousewheel: { base: /Firefox/.test(navigator.userAgent) ? 'DOMMouseScroll' : 'mousewheel' }\n    } };\n\n  var bean = { add: add, remove: remove, clone: clone, fire: fire };\n\n  var clean = function clean(el) {\n    var uid = remove(el).__uid;\n    if (uid) {\n      delete collected[uid];\n      delete registry[uid];\n    }\n  };\n\n  if (context[attachEvent]) {\n    add(context, 'unload', function () {\n      for (var k in collected) {\n        collected.hasOwnProperty(k) && clean(collected[k]);\n      }\n      context.CollectGarbage && CollectGarbage();\n    });\n  }\n\n  var oldBean = context.bean;\n  bean.noConflict = function () {\n    context.bean = oldBean;\n    return this;\n  };\n\n  typeof module !== 'undefined' && module.exports ? module.exports = bean : context['bean'] = bean;\n\n  return bean;\n}({});\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (bean);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/bean.js\n");

/***/ }),

/***/ "./js/hammer.js":
/*!**********************!*\
  !*** ./js/hammer.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/*! Hammer.JS - v1.0.7dev - 2014-01-15\n * http://eightmedia.github.com/hammer.js\n *\n * Copyright (c) 2014 Jorik Tangelder <j.tangelder@gmail.com>;\n * Licensed under the MIT license */\n\nconst Hammer = function (window, undefined) {\n  'use strict';\n\n  /**\n   * Hammer\n   * use this to create instances\n   * @param   {HTMLElement}   element\n   * @param   {Object}        options\n   * @returns {Hammer.Instance}\n   * @constructor\n   */\n\n  var Hammer = function Hammer(element, options) {\n    return new Hammer.Instance(element, options || {});\n  };\n\n  // default settings\n  Hammer.defaults = {\n    // add styles and attributes to the element to prevent the browser from doing\n    // its native behavior. this doesnt prevent the scrolling, but cancels\n    // the contextmenu, tap highlighting etc\n    // set to false to disable this\n    stop_browser_behavior: {\n      // this also triggers onselectstart=false for IE\n      userSelect: 'none',\n      // this makes the element blocking in IE10 >, you could experiment with the value\n      // see for more options this issue; https://github.com/EightMedia/hammer.js/issues/241\n      touchAction: 'none',\n      touchCallout: 'none',\n      contentZooming: 'none',\n      userDrag: 'none',\n      tapHighlightColor: 'rgba(0,0,0,0)'\n\n      //\n      // more settings are defined per gesture at gestures.js\n      //\n    } };\n\n  // detect touchevents\n  Hammer.HAS_POINTEREVENTS = window.navigator.pointerEnabled || window.navigator.msPointerEnabled;\n  Hammer.HAS_TOUCHEVENTS = 'ontouchstart' in window;\n\n  // dont use mouseevents on mobile devices\n  Hammer.MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android|silk/i;\n  Hammer.NO_MOUSEEVENTS = Hammer.HAS_TOUCHEVENTS && window.navigator.userAgent.match(Hammer.MOBILE_REGEX);\n\n  // eventtypes per touchevent (start, move, end)\n  // are filled by Hammer.event.determineEventTypes on setup\n  Hammer.EVENT_TYPES = {};\n\n  // direction defines\n  Hammer.DIRECTION_DOWN = 'down';\n  Hammer.DIRECTION_LEFT = 'left';\n  Hammer.DIRECTION_UP = 'up';\n  Hammer.DIRECTION_RIGHT = 'right';\n\n  // pointer type\n  Hammer.POINTER_MOUSE = 'mouse';\n  Hammer.POINTER_TOUCH = 'touch';\n  Hammer.POINTER_PEN = 'pen';\n\n  // touch event defines\n  Hammer.EVENT_START = 'start';\n  Hammer.EVENT_MOVE = 'move';\n  Hammer.EVENT_END = 'end';\n\n  // hammer document where the base events are added at\n  Hammer.DOCUMENT = window.document;\n\n  // plugins and gestures namespaces\n  Hammer.plugins = Hammer.plugins || {};\n  Hammer.gestures = Hammer.gestures || {};\n\n  // if the window events are set...\n  Hammer.READY = false;\n\n  /**\n   * setup events to detect gestures on the document\n   */\n  function setup() {\n    if (Hammer.READY) {\n      return;\n    }\n\n    // find what eventtypes we add listeners to\n    Hammer.event.determineEventTypes();\n\n    // Register all gestures inside Hammer.gestures\n    Hammer.utils.each(Hammer.gestures, function (gesture) {\n      Hammer.detection.register(gesture);\n    });\n\n    // Add touch events on the document\n    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_MOVE, Hammer.detection.detect);\n    Hammer.event.onTouch(Hammer.DOCUMENT, Hammer.EVENT_END, Hammer.detection.detect);\n\n    // Hammer is ready...!\n    Hammer.READY = true;\n  }\n\n  Hammer.utils = {\n    /**\n     * extend method,\n     * also used for cloning when dest is an empty object\n     * @param   {Object}    dest\n     * @param   {Object}    src\n     * @parm  {Boolean}  merge    do a merge\n     * @returns {Object}    dest\n     */\n    extend: function extend(dest, src, merge) {\n      for (var key in src) {\n        if (dest[key] !== undefined && merge) {\n          continue;\n        }\n        dest[key] = src[key];\n      }\n      return dest;\n    },\n\n    /**\n     * for each\n     * @param obj\n     * @param iterator\n     */\n    each: function each(obj, iterator, context) {\n      var i, length;\n      // native forEach on arrays\n      if ('forEach' in obj) {\n        obj.forEach(iterator, context);\n      }\n      // arrays\n      else if (obj.length !== undefined) {\n          for (i = 0, length = obj.length; i < length; i++) {\n            if (iterator.call(context, obj[i], i, obj) === false) {\n              return;\n            }\n          }\n        }\n        // objects\n        else {\n            for (i in obj) {\n              if (obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj) === false) {\n                return;\n              }\n            }\n          }\n    },\n\n    /**\n     * find if a node is in the given parent\n     * used for event delegation tricks\n     * @param   {HTMLElement}   node\n     * @param   {HTMLElement}   parent\n     * @returns {boolean}       has_parent\n     */\n    hasParent: function hasParent(node, parent) {\n      while (node) {\n        if (node == parent) {\n          return true;\n        }\n        node = node.parentNode;\n      }\n      return false;\n    },\n\n    /**\n     * get the center of all the touches\n     * @param   {Array}     touches\n     * @returns {Object}    center\n     */\n    getCenter: function getCenter(touches) {\n      var valuesX = [],\n          valuesY = [];\n\n      Hammer.utils.each(touches, function (touch) {\n        // I prefer clientX because it ignore the scrolling position\n        valuesX.push(typeof touch.clientX !== 'undefined' ? touch.clientX : touch.pageX);\n        valuesY.push(typeof touch.clientY !== 'undefined' ? touch.clientY : touch.pageY);\n      });\n\n      return {\n        pageX: (Math.min.apply(Math, valuesX) + Math.max.apply(Math, valuesX)) / 2,\n        pageY: (Math.min.apply(Math, valuesY) + Math.max.apply(Math, valuesY)) / 2\n      };\n    },\n\n    /**\n     * calculate the velocity between two points\n     * @param   {Number}    delta_time\n     * @param   {Number}    delta_x\n     * @param   {Number}    delta_y\n     * @returns {Object}    velocity\n     */\n    getVelocity: function getVelocity(delta_time, delta_x, delta_y) {\n      return {\n        x: Math.abs(delta_x / delta_time) || 0,\n        y: Math.abs(delta_y / delta_time) || 0\n      };\n    },\n\n    /**\n     * calculate the angle between two coordinates\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {Number}    angle\n     */\n    getAngle: function getAngle(touch1, touch2) {\n      var y = touch2.pageY - touch1.pageY,\n          x = touch2.pageX - touch1.pageX;\n      return Math.atan2(y, x) * 180 / Math.PI;\n    },\n\n    /**\n     * angle to direction define\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {String}    direction constant, like Hammer.DIRECTION_LEFT\n     */\n    getDirection: function getDirection(touch1, touch2) {\n      var x = Math.abs(touch1.pageX - touch2.pageX),\n          y = Math.abs(touch1.pageY - touch2.pageY);\n\n      if (x >= y) {\n        return touch1.pageX - touch2.pageX > 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;\n      } else {\n        return touch1.pageY - touch2.pageY > 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;\n      }\n    },\n\n    /**\n     * calculate the distance between two touches\n     * @param   {Touch}     touch1\n     * @param   {Touch}     touch2\n     * @returns {Number}    distance\n     */\n    getDistance: function getDistance(touch1, touch2) {\n      var x = touch2.pageX - touch1.pageX,\n          y = touch2.pageY - touch1.pageY;\n      return Math.sqrt(x * x + y * y);\n    },\n\n    /**\n     * calculate the scale factor between two touchLists (fingers)\n     * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n     * @param   {Array}     start\n     * @param   {Array}     end\n     * @returns {Number}    scale\n     */\n    getScale: function getScale(start, end) {\n      // need two fingers...\n      if (start.length >= 2 && end.length >= 2) {\n        return this.getDistance(end[0], end[1]) / this.getDistance(start[0], start[1]);\n      }\n      return 1;\n    },\n\n    /**\n     * calculate the rotation degrees between two touchLists (fingers)\n     * @param   {Array}     start\n     * @param   {Array}     end\n     * @returns {Number}    rotation\n     */\n    getRotation: function getRotation(start, end) {\n      // need two fingers\n      if (start.length >= 2 && end.length >= 2) {\n        return this.getAngle(end[1], end[0]) - this.getAngle(start[1], start[0]);\n      }\n      return 0;\n    },\n\n    /**\n     * boolean if the direction is vertical\n     * @param    {String}    direction\n     * @returns  {Boolean}   is_vertical\n     */\n    isVertical: function isVertical(direction) {\n      return direction == Hammer.DIRECTION_UP || direction == Hammer.DIRECTION_DOWN;\n    },\n\n    /**\n     * stop browser default behavior with css props\n     * @param   {HtmlElement}   element\n     * @param   {Object}        css_props\n     */\n    stopDefaultBrowserBehavior: function stopDefaultBrowserBehavior(element, css_props) {\n      if (!css_props || !element || !element.style) {\n        return;\n      }\n\n      // with css properties for modern browsers\n      Hammer.utils.each(['webkit', 'khtml', 'moz', 'Moz', 'ms', 'o', ''], function (vendor) {\n        Hammer.utils.each(css_props, function (value, prop) {\n          // vender prefix at the property\n          if (vendor) {\n            prop = vendor + prop.substring(0, 1).toUpperCase() + prop.substring(1);\n          }\n          // set the style\n          if (prop in element.style) {\n            element.style[prop] = value;\n          }\n        });\n      });\n\n      // also the disable onselectstart\n      if (css_props.userSelect == 'none') {\n        element.onselectstart = function () {\n          return false;\n        };\n      }\n\n      // and disable ondragstart\n      if (css_props.userDrag == 'none') {\n        element.ondragstart = function () {\n          return false;\n        };\n      }\n    }\n  };\n\n  /**\n   * create new hammer instance\n   * all methods should return the instance itself, so it is chainable.\n   * @param   {HTMLElement}       element\n   * @param   {Object}            [options={}]\n   * @returns {Hammer.Instance}\n   * @constructor\n   */\n  Hammer.Instance = function (element, options) {\n    var self = this;\n\n    // setup HammerJS window events and register all gestures\n    // this also sets up the default options\n    setup();\n\n    this.element = element;\n\n    // start/stop detection option\n    this.enabled = true;\n\n    // merge options\n    this.options = Hammer.utils.extend(Hammer.utils.extend({}, Hammer.defaults), options || {});\n\n    // add some css to the element to prevent the browser from doing its native behavoir\n    if (this.options.stop_browser_behavior) {\n      Hammer.utils.stopDefaultBrowserBehavior(this.element, this.options.stop_browser_behavior);\n    }\n\n    // start detection on touchstart\n    Hammer.event.onTouch(element, Hammer.EVENT_START, function (ev) {\n      if (self.enabled) {\n        Hammer.detection.startDetect(self, ev);\n      }\n    });\n\n    // return instance\n    return this;\n  };\n\n  Hammer.Instance.prototype = {\n    /**\n     * bind events to the instance\n     * @param   {String}      gesture\n     * @param   {Function}    handler\n     * @returns {Hammer.Instance}\n     */\n    on: function onEvent(gesture, handler) {\n      var gestures = gesture.split(' ');\n      Hammer.utils.each(gestures, function (gesture) {\n        this.element.addEventListener(gesture, handler, false);\n      }, this);\n      return this;\n    },\n\n    /**\n     * unbind events to the instance\n     * @param   {String}      gesture\n     * @param   {Function}    handler\n     * @returns {Hammer.Instance}\n     */\n    off: function offEvent(gesture, handler) {\n      var gestures = gesture.split(' ');\n      Hammer.utils.each(gestures, function (gesture) {\n        this.element.removeEventListener(gesture, handler, false);\n      }, this);\n      return this;\n    },\n\n    /**\n     * trigger gesture event\n     * @param   {String}      gesture\n     * @param   {Object}      [eventData]\n     * @returns {Hammer.Instance}\n     */\n    trigger: function triggerEvent(gesture, eventData) {\n      // optional\n      if (!eventData) {\n        eventData = {};\n      }\n\n      // create DOM event\n      var event = Hammer.DOCUMENT.createEvent('Event');\n      event.initEvent(gesture, true, true);\n      event.gesture = eventData;\n\n      // trigger on the target if it is in the instance element,\n      // this is for event delegation tricks\n      var element = this.element;\n      if (Hammer.utils.hasParent(eventData.target, element)) {\n        element = eventData.target;\n      }\n\n      element.dispatchEvent(event);\n      return this;\n    },\n\n    /**\n     * enable of disable hammer.js detection\n     * @param   {Boolean}   state\n     * @returns {Hammer.Instance}\n     */\n    enable: function enable(state) {\n      this.enabled = state;\n      return this;\n    }\n  };\n\n  /**\n   * this holds the last move event,\n   * used to fix empty touchend issue\n   * see the onTouch event for an explanation\n   * @type {Object}\n   */\n  var last_move_event = null;\n\n  /**\n   * when the mouse is hold down, this is true\n   * @type {Boolean}\n   */\n  var enable_detect = false;\n\n  /**\n   * when touch events have been fired, this is true\n   * @type {Boolean}\n   */\n  var touch_triggered = false;\n\n  Hammer.event = {\n    /**\n     * simple addEventListener\n     * @param   {HTMLElement}   element\n     * @param   {String}        type\n     * @param   {Function}      handler\n     */\n    bindDom: function bindDom(element, type, handler) {\n      var types = type.split(' ');\n      Hammer.utils.each(types, function (type) {\n        element.addEventListener(type, handler, false);\n      });\n    },\n\n    /**\n     * touch events with mouse fallback\n     * @param   {HTMLElement}   element\n     * @param   {String}        eventType        like Hammer.EVENT_MOVE\n     * @param   {Function}      handler\n     */\n    onTouch: function onTouch(element, eventType, handler) {\n      var self = this;\n\n      this.bindDom(element, Hammer.EVENT_TYPES[eventType], function bindDomOnTouch(ev) {\n        var sourceEventType = ev.type.toLowerCase();\n\n        // onmouseup, but when touchend has been fired we do nothing.\n        // this is for touchdevices which also fire a mouseup on touchend\n        if (sourceEventType.match(/mouse/) && touch_triggered) {\n          return;\n        }\n\n        // mousebutton must be down or a touch event\n        else if (sourceEventType.match(/touch/) || // touch events are always on screen\n          sourceEventType.match(/pointerdown/) || // pointerevents touch\n          sourceEventType.match(/mouse/) && ev.which === 1 // mouse is pressed\n          ) {\n              enable_detect = true;\n            }\n\n            // mouse isn't pressed\n          else if (sourceEventType.match(/mouse/) && !ev.which) {\n              enable_detect = false;\n            }\n\n        // we are in a touch event, set the touch triggered bool to true,\n        // this for the conflicts that may occur on ios and android\n        if (sourceEventType.match(/touch|pointer/)) {\n          touch_triggered = true;\n        }\n\n        // count the total touches on the screen\n        var count_touches = 0;\n\n        // when touch has been triggered in this detection session\n        // and we are now handling a mouse event, we stop that to prevent conflicts\n        if (enable_detect) {\n          // update pointerevent\n          if (Hammer.HAS_POINTEREVENTS && eventType != Hammer.EVENT_END) {\n            count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);\n          }\n          // touch\n          else if (sourceEventType.match(/touch/)) {\n              count_touches = ev.touches.length;\n            }\n            // mouse\n            else if (!touch_triggered) {\n                count_touches = sourceEventType.match(/up/) ? 0 : 1;\n              }\n\n          // if we are in a end event, but when we remove one touch and\n          // we still have enough, set eventType to move\n          if (count_touches > 0 && eventType == Hammer.EVENT_END) {\n            eventType = Hammer.EVENT_MOVE;\n          }\n          // no touches, force the end event\n          else if (!count_touches) {\n              eventType = Hammer.EVENT_END;\n            }\n\n          // store the last move event\n          if (count_touches || last_move_event === null) {\n            last_move_event = ev;\n          }\n\n          // trigger the handler\n          handler.call(Hammer.detection, self.collectEventData(element, eventType, self.getTouchList(last_move_event, eventType), ev));\n\n          // remove pointerevent from list\n          if (Hammer.HAS_POINTEREVENTS && eventType == Hammer.EVENT_END) {\n            count_touches = Hammer.PointerEvent.updatePointer(eventType, ev);\n          }\n        }\n\n        // on the end we reset everything\n        if (!count_touches) {\n          last_move_event = null;\n          enable_detect = false;\n          touch_triggered = false;\n          Hammer.PointerEvent.reset();\n        }\n      }, { passive: true });\n      // FIXME - PASSIVE\n    },\n\n    /**\n     * we have different events for each device/browser\n     * determine what we need and set them in the Hammer.EVENT_TYPES constant\n     */\n    determineEventTypes: function determineEventTypes() {\n      // determine the eventtype we want to set\n      var types;\n\n      // pointerEvents magic\n      if (Hammer.HAS_POINTEREVENTS) {\n        types = Hammer.PointerEvent.getEvents();\n      }\n      // on Android, iOS, blackberry, windows mobile we dont want any mouseevents\n      else if (Hammer.NO_MOUSEEVENTS) {\n          types = ['touchstart', 'touchmove', 'touchend touchcancel'];\n        }\n        // for non pointer events browsers and mixed browsers,\n        // like chrome on windows8 touch laptop\n        else {\n            types = ['touchstart mousedown', 'touchmove mousemove', 'touchend touchcancel mouseup'];\n          }\n\n      Hammer.EVENT_TYPES[Hammer.EVENT_START] = types[0];\n      Hammer.EVENT_TYPES[Hammer.EVENT_MOVE] = types[1];\n      Hammer.EVENT_TYPES[Hammer.EVENT_END] = types[2];\n    },\n\n    /**\n     * create touchlist depending on the event\n     * @param   {Object}    ev\n     * @param   {String}    eventType   used by the fakemultitouch plugin\n     */\n    getTouchList: function getTouchList(ev /*, eventType*/) {\n      // get the fake pointerEvent touchlist\n      if (Hammer.HAS_POINTEREVENTS) {\n        return Hammer.PointerEvent.getTouchList();\n      }\n      // get the touchlist\n      else if (ev.touches) {\n          return ev.touches;\n        }\n        // make fake touchlist from mouse position\n        else {\n            ev.identifier = 1;\n            return [ev];\n          }\n    },\n\n    /**\n     * collect event data for Hammer js\n     * @param   {HTMLElement}   element\n     * @param   {String}        eventType        like Hammer.EVENT_MOVE\n     * @param   {Object}        eventData\n     */\n    collectEventData: function collectEventData(element, eventType, touches, ev) {\n      // find out pointerType\n      var pointerType = Hammer.POINTER_TOUCH;\n      if (ev.type.match(/mouse/) || Hammer.PointerEvent.matchType(Hammer.POINTER_MOUSE, ev)) {\n        pointerType = Hammer.POINTER_MOUSE;\n      }\n\n      return {\n        center: Hammer.utils.getCenter(touches),\n        timeStamp: new Date().getTime(),\n        target: ev.target,\n        touches: touches,\n        eventType: eventType,\n        pointerType: pointerType,\n        srcEvent: ev,\n\n        /**\n         * prevent the browser default actions\n         * mostly used to disable scrolling of the browser\n         */\n        preventDefault: function preventDefault() {\n          if (this.srcEvent.preventManipulation) {\n            this.srcEvent.preventManipulation();\n          }\n\n          if (this.srcEvent.preventDefault) {\n            this.srcEvent.preventDefault();\n          }\n        },\n\n        /**\n         * stop bubbling the event up to its parents\n         */\n        stopPropagation: function stopPropagation() {\n          this.srcEvent.stopPropagation();\n        },\n\n        /**\n         * immediately stop gesture detection\n         * might be useful after a swipe was detected\n         * @return {*}\n         */\n        stopDetect: function stopDetect() {\n          return Hammer.detection.stopDetect();\n        }\n      };\n    }\n  };\n\n  Hammer.PointerEvent = {\n    /**\n     * holds all pointers\n     * @type {Object}\n     */\n    pointers: {},\n\n    /**\n     * get a list of pointers\n     * @returns {Array}     touchlist\n     */\n    getTouchList: function getTouchList() {\n      var self = this;\n      var touchlist = [];\n\n      // we can use forEach since pointerEvents only is in IE10\n      Hammer.utils.each(self.pointers, function (pointer) {\n        touchlist.push(pointer);\n      });\n\n      return touchlist;\n    },\n\n    /**\n     * update the position of a pointer\n     * @param   {String}   type             Hammer.EVENT_END\n     * @param   {Object}   pointerEvent\n     */\n    updatePointer: function updatePointer(type, pointerEvent) {\n      if (type == Hammer.EVENT_END) {\n        this.pointers = {};\n      } else {\n        pointerEvent.identifier = pointerEvent.pointerId;\n        this.pointers[pointerEvent.pointerId] = pointerEvent;\n      }\n\n      return Object.keys(this.pointers).length;\n    },\n\n    /**\n     * check if ev matches pointertype\n     * @param   {String}        pointerType     Hammer.POINTER_MOUSE\n     * @param   {PointerEvent}  ev\n     */\n    matchType: function matchType(pointerType, ev) {\n      if (!ev.pointerType) {\n        return false;\n      }\n\n      var pt = ev.pointerType,\n          types = {};\n      types[Hammer.POINTER_MOUSE] = pt === ev.MSPOINTER_TYPE_MOUSE || pt === Hammer.POINTER_MOUSE;\n      types[Hammer.POINTER_TOUCH] = pt === ev.MSPOINTER_TYPE_TOUCH || pt === Hammer.POINTER_TOUCH;\n      types[Hammer.POINTER_PEN] = pt === ev.MSPOINTER_TYPE_PEN || pt === Hammer.POINTER_PEN;\n      return types[pointerType];\n    },\n\n    /**\n     * get events\n     */\n    getEvents: function getEvents() {\n      return ['pointerdown MSPointerDown', 'pointermove MSPointerMove', 'pointerup pointercancel MSPointerUp MSPointerCancel'];\n    },\n\n    /**\n     * reset the list\n     */\n    reset: function reset() {\n      this.pointers = {};\n    }\n  };\n\n  Hammer.detection = {\n    // contains all registred Hammer.gestures in the correct order\n    gestures: [],\n\n    // data of the current Hammer.gesture detection session\n    current: null,\n\n    // the previous Hammer.gesture session data\n    // is a full clone of the previous gesture.current object\n    previous: null,\n\n    // when this becomes true, no gestures are fired\n    stopped: false,\n\n    /**\n     * start Hammer.gesture detection\n     * @param   {Hammer.Instance}   inst\n     * @param   {Object}            eventData\n     */\n    startDetect: function startDetect(inst, eventData) {\n      // already busy with a Hammer.gesture detection on an element\n      if (this.current) {\n        return;\n      }\n\n      this.stopped = false;\n\n      this.current = {\n        inst: inst, // reference to HammerInstance we're working for\n        startEvent: Hammer.utils.extend({}, eventData), // start eventData for distances, timing etc\n        lastEvent: false, // last eventData\n        name: '' // current gesture we're in/detected, can be 'tap', 'hold' etc\n      };\n\n      this.detect(eventData);\n    },\n\n    /**\n     * Hammer.gesture detection\n     * @param   {Object}    eventData\n     */\n    detect: function detect(eventData) {\n      if (!this.current || this.stopped) {\n        return;\n      }\n\n      // extend event data with calculations about scale, distance etc\n      eventData = this.extendEventData(eventData);\n\n      // instance options\n      var inst_options = this.current.inst.options;\n\n      // call Hammer.gesture handlers\n      Hammer.utils.each(this.gestures, function (gesture) {\n        // only when the instance options have enabled this gesture\n        if (!this.stopped && inst_options[gesture.name] !== false) {\n          // if a handler returns false, we stop with the detection\n          if (gesture.handler.call(gesture, eventData, this.current.inst) === false) {\n            this.stopDetect();\n            return false;\n          }\n        }\n      }, this);\n\n      // store as previous event event\n      if (this.current) {\n        this.current.lastEvent = eventData;\n      }\n\n      // endevent, but not the last touch, so dont stop\n      if (eventData.eventType == Hammer.EVENT_END && !eventData.touches.length - 1) {\n        this.stopDetect();\n      }\n\n      return eventData;\n    },\n\n    /**\n     * clear the Hammer.gesture vars\n     * this is called on endDetect, but can also be used when a final Hammer.gesture has been detected\n     * to stop other Hammer.gestures from being fired\n     */\n    stopDetect: function stopDetect() {\n      // clone current data to the store as the previous gesture\n      // used for the double tap gesture, since this is an other gesture detect session\n      this.previous = Hammer.utils.extend({}, this.current);\n\n      // reset the current\n      this.current = null;\n\n      // stopped!\n      this.stopped = true;\n    },\n\n    /**\n     * extend eventData for Hammer.gestures\n     * @param   {Object}   ev\n     * @returns {Object}   ev\n     */\n    extendEventData: function extendEventData(ev) {\n      var startEv = this.current.startEvent;\n\n      // if the touches change, set the new touches over the startEvent touches\n      // this because touchevents don't have all the touches on touchstart, or the\n      // user must place his fingers at the EXACT same time on the screen, which is not realistic\n      // but, sometimes it happens that both fingers are touching at the EXACT same time\n      if (startEv && (ev.touches.length != startEv.touches.length || ev.touches === startEv.touches)) {\n        // extend 1 level deep to get the touchlist with the touch objects\n        startEv.touches = [];\n        Hammer.utils.each(ev.touches, function (touch) {\n          startEv.touches.push(Hammer.utils.extend({}, touch));\n        });\n      }\n\n      var delta_time = ev.timeStamp - startEv.timeStamp,\n          delta_x = ev.center.pageX - startEv.center.pageX,\n          delta_y = ev.center.pageY - startEv.center.pageY,\n          velocity = Hammer.utils.getVelocity(delta_time, delta_x, delta_y),\n          interimAngle,\n          interimDirection;\n\n      // end events (e.g. dragend) don't have useful values for interimDirection & interimAngle\n      // because the previous event has exactly the same coordinates\n      // so for end events, take the previous values of interimDirection & interimAngle\n      // instead of recalculating them and getting a spurious '0'\n      if (ev.eventType === 'end') {\n        interimAngle = this.current.lastEvent && this.current.lastEvent.interimAngle;\n        interimDirection = this.current.lastEvent && this.current.lastEvent.interimDirection;\n      } else {\n        interimAngle = this.current.lastEvent && Hammer.utils.getAngle(this.current.lastEvent.center, ev.center);\n        interimDirection = this.current.lastEvent && Hammer.utils.getDirection(this.current.lastEvent.center, ev.center);\n      }\n\n      Hammer.utils.extend(ev, {\n        deltaTime: delta_time,\n\n        deltaX: delta_x,\n        deltaY: delta_y,\n\n        velocityX: velocity.x,\n        velocityY: velocity.y,\n\n        distance: Hammer.utils.getDistance(startEv.center, ev.center),\n\n        angle: Hammer.utils.getAngle(startEv.center, ev.center),\n        interimAngle: interimAngle,\n\n        direction: Hammer.utils.getDirection(startEv.center, ev.center),\n        interimDirection: interimDirection,\n\n        scale: Hammer.utils.getScale(startEv.touches, ev.touches),\n        rotation: Hammer.utils.getRotation(startEv.touches, ev.touches),\n\n        startEvent: startEv\n      });\n\n      return ev;\n    },\n\n    /**\n     * register new gesture\n     * @param   {Object}    gesture object, see gestures.js for documentation\n     * @returns {Array}     gestures\n     */\n    register: function register(gesture) {\n      // add an enable gesture options if there is no given\n      var options = gesture.defaults || {};\n      if (options[gesture.name] === undefined) {\n        options[gesture.name] = true;\n      }\n\n      // extend Hammer default options with the Hammer.gesture options\n      Hammer.utils.extend(Hammer.defaults, options, true);\n\n      // set its index\n      gesture.index = gesture.index || 1000;\n\n      // add Hammer.gesture to the list\n      this.gestures.push(gesture);\n\n      // sort the list by index\n      this.gestures.sort(function (a, b) {\n        if (a.index < b.index) {\n          return -1;\n        }\n        if (a.index > b.index) {\n          return 1;\n        }\n        return 0;\n      });\n\n      return this.gestures;\n    }\n  };\n\n  /**\n   * Drag\n   * Move with x fingers (default 1) around on the page. Blocking the scrolling when\n   * moving left and right is a good practice. When all the drag events are blocking\n   * you disable scrolling on that area.\n   * @events  drag, drapleft, dragright, dragup, dragdown\n   */\n  Hammer.gestures.Drag = {\n    name: 'drag',\n    index: 50,\n    defaults: {\n      drag_min_distance: 10,\n\n      // Set correct_for_drag_min_distance to true to make the starting point of the drag\n      // be calculated from where the drag was triggered, not from where the touch started.\n      // Useful to avoid a jerk-starting drag, which can make fine-adjustments\n      // through dragging difficult, and be visually unappealing.\n      correct_for_drag_min_distance: true,\n\n      // set 0 for unlimited, but this can conflict with transform\n      drag_max_touches: 1,\n\n      // prevent default browser behavior when dragging occurs\n      // be careful with it, it makes the element a blocking element\n      // when you are using the drag gesture, it is a good practice to set this true\n      drag_block_horizontal: false,\n      drag_block_vertical: false,\n\n      // drag_lock_to_axis keeps the drag gesture on the axis that it started on,\n      // It disallows vertical directions if the initial direction was horizontal, and vice versa.\n      drag_lock_to_axis: false,\n\n      // drag lock only kicks in when distance > drag_lock_min_distance\n      // This way, locking occurs only when the distance has become large enough to reliably determine the direction\n      drag_lock_min_distance: 25\n    },\n\n    triggered: false,\n    handler: function dragGesture(ev, inst) {\n      // current gesture isnt drag, but dragged is true\n      // this means an other gesture is busy. now call dragend\n      if (Hammer.detection.current.name != this.name && this.triggered) {\n        inst.trigger(this.name + 'end', ev);\n        this.triggered = false;\n        return;\n      }\n\n      // max touches\n      if (inst.options.drag_max_touches > 0 && ev.touches.length > inst.options.drag_max_touches) {\n        return;\n      }\n\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          this.triggered = false;\n          break;\n\n        case Hammer.EVENT_MOVE:\n          // when the distance we moved is too small we skip this gesture\n          // or we can be already in dragging\n          if (ev.distance < inst.options.drag_min_distance && Hammer.detection.current.name != this.name) {\n            return;\n          }\n\n          // we are dragging!\n          if (Hammer.detection.current.name != this.name) {\n            Hammer.detection.current.name = this.name;\n            if (inst.options.correct_for_drag_min_distance && ev.distance > 0) {\n              // When a drag is triggered, set the event center to drag_min_distance pixels from the original event center.\n              // Without this correction, the dragged distance would jumpstart at drag_min_distance pixels instead of at 0.\n              // It might be useful to save the original start point somewhere\n              var factor = Math.abs(inst.options.drag_min_distance / ev.distance);\n              Hammer.detection.current.startEvent.center.pageX += ev.deltaX * factor;\n              Hammer.detection.current.startEvent.center.pageY += ev.deltaY * factor;\n\n              // recalculate event data using new start point\n              ev = Hammer.detection.extendEventData(ev);\n            }\n          }\n\n          // lock drag to axis?\n          if (Hammer.detection.current.lastEvent.drag_locked_to_axis || inst.options.drag_lock_to_axis && inst.options.drag_lock_min_distance <= ev.distance) {\n            ev.drag_locked_to_axis = true;\n          }\n          var last_direction = Hammer.detection.current.lastEvent.direction;\n          if (ev.drag_locked_to_axis && last_direction !== ev.direction) {\n            // keep direction on the axis that the drag gesture started on\n            if (Hammer.utils.isVertical(last_direction)) {\n              ev.direction = ev.deltaY < 0 ? Hammer.DIRECTION_UP : Hammer.DIRECTION_DOWN;\n            } else {\n              ev.direction = ev.deltaX < 0 ? Hammer.DIRECTION_LEFT : Hammer.DIRECTION_RIGHT;\n            }\n          }\n\n          // first time, trigger dragstart event\n          if (!this.triggered) {\n            inst.trigger(this.name + 'start', ev);\n            this.triggered = true;\n          }\n\n          // trigger normal event\n          inst.trigger(this.name, ev);\n\n          // direction event, like dragdown\n          inst.trigger(this.name + ev.direction, ev);\n\n          // block the browser events\n          if (inst.options.drag_block_vertical && Hammer.utils.isVertical(ev.direction) || inst.options.drag_block_horizontal && !Hammer.utils.isVertical(ev.direction)) {\n            ev.preventDefault();\n          }\n          break;\n\n        case Hammer.EVENT_END:\n          // trigger dragend\n          if (this.triggered) {\n            inst.trigger(this.name + 'end', ev);\n          }\n\n          this.triggered = false;\n          break;\n      }\n    }\n  };\n\n  /**\n   * Hold\n   * Touch stays at the same place for x time\n   * @events  hold\n   */\n  Hammer.gestures.Hold = {\n    name: 'hold',\n    index: 10,\n    defaults: {\n      hold_timeout: 500,\n      hold_threshold: 1\n    },\n    timer: null,\n    handler: function holdGesture(ev, inst) {\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          // clear any running timers\n          clearTimeout(this.timer);\n\n          // set the gesture so we can check in the timeout if it still is\n          Hammer.detection.current.name = this.name;\n\n          // set timer and if after the timeout it still is hold,\n          // we trigger the hold event\n          this.timer = setTimeout(function () {\n            if (Hammer.detection.current.name == 'hold') {\n              inst.trigger('hold', ev);\n            }\n          }, inst.options.hold_timeout);\n          break;\n\n        // when you move or end we clear the timer\n        case Hammer.EVENT_MOVE:\n          if (ev.distance > inst.options.hold_threshold) {\n            clearTimeout(this.timer);\n          }\n          break;\n\n        case Hammer.EVENT_END:\n          clearTimeout(this.timer);\n          break;\n      }\n    }\n  };\n\n  /**\n   * Release\n   * Called as last, tells the user has released the screen\n   * @events  release\n   */\n  Hammer.gestures.Release = {\n    name: 'release',\n    index: Infinity,\n    handler: function releaseGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END) {\n        inst.trigger(this.name, ev);\n      }\n    }\n  };\n\n  /**\n   * Swipe\n   * triggers swipe events when the end velocity is above the threshold\n   * @events  swipe, swipeleft, swiperight, swipeup, swipedown\n   */\n  Hammer.gestures.Swipe = {\n    name: 'swipe',\n    index: 40,\n    defaults: {\n      // set 0 for unlimited, but this can conflict with transform\n      swipe_min_touches: 1,\n      swipe_max_touches: 1,\n      swipe_velocity: 0.7\n    },\n    handler: function swipeGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END) {\n        // max touches\n        if (inst.options.swipe_max_touches > 0 && ev.touches.length < inst.options.swipe_min_touches && ev.touches.length > inst.options.swipe_max_touches) {\n          return;\n        }\n\n        // when the distance we moved is too small we skip this gesture\n        // or we can be already in dragging\n        if (ev.velocityX > inst.options.swipe_velocity || ev.velocityY > inst.options.swipe_velocity) {\n          // trigger swipe events\n          inst.trigger(this.name, ev);\n          inst.trigger(this.name + ev.direction, ev);\n        }\n      }\n    }\n  };\n\n  /**\n   * Tap/DoubleTap\n   * Quick touch at a place or double at the same place\n   * @events  tap, doubletap\n   */\n  Hammer.gestures.Tap = {\n    name: 'tap',\n    index: 100,\n    defaults: {\n      tap_max_touchtime: 250,\n      tap_max_distance: 10,\n      tap_always: true,\n      doubletap_distance: 20,\n      doubletap_interval: 300\n    },\n    handler: function tapGesture(ev, inst) {\n      if (ev.eventType == Hammer.EVENT_END && ev.srcEvent.type != 'touchcancel') {\n        // previous gesture, for the double tap since these are two different gesture detections\n        var prev = Hammer.detection.previous,\n            did_doubletap = false;\n\n        // when the touchtime is higher then the max touch time\n        // or when the moving distance is too much\n        if (ev.deltaTime > inst.options.tap_max_touchtime || ev.distance > inst.options.tap_max_distance) {\n          return;\n        }\n\n        // check if double tap\n        if (prev && prev.name == 'tap' && ev.timeStamp - prev.lastEvent.timeStamp < inst.options.doubletap_interval && ev.distance < inst.options.doubletap_distance) {\n          inst.trigger('doubletap', ev);\n          did_doubletap = true;\n        }\n\n        // do a single tap\n        if (!did_doubletap || inst.options.tap_always) {\n          Hammer.detection.current.name = 'tap';\n          inst.trigger(Hammer.detection.current.name, ev);\n        }\n      }\n    }\n  };\n\n  /**\n   * Touch\n   * Called as first, tells the user has touched the screen\n   * @events  touch\n   */\n  Hammer.gestures.Touch = {\n    name: 'touch',\n    index: -Infinity,\n    defaults: {\n      // call preventDefault at touchstart, and makes the element blocking by\n      // disabling the scrolling of the page, but it improves gestures like\n      // transforming and dragging.\n      // be careful with using this, it can be very annoying for users to be stuck\n      // on the page\n      prevent_default: false,\n\n      // disable mouse events, so only touch (or pen!) input triggers events\n      prevent_mouseevents: false\n    },\n    handler: function touchGesture(ev, inst) {\n      if (inst.options.prevent_mouseevents && ev.pointerType == Hammer.POINTER_MOUSE) {\n        ev.stopDetect();\n        return;\n      }\n\n      if (inst.options.prevent_default) {\n        ev.preventDefault();\n      }\n\n      if (ev.eventType == Hammer.EVENT_START) {\n        inst.trigger(this.name, ev);\n      }\n    }\n  };\n\n  /**\n   * Transform\n   * User want to scale or rotate with 2 fingers\n   * @events  transform, pinch, pinchin, pinchout, rotate\n   */\n  Hammer.gestures.Transform = {\n    name: 'transform',\n    index: 45,\n    defaults: {\n      // factor, no scale is 1, zoomin is to 0 and zoomout until higher then 1\n      transform_min_scale: 0.01,\n      // rotation in degrees\n      transform_min_rotation: 1,\n      // prevent default browser behavior when two touches are on the screen\n      // but it makes the element a blocking element\n      // when you are using the transform gesture, it is a good practice to set this true\n      transform_always_block: false\n    },\n    triggered: false,\n    handler: function transformGesture(ev, inst) {\n      // current gesture isnt drag, but dragged is true\n      // this means an other gesture is busy. now call dragend\n      if (Hammer.detection.current.name != this.name && this.triggered) {\n        inst.trigger(this.name + 'end', ev);\n        this.triggered = false;\n        return;\n      }\n\n      // atleast multitouch\n      if (ev.touches.length < 2) {\n        return;\n      }\n\n      // prevent default when two fingers are on the screen\n      if (inst.options.transform_always_block) {\n        ev.preventDefault();\n      }\n\n      switch (ev.eventType) {\n        case Hammer.EVENT_START:\n          this.triggered = false;\n          break;\n\n        case Hammer.EVENT_MOVE:\n          var scale_threshold = Math.abs(1 - ev.scale);\n          var rotation_threshold = Math.abs(ev.rotation);\n\n          // when the distance we moved is too small we skip this gesture\n          // or we can be already in dragging\n          if (scale_threshold < inst.options.transform_min_scale && rotation_threshold < inst.options.transform_min_rotation) {\n            return;\n          }\n\n          // we are transforming!\n          Hammer.detection.current.name = this.name;\n\n          // first time, trigger dragstart event\n          if (!this.triggered) {\n            inst.trigger(this.name + 'start', ev);\n            this.triggered = true;\n          }\n\n          inst.trigger(this.name, ev); // basic transform event\n\n          // trigger rotate event\n          if (rotation_threshold > inst.options.transform_min_rotation) {\n            inst.trigger('rotate', ev);\n          }\n\n          // trigger pinch event\n          if (scale_threshold > inst.options.transform_min_scale) {\n            inst.trigger('pinch', ev);\n            inst.trigger('pinch' + (ev.scale < 1 ? 'in' : 'out'), ev);\n          }\n          break;\n\n        case Hammer.EVENT_END:\n          // trigger dragend\n          if (this.triggered) {\n            inst.trigger(this.name + 'end', ev);\n          }\n\n          this.triggered = false;\n          break;\n      }\n    }\n  };\n\n  // Based off Lo-Dash's excellent UMD wrapper (slightly modified) - https://github.com/bestiejs/lodash/blob/master/lodash.js#L5515-L5543\n  // some AMD build optimizers, like r.js, check for specific condition patterns like the following:\n  if (typeof define == 'function' && __webpack_require__(/*! !webpack amd options */ \"./node_modules/webpack/buildin/amd-options.js\")) {\n    // define as an anonymous module\n    define(function () {\n      return Hammer;\n    });\n  }\n\n  // check for `exports` after `define` in case a build optimizer adds an `exports` object\n  else if (typeof module === 'object' && module.exports) {\n      module.exports = Hammer;\n    } else {\n      window.Hammer = Hammer;\n    }\n\n  return Hammer;\n}(window);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Hammer);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/hammer.js\n");

/***/ }),

/***/ "./js/index.js":
/*!*********************!*\
  !*** ./js/index.js ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_ClustalRunner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/ClustalRunner */ \"./js/lib/ClustalRunner.js\");\n/* harmony import */ var _lib_UniprotReader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/UniprotReader */ \"./js/lib/UniprotReader.js\");\n/* harmony import */ var _lib_UserdataReader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/UserdataReader */ \"./js/lib/UserdataReader.js\");\n/* harmony import */ var _lib_GenomeReader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/GenomeReader */ \"./js/lib/GenomeReader.js\");\n/* harmony import */ var _lib_GatorDataReader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/GatorDataReader */ \"./js/lib/GatorDataReader.js\");\n/* harmony import */ var _lib_MascpService__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _lib_CondensedSequenceRenderer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/CondensedSequenceRenderer */ \"./js/lib/CondensedSequenceRenderer.js\");\n/* harmony import */ var _lib_Dragger__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/Dragger */ \"./js/lib/Dragger.js\");\n\n\n\n\n\n\n\n\n\n\n\nwindow.MASCP = _lib_MascpService__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\n_lib_MascpService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].ClustalRunner = _lib_ClustalRunner__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n_lib_MascpService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].UniprotReader = _lib_UniprotReader__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n_lib_MascpService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].UserdataReader = _lib_UserdataReader__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n_lib_MascpService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].GenomeReader = _lib_GenomeReader__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n_lib_MascpService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].GatorDataReader = _lib_GatorDataReader__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n_lib_MascpService__WEBPACK_IMPORTED_MODULE_5__[\"default\"].CondensedSequenceRenderer = _lib_CondensedSequenceRenderer__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n\nwindow.Dragger = _lib_Dragger__WEBPACK_IMPORTED_MODULE_7__[\"default\"];//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9pbmRleC5qcz81MzkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbHVzdGFsUnVubmVyIGZyb20gJy4vbGliL0NsdXN0YWxSdW5uZXInO1xuaW1wb3J0IFVuaXByb3RSZWFkZXIgZnJvbSAnLi9saWIvVW5pcHJvdFJlYWRlcic7XG5pbXBvcnQgVXNlcmRhdGFSZWFkZXIgZnJvbSAnLi9saWIvVXNlcmRhdGFSZWFkZXInO1xuaW1wb3J0IEdlbm9tZVJlYWRlciBmcm9tICcuL2xpYi9HZW5vbWVSZWFkZXInO1xuaW1wb3J0IEdhdG9yRGF0YVJlYWRlciBmcm9tICcuL2xpYi9HYXRvckRhdGFSZWFkZXInO1xuXG5pbXBvcnQgTUFTQ1AgZnJvbSAnLi9saWIvTWFzY3BTZXJ2aWNlJztcbmltcG9ydCBDb25kZW5zZWRTZXF1ZW5jZVJlbmRlcmVyIGZyb20gJy4vbGliL0NvbmRlbnNlZFNlcXVlbmNlUmVuZGVyZXInO1xuXG5cbmltcG9ydCBEcmFnZ2VyIGZyb20gJy4vbGliL0RyYWdnZXInO1xuXG53aW5kb3cuTUFTQ1AgPSBNQVNDUDtcbk1BU0NQLkNsdXN0YWxSdW5uZXIgPSBDbHVzdGFsUnVubmVyO1xuTUFTQ1AuVW5pcHJvdFJlYWRlciA9IFVuaXByb3RSZWFkZXI7XG5NQVNDUC5Vc2VyZGF0YVJlYWRlciAgPSBVc2VyZGF0YVJlYWRlciA7XG5NQVNDUC5HZW5vbWVSZWFkZXIgPSBHZW5vbWVSZWFkZXI7XG5NQVNDUC5HYXRvckRhdGFSZWFkZXIgPSBHYXRvckRhdGFSZWFkZXI7XG5NQVNDUC5Db25kZW5zZWRTZXF1ZW5jZVJlbmRlcmVyID0gQ29uZGVuc2VkU2VxdWVuY2VSZW5kZXJlcjtcblxud2luZG93LkRyYWdnZXIgPSBEcmFnZ2VyOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/index.js\n");

/***/ }),

/***/ "./js/lib/ClustalRunner.js":
/*!*********************************!*\
  !*** ./js/lib/ClustalRunner.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MascpService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/** @fileOverview   Classes for reading data from the Clustal tool\n */\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Clustal for given sequences\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst ClustalRunner = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buildService(function (data) {\n    this._raw_data = data;\n    if (data && typeof data == 'string') {\n        this._raw_data = { 'data': { 'sequences': this.getSequences(), 'alignment': this.getAlignment() } };\n    }\n    return this;\n});\n\nClustalRunner.SERVICE_URL = 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/run/';\n\nClustalRunner.hash = function (str) {\n    var hash = 0;\n    for (i = 0; i < str.length; i++) {\n        char = str.charCodeAt(i);\n        hash = char + (hash << 6) + (hash << 16) - hash;\n    }\n    return hash;\n};\n\nClustalRunner.prototype.requestData = function () {\n    var sequences = [].concat(this.sequences || []);\n    var self = this;\n    this.agi = ClustalRunner.hash(this.sequences.join(',')) + '';\n    if (!ClustalRunner.SERVICE_URL.match(/ebi/)) {\n        return {\n            type: \"POST\",\n            dataType: \"json\",\n            api_key: _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_CLIENT_ID,\n            data: {\n                'sequences': sequences.join(\",\")\n            }\n        };\n    }\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'running');\n    if (this.job_id) {\n        return {\n            type: \"GET\",\n            dataType: \"txt\",\n            url: 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/status/' + this.job_id\n        };\n    }\n    if (this.result_id) {\n        return {\n            type: \"GET\",\n            dataType: \"txt\",\n            url: 'http://www.ebi.ac.uk/Tools/services/rest/clustalw2/result/' + this.result_id + '/aln-clustalw'\n        };\n    }\n\n    for (var i = 0; i < sequences.length; i++) {\n        sequences[i] = \">seq\" + i + \"\\n\" + sequences[i];\n    }\n    return {\n        type: \"POST\",\n        dataType: \"txt\",\n        data: { 'sequence': escape(sequences.join(\"\\n\") + \"\\n\"),\n            'email': 'joshi%40sund.ku.dk'\n        }\n    };\n};\n\n(function (serv) {\n    var defaultDataReceived = serv.prototype._dataReceived;\n\n    serv.prototype._dataReceived = function (data, status) {\n        if (data === null) {\n            return defaultDataReceived.call(this, null, status);\n        }\n        if (typeof data == \"object\") {\n            if (data.status && data.status == \"RUNNING\") {\n                var self = this;\n                _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, \"running\");\n                setTimeout(function () {\n                    self.retrieve(self.agi);\n                }, 5000);\n                console.log(\"Got back running status\");\n                return;\n            }\n            return defaultDataReceived.call(this, data, status);\n        }\n\n        if (typeof data == \"string\" && data.match(/^clustalw/)) {\n            this.job_id = data;\n            this.retrieve(this.agi);\n            return;\n        }\n        if (data.match(/FINISHED/)) {\n            this.result_id = this.job_id;\n            this.job_id = null;\n            var self = this;\n            setTimeout(function () {\n                self.retrieve(self.agi);\n            }, 500);\n            return;\n        }\n        if (data.match(/RUNNING/)) {\n            var self = this;\n            setTimeout(function () {\n                self.retrieve(self.agi);\n            }, 500);\n            return;\n        }\n\n        return defaultDataReceived.call(this, data, status);\n    };\n})(ClustalRunner);\n\n(function () {\n    var normalise_insertions = function normalise_insertions(inserts) {\n        var pos;\n        var positions = [];\n        var result_data = {};\n        for (pos in inserts) {\n            if (inserts.hasOwnProperty(pos) && parseInt(pos) >= -1) {\n                positions.push(parseInt(pos));\n            }\n        }\n        positions = positions.sort(function sortfunction(a, b) {\n            return a - b;\n        });\n\n        // From highest to lowest position, loop through and \n        // subtract the lengths of previous subtratctions from\n        // the final position value.\n\n        for (var i = positions.length - 1; i >= 0; i--) {\n            var j = i - 1;\n            pos = parseInt(positions[i]);\n            var value = inserts[pos];\n            while (j >= 0) {\n                pos -= inserts[positions[j]].length;\n                j--;\n            }\n            if (!value.match(/^\\s+$/)) {\n                result_data[pos + 1] = value + (result_data[pos + 1] || '');\n            }\n        }\n        //    delete result_data[0];\n        return result_data;\n    };\n\n    var splice_char = function splice_char(seqs, index, insertions) {\n        for (var i = 0; i < seqs.length; i++) {\n            var seq = seqs[i].toString();\n            if (seq.charAt(index) != '-') {\n                if (!insertions[i]) {\n                    insertions[i] = {};\n                    insertions[i][-1] = '';\n                }\n                insertions[i][index - 1] = seq.charAt(index);\n                if (insertions[i][index] && insertions[i][index].match(/\\w/)) {\n                    insertions[i][index - 1] += insertions[i][index];\n                    delete insertions[i][index];\n                }\n            } else {\n                if (insertions[i]) {\n                    insertions[i][index - 1] = ' ';\n                    if ((insertions[i][index] || '').match(/^\\s+$/)) {\n                        insertions[i][index - 1] += insertions[i][index];\n                        delete insertions[i][index];\n                    }\n                }\n            }\n            seqs[i] = seq.slice(0, index) + seq.slice(index + 1);\n        }\n    };\n\n    ClustalRunner.Result.prototype.alignToSequence = function (seq_index) {\n        if (!this._orig_raw_data) {\n            this._orig_raw_data = JSON.stringify(this._raw_data);\n        } else {\n            this._raw_data = JSON.parse(this._orig_raw_data);\n        }\n        var seqs = this._raw_data.data.sequences.concat([this._raw_data.data.alignment]);\n        var insertions = [];\n        var aligning_seq = seqs[seq_index],\n            i = aligning_seq.length - 1;\n        for (i; i >= 0; i--) {\n            if (aligning_seq.charAt(i) == '-') {\n                splice_char(seqs, i, insertions);\n            }\n        }\n        for (i = 0; i < seqs.length; i++) {\n            if (insertions[i] && i != seq_index) {\n                insertions[i] = normalise_insertions(insertions[i]);\n                var seq = seqs[i];\n                seqs[i] = { 'sequence': seq, 'insertions': insertions[i] };\n                seqs[i].toString = function () {\n                    return this.sequence;\n                };\n            }\n        }\n        this._raw_data.data.alignment = seqs.pop();\n        this._raw_data.data.sequences = seqs;\n    };\n\n    /*\n    \n    Test suite for calculating positions\n    \n    var aligner = 0;\n    foo = new ClustalRunner.Result();\n    foo._raw_data = {\"data\" : { \"alignment\" : \"****************\" , \"sequences\" : [ \"----12345678----\", \"XXXXXXXXXXXXXXXX\", \"ABCDABC---ABCDAB\" ] }};\n    foo.alignToSequence(aligner);\n    console.log(foo.getSequences());\n    console.log(foo.calculatePositionForSequence(0,1));\n    console.log(foo.calculatePositionForSequence(0,2));\n    console.log(foo.calculatePositionForSequence(0,3));\n    console.log(foo.calculatePositionForSequence(0,4));\n    console.log(foo.calculatePositionForSequence(0,5));\n    console.log(foo.calculatePositionForSequence(0,6));\n    console.log(foo.calculatePositionForSequence(0,7));\n    console.log(foo.calculatePositionForSequence(0,8));\n    \n    */\n    ClustalRunner.Result.prototype.calculatePositionForSequence = function (idx, pos) {\n        var inserts = this._raw_data.data.sequences[idx].insertions || {};\n        var result = pos;\n        var actual_position = 0;\n        var seq = this._raw_data.data.sequences[idx].toString();\n        for (var i = 0; i < seq.length; i++) {\n            if (inserts[i]) {\n                actual_position += inserts[i].length;\n            }\n            actual_position += 1;\n            if (seq.charAt(i) == '-') {\n                actual_position -= 1;\n            }\n            if (pos <= actual_position) {\n                if (pos == actual_position) {\n                    return i + 1;\n                } else {\n                    if (i == 0) {\n                        i = 1;\n                    }\n                    return -1 * i;\n                }\n            }\n        }\n        return -1 * seq.length;\n    };\n\n    ClustalRunner.Result.prototype.calculateSequencePositionFromPosition = function (idx, pos) {\n        var inserts = this._raw_data.data.sequences[idx].insertions || {};\n        var result = pos;\n        var actual_position = 0;\n        var seq = this._raw_data.data.sequences[idx].toString();\n        for (var i = 0; i < pos; i++) {\n            if (inserts[i]) {\n                actual_position += inserts[i].length;\n            }\n            actual_position += 1;\n            if (seq.charAt(i) == '-') {\n                actual_position -= 1;\n            }\n        }\n        if (actual_position == 0) {\n            actual_position += 1;\n        }\n        return actual_position;\n    };\n})();\n//1265 (P)\n\nClustalRunner.prototype.setupSequenceRenderer = function (renderer) {\n    var self = this;\n\n    renderer.sequences = self.sequences;\n\n    renderer.addAxisScale('clustal', function (pos, layer, inverse) {\n        var idx = self.sequences.map(function (seq) {\n            return seq.agi;\n        }).indexOf(layer.name.toLowerCase());\n        if (layer.name === 'primarySequence') {\n            idx = self.result.aligned_idx;\n        }\n        if (idx < 0) {\n            return pos;\n        }\n        if (inverse) {\n            return self.result.calculateSequencePositionFromPosition(idx, pos);\n        }\n        return self.result.calculatePositionForSequence(idx, pos);\n    });\n\n    renderer.forceTrackAccs = true;\n    var rendered_bits = [];\n    var controller_name = 'isoforms';\n    var group_name = 'isoforms';\n\n    var draw_discontinuity = function draw_discontinuity(canvas, size) {\n        var top = -3;\n        var left = -2;\n        var group = canvas.group();\n        var line;\n        line = canvas.line(left + 1, top + 4, left + 3, top + 1);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        line = canvas.line(left + 1, top + 6, left + 3, top + 3);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        line = canvas.line(left + 1, top + 4, left + 3, top + 3);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '5');\n        group.push(line);\n        line = canvas.line(left + 1, top + 5.3, left + 1, top + 5.8);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        line = canvas.line(left + 1, top + 5.9, left + 1.5, top + 5.9);\n        line.setAttribute('stroke', '#fcc');\n        line.setAttribute('stroke-width', '10');\n        group.push(line);\n        var circle = canvas.circle(left + 2.8, top + 1.75, 1);\n        circle.setAttribute('fill', '#fff');\n        circle.setAttribute('stroke', '#ccc');\n        circle.setAttribute('stroke-width', '10');\n        group.push(circle);\n        var minus = canvas.text(left + 2.25, top + 2.25, (size || '÷') + \"\");\n        minus.setAttribute('fill', '#ccc');\n        minus.setAttribute('font-size', 75);\n        group.push(minus);\n        canvas.firstChild.nextSibling.appendChild(group);\n        return group;\n    };\n\n    var check_values = function check_values(seq, idx, seqs) {\n        var positives = 0;\n        var aa = seq.toString().charAt(idx);\n        for (var i = 1; i < seqs.length; i++) {\n            if (seqs[i].toString().charAt(idx) == aa) {\n                positives += 1;\n            }\n        }\n        return positives / (seqs.length - 1);\n    };\n\n    var redraw_alignments = function redraw_alignments(sequence_index) {\n        var result = self.result;\n\n        while (rendered_bits.length > 0) {\n            var bit = rendered_bits.shift();\n            renderer.remove(bit.layer, bit);\n        }\n        result.alignToSequence(sequence_index || 0);\n\n        var aligned = result.getSequences();\n\n        if (!renderer.sequence) {\n            renderer.setSequence(aligned[sequence_index])(function () {\n                renderer.sequences = self.sequences;\n                _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerGroup(group_name, 'Aligned');\n                _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer(controller_name, { 'fullname': 'Conservation', 'color': '#000000' });\n                if (renderer.trackOrder.indexOf(controller_name) < 0) {\n                    renderer.trackOrder = renderer.trackOrder.concat([controller_name]);\n                }\n                renderer.showLayer(controller_name);\n                renderer.createGroupController(controller_name, group_name);\n                redraw_alignments(sequence_index);\n            });\n            return;\n        } else {\n            renderer.sequence = aligned[sequence_index];\n            renderer.redrawAxis();\n        }\n        var alignments = result.getAlignment().split('');\n        rendered_bits = rendered_bits.concat(renderer.renderTextTrack(controller_name, result.getAlignment().replace(/ /g, ' ')));\n        rendered_bits.slice(-1)[0].setAttribute('data-spaces', 'true');\n        rendered_bits.slice(-1)[0].layer = controller_name;\n        var idxs = [\"*\", \":\", \".\", \" \"].reverse();\n        for (var i = 0; i < alignments.length; i++) {\n            rendered_bits.push(renderer.getAA(i + 1, controller_name).addBoxOverlay(controller_name, 1, idxs.indexOf(alignments[i]) / 4, { \"merge\": true }));\n            rendered_bits.slice(-1)[0].layer = controller_name;\n        }\n        for (var i = 0; i < aligned.length; i++) {\n            var layname = self.sequences[i].agi.toUpperCase() || \"missing\" + i;\n            var lay = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer(layname, { 'fullname': self.sequences[i].name || layname.toUpperCase(), 'group': group_name, 'color': '#ff0000' });\n            lay.fullname = self.sequences[i].name || layname.toUpperCase();\n            var text_array = renderer.renderTextTrack(layname, aligned[i].toString());\n            rendered_bits = rendered_bits.concat(text_array);\n            rendered_bits.slice(-1)[0].layer = layname;\n            if (renderer.trackOrder.indexOf(layname.toUpperCase()) < 0) {\n                console.log(\"Adding \", layname, \" to renderer\");\n                renderer.trackOrder = renderer.trackOrder.concat([group_name]);\n            }\n            var name = \"Isoform \" + (i + 1);\n            if (aligned[i].insertions) {\n                for (var insert in aligned[i].insertions) {\n                    var insertions = aligned[i].insertions;\n                    if (insert == 0 && insertions[insert] == \"\") {\n                        continue;\n                    }\n                    if (insertions[insert].length < 1) {\n                        continue;\n                    }\n                    var size = insertions[insert].length;\n                    if (insert == 0) {\n                        insert = 1;\n                    }\n                    var content = draw_discontinuity(renderer._canvas, size);\n                    content.setAttribute('fill', '#ffff00');\n                    var an_anno = renderer.getAA(insert, controller_name).addToLayer(layname, { 'content': content, //'+'+insertions[insert].length,\n                        'bare_element': true,\n                        'height': 10,\n                        'offset': -5,\n                        'no_tracer': true\n                    })[1];\n                    an_anno.container.setAttribute('height', '300');\n                    an_anno.container.setAttribute('viewBox', '-50 -100 200 300');\n                    rendered_bits.push(an_anno);\n                    rendered_bits.slice(-1)[0].layer = layname;\n                }\n            }\n        }\n        renderer.zoom = 1;\n        renderer.showGroup(group_name);\n        renderer.refresh();\n    };\n\n    this.bind('resultReceived', function () {\n        var self = this;\n        redraw_alignments(0);\n        self.result.aligned_idx = 0;\n        var accs = [];\n        self.sequences.forEach(function (seq) {\n            accs.push(seq.agi.toUpperCase());\n        });\n        var current_order = [];\n        renderer.bind('orderChanged', function (order) {\n            if (self.result) {\n                var new_order = order.slice(order.indexOf(controller_name) + 1, order.length).filter(function (track) {\n                    return accs.indexOf(track) >= 0;\n                });\n                if (new_order.join(',') == current_order.join(',')) {\n                    return;\n                }\n                current_order = new_order;\n                self.result.aligned_idx = accs.indexOf(current_order[0]);\n\n                redraw_alignments(self.result.aligned_idx);\n                renderer.refreshScale();\n            }\n        });\n    });\n};\n\nClustalRunner.Result.prototype.getSequences = function () {\n    if (this._raw_data && this._raw_data.data && this._raw_data.data.sequences) {\n        return [].concat(this._raw_data.data.sequences);\n    }\n    var bits = this._raw_data.match(/seq\\d+(.*)/g);\n    var results = [];\n    for (var i = 0; i < bits.length; i++) {\n        var seqbits = bits[i].match(/seq(\\d+)\\s+(.*)/);\n        if (!results[seqbits[1]]) {\n            results[seqbits[1]] = '';\n        }\n        results[seqbits[1]] += seqbits[2];\n    }\n    return results;\n};\n\nClustalRunner.Result.prototype.getAlignment = function () {\n    if (this._raw_data && this._raw_data.data && this._raw_data.data.alignment) {\n        return this._raw_data.data.alignment.toString();\n    }\n    this._text_data = this._raw_data;\n    var re = / {16}(.*)/g;\n    var result = \"\";\n    var match = re.exec(this._raw_data);\n    while (match !== null) {\n        result += match[1];\n        match = re.exec(this._raw_data);\n    }\n\n    return result;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ClustalRunner);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/ClustalRunner.js\n");

/***/ }),

/***/ "./js/lib/CondensedSequenceRenderer.js":
/*!*********************************************!*\
  !*** ./js/lib/CondensedSequenceRenderer.js ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MascpService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SequenceRenderer */ \"./js/lib/SequenceRenderer.js\");\n/* harmony import */ var _CondensedSequenceRendererNavigation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CondensedSequenceRendererNavigation */ \"./js/lib/CondensedSequenceRendererNavigation.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/* harmony import */ var _SVGCanvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SVGCanvas */ \"./js/lib/SVGCanvas.js\");\n/**\n *  @fileOverview   Basic classes and definitions for an SVG-based sequence renderer\n */\n\n\n\n\n\n\n\nconst svgns = 'http://www.w3.org/2000/svg';\n\n/** Default class constructor\n *  @class      Renders a sequence using a condensed track-based display\n *  @param      {Element} sequenceContainer Container element that the sequence currently is found in, and also \n *              the container that data will be re-inserted into.\n *  @extends    MASCP.SequenceRenderer\n */\nconst CondensedSequenceRenderer = function CondensedSequenceRenderer(sequenceContainer) {\n    this._RS = 50;\n    _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"].apply(this, arguments);\n    var self = this;\n\n    // Create a common layer for the primary sequence\n    _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer('primarySequence', { 'fullname': 'Primary Sequence' });\n\n    CondensedSequenceRenderer.Zoom(self);\n    var resizeTimeout;\n    var resize_callback = function resize_callback() {\n        sequenceContainer.cached_width = sequenceContainer.getBoundingClientRect().width;\n    };\n    window.addEventListener('resize', function () {\n        clearTimeout(resizeTimeout);\n        if (window.requestAnimationFrame) {\n            window.requestAnimationFrame(resize_callback);\n        } else {\n            resizeTimeout = setTimeout(resize_callback, 100);\n        }\n    }, true);\n    sequenceContainer.cached_width = sequenceContainer.getBoundingClientRect().width;\n\n    // We want to unbind the default handler for sequence change that we get from\n    // inheriting from CondensedSequenceRenderer\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this, 'sequenceChange');\n\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'sequenceChange', function () {\n        for (var layername in _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n            if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers.hasOwnProperty(layername)) {\n                _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layername].disabled = true;\n            }\n        }\n        self.zoom = self.zoom;\n    });\n\n    return this;\n};\n\nCondensedSequenceRenderer.prototype = new _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\n(function () {\n    var scripts = document.getElementsByTagName(\"script\");\n    var src = scripts[scripts.length - 1].src;\n    src = src.replace(/[^\\/]+$/, '');\n    CondensedSequenceRenderer._BASE_PATH = src;\n})();\n\n(function (clazz) {\n    var createCanvasObject = function createCanvasObject() {\n        var renderer = this;\n\n        if (this._object) {\n            if (typeof svgweb != 'undefined') {\n                svgweb.removeChild(this._object, this._object.parentNode);\n            } else {\n                this._object.parentNode.removeChild(this._object);\n            }\n            this._canvas = null;\n            this._object = null;\n        }\n        var canvas;\n        if (document.implementation.hasFeature(\"http://www.w3.org/TR/SVG11/feature#BasicStructure\", \"1.1\")) {\n            var native_canvas = this.win().document.createElementNS(svgns, 'svg');\n            native_canvas.setAttribute('width', '100%');\n            native_canvas.setAttribute('height', '100%');\n            this._container.appendChild(native_canvas);\n            this._canvas = native_canvas;\n            canvas = {\n                'addEventListener': function addEventListener(name, load_func) {\n                    native_canvas.contentDocument = { 'rootElement': native_canvas };\n                    load_func.call(native_canvas);\n                }\n            };\n        }\n\n        canvas.addEventListener('load', function () {\n            var container_canv = this;\n            Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(container_canv);\n            if (renderer.font_order) {\n                container_canv.font_order = renderer.font_order;\n            }\n            var group = container_canv.makeEl('g');\n\n            var canv = container_canv.makeEl('svg');\n            canv.RS = renderer._RS;\n            Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(canv);\n            if (renderer.font_order) {\n                canv.font_order = renderer.font_order;\n            }\n            group.appendChild(canv);\n            container_canv.appendChild(group);\n\n            var supports_events = true;\n\n            try {\n                var noop = canv.addEventListener;\n            } catch (err) {\n                supports_events = false;\n            }\n\n            if (false) { var mouse_moves, oldAddEventListener; }\n\n            var canvas_rect = canv.makeEl('rect', { 'x': '-10%',\n                'y': '-10%',\n                'width': '120%',\n                'height': '120%',\n                'style': 'fill: #ffffff;' });\n\n            var left_fade = container_canv.makeEl('rect', { 'x': '0',\n                'y': '0',\n                'width': '50',\n                'height': '100%',\n                'style': 'fill: url(#left_fade);' });\n\n            var right_fade = container_canv.makeEl('rect', { 'x': '100%',\n                'y': '0',\n                'width': '25',\n                'height': '100%',\n                'transform': 'translate(-15,0)',\n                'style': 'fill: url(#right_fade);' });\n\n            container_canv.appendChild(left_fade);\n            container_canv.appendChild(right_fade);\n\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, 'pan', function () {\n                if (canv.currentTranslateCache.x >= 0) {\n                    left_fade.setAttribute('visibility', 'hidden');\n                } else {\n                    left_fade.setAttribute('visibility', 'visible');\n                }\n                if (renderer.rightVisibleResidue() < renderer.sequence.length) {\n                    right_fade.setAttribute('visibility', 'visible');\n                } else {\n                    right_fade.setAttribute('visibility', 'hidden');\n                }\n            });\n\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, '_anim_begin', function () {\n                left_fade.setAttribute('visibility', 'hidden');\n                right_fade.setAttribute('visibility', 'hidden');\n            });\n\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, '_anim_end', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(canv, 'pan');\n            });\n\n            canv.currentTranslateCache = { x: 0, y: 0 };\n\n            if (canv.currentTranslateCache.x >= 0) {\n                left_fade.setAttribute('visibility', 'hidden');\n            }\n            right_fade.setAttribute('visibility', 'hidden');\n\n            var nav_group = container_canv.makeEl('g');\n            container_canv.appendChild(nav_group);\n            var nav_canvas = container_canv.makeEl('svg');\n            nav_group.appendChild(nav_canvas);\n\n            group.style.willChange = 'transform';\n\n            canv.setScale = function (scale) {\n                var curr_transform = (group._cached_transform || '').replace(/scale\\([^\\)]+\\)/, '');\n                if (scale !== null) {\n                    curr_transform = (curr_transform + ' scale(' + scale + ') ').replace(/\\s+/g, ' ');\n                }\n                group._cached_transform = curr_transform;\n                group.style.transform = curr_transform;\n            };\n\n            var ua = window.navigator.userAgent;\n            var is_explorer = false;\n            if (ua.indexOf('Edge/') >= 0) {\n                is_explorer = true;\n            }\n\n            canv.setCurrentTranslateXY = function (x, y) {\n                var curr_transform = group._cached_transform || '';\n                curr_transform = (curr_transform.replace(/translate\\([^\\)]+\\)/, '') + ' translate(' + x + 'px, ' + y + 'px) ').replace(/\\s+/g, ' ');\n                group._cached_transform = curr_transform;\n                if (!is_explorer) {\n                    group.style.transform = curr_transform;\n                } else {\n                    group.setAttribute('transform', curr_transform.replace(/px/g, ''));\n                }\n\n                this.currentTranslateCache.x = x;\n                this.currentTranslateCache.y = y;\n            };\n            canv.setCurrentTranslateXY(0, 0);\n\n            nav_canvas.setCurrentTranslateXY = function (x, y) {\n                var curr_transform = (nav_group.getAttribute('transform') || '').replace(/translate\\([^\\)]+\\)/, '');\n                curr_transform = curr_transform + ' translate(' + x + ', ' + y + ') ';\n                nav_group.setAttribute('transform', curr_transform);\n                this.currentTranslate.x = x;\n                this.currentTranslate.y = y;\n            };\n            nav_canvas.setCurrentTranslateXY(0, 0);\n\n            addNav.call(renderer, nav_canvas);\n\n            var nav = renderer.navigation;\n            var old_show = nav.show,\n                old_hide = nav.hide;\n            nav.show = function () {\n                old_show.apply(nav, arguments);\n                canv.style.GomapScrollLeftMargin = 100 * renderer._RS / renderer.zoom;\n            };\n\n            nav.hide = function () {\n                old_hide.apply(nav, arguments);\n                canv.style.GomapScrollLeftMargin = 1000;\n            };\n\n            renderer._container_canvas = container_canv;\n            container_canv.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n            container_canv.setAttribute('width', '100%');\n            container_canv.setAttribute('height', '100%');\n            canv.appendChild(canv.makeEl('rect', { 'x': 0, 'y': 0, 'opacity': 0, 'width': '100%', 'height': '100%', 'stroke-width': '0', 'fill': '#ffffff' }));\n            renderer._object = this;\n            renderer._canvas = canv;\n            renderer._canvas._canvas_height = 0;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(renderer, 'svgready');\n        }, false);\n\n        return canvas;\n    };\n\n    var wheel_fn = function wheel_fn(e) {\n        e.stopPropagation();\n        return true;\n    };\n\n    var addNav = function addNav(nav_canvas) {\n        this.navigation = new CondensedSequenceRenderer.Navigation(nav_canvas, this);\n        var nav = this.navigation;\n        var self = this;\n\n        var hide_chrome = function hide_chrome() {\n            nav.demote();\n        };\n\n        var show_chrome = function show_chrome() {\n            nav.promote();\n            nav.refresh();\n        };\n\n        if (!_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE) {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, 'panstart', hide_chrome);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, 'panend', show_chrome);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, '_anim_begin', hide_chrome);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._canvas, '_anim_end', show_chrome);\n            nav_canvas.addEventListener('DOMMouseScroll', wheel_fn, false);\n            nav_canvas.addEventListener('wheel', wheel_fn, false);\n            nav_canvas.onmousewheel = wheel_fn;\n        }\n    };\n    var drawAminoAcids = function drawAminoAcids() {\n        var renderer = this;\n        var aas = renderer.addTextTrack(this.sequence, this._canvas.set());\n        aas.attr({ 'y': 0.5 * renderer._axis_height * renderer._RS });\n        renderer.select = function () {\n            var vals = Array.prototype.slice.call(arguments);\n            var from = vals[0];\n            var to = vals[1];\n            this.moveHighlight.apply(this, vals);\n        };\n        var zoomchange = function zoomchange() {\n            aas.attr({ 'y': 0.5 * renderer._axis_height * renderer._RS });\n        };\n        var canvas = renderer._canvas;\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'zoomChange', zoomchange);\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(aas, 'removed', function () {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'zoomChange', zoomchange);\n        });\n        return aas;\n    };\n    var mainDrawAxis;\n    var drawAxis = mainDrawAxis = function mainDrawAxis(canvas, lineLength) {\n        var RS = this._RS;\n        var self = this;\n        var x = 0,\n            i = 0;\n\n        var axis = canvas.set();\n\n        var axis_back = canvas.rect(0, 0, lineLength, 1.5);\n        axis_back.setAttribute('fill', \"url('#\" + self.axis_pattern_id + \"')\");\n        axis_back.removeAttribute('stroke');\n        axis_back.removeAttribute('stroke-width');\n        axis_back.setAttribute('id', 'axis_back');\n\n        var base_axis_height = 30;\n\n        var all_labels = canvas.set();\n        var major_mark_labels = canvas.set();\n        var minor_mark_labels = canvas.set();\n        var thousand_mark_labels = canvas.set();\n        var minor_mark = 10;\n        var major_mark = 20;\n\n        if (this.sequence.length > 5000) {\n            minor_mark = 100;\n            major_mark = 200;\n        }\n        if (this.sequence.length > 1000) {\n            minor_mark = 20;\n            major_mark = 40;\n        }\n        for (i = 0; i < lineLength / 5; i++) {\n\n            var a_text = canvas.text(x - 0.5, 0, \"\" + x);\n            all_labels.push(a_text);\n\n            if (x % major_mark === 0 && x !== 0) {\n                major_mark_labels.push(a_text);\n            } else if (x % minor_mark === 0 && x !== 0) {\n                minor_mark_labels.push(a_text);\n            }\n            if (x % (250 * parseInt(this.sequence.length / 500)) === 0 && x !== 0) {\n                thousand_mark_labels.push(a_text);\n            }\n            x += 5;\n        }\n\n        for (i = 0; i < all_labels.length; i++) {\n            all_labels[i].style.textAnchor = 'middle';\n            all_labels[i].firstChild.setAttribute('dy', '1.5ex');\n        }\n\n        all_labels.attr({ 'pointer-events': 'none', 'text-anchor': 'middle', 'font-size': 7 * RS + 'pt' });\n        all_labels.hide();\n\n        self._axis_height = parseInt(base_axis_height / self.zoom);\n\n        var zoom_status = null;\n        var zoomchange = function zoomchange() {\n            var renderer = self;\n            renderer._axis_height = parseInt(base_axis_height / renderer.zoom);\n            var pattern = renderer._canvas.ownerSVGElement.getElementById(renderer.axis_pattern_id);\n\n            thousand_mark_labels.forEach(function (label) {\n                label.setAttribute('visibility', 'hidden');\n            });\n\n            if (this.zoom > 3.6) {\n                axis_back.setAttribute('transform', 'translate(-5,' + 0.3 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.25 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 10 * RS);\n                pattern.firstChild.setAttribute('x', 9.5 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n\n                minor_mark_labels.show();\n                major_mark_labels.show();\n                var text_scale = 0.15 * self._axis_height;\n                if (text_scale < 1) {\n                    text_scale = 1;\n                }\n                minor_mark_labels.attr({ 'font-size': text_scale * RS + 'pt', 'text-anchor': 'end' });\n                major_mark_labels.attr({ 'font-size': text_scale * RS + 'pt', 'text-anchor': 'end' });\n                if (this._visibleTracers && this._visibleTracers()) {\n                    this._visibleTracers().show();\n                }\n            } else if (this.zoom > 1.8) {\n\n                minor_mark_labels.hide();\n                major_mark_labels.show();\n                major_mark_labels.attr({ 'font-size': 0.5 * RS * self._axis_height + 'pt', 'text-anchor': 'middle' });\n                axis_back.setAttribute('transform', 'translate(-25,' + 0.5 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.3 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 20 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n                pattern.firstChild.setAttribute('x', '0');\n                if (this.tracers) {\n                    this.tracers.hide();\n                }\n            } else if (this.zoom > 0.2) {\n\n                if (this.tracers) {\n                    this.tracers.hide();\n                }\n                minor_mark_labels.hide();\n                major_mark_labels.show();\n                major_mark_labels.attr({ 'font-size': 0.5 * RS * self._axis_height + 'pt', 'text-anchor': 'middle' });\n                axis_back.setAttribute('transform', 'translate(-25,' + 0.5 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.3 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 50 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n\n                var last_right = -10000;\n                var changed = false;\n                major_mark_labels.forEach(function (label) {\n                    if (!label.cached_bbox) {\n                        label.cached_bbox = label.getBBox();\n                    }\n                    if (label.cached_bbox.x <= last_right + RS * 10 || parseInt(label.textContent) % 50 != 0) {\n                        label.setAttribute('visibility', 'hidden');\n                        changed = true;\n                    } else {\n                        label.setAttribute('visibility', 'visible');\n                        last_right = label.cached_bbox.x + label.cached_bbox.width;\n                    }\n                });\n                if (changed) {\n                    major_mark_labels[0].setAttribute('visibility', 'hidden');\n                }\n            } else {\n                if (this.tracers) {\n                    this.tracers.hide();\n                }\n                minor_mark_labels.hide();\n                major_mark_labels.hide();\n                thousand_mark_labels.show();\n                thousand_mark_labels.attr({ 'font-size': 0.5 * RS * self._axis_height + 'pt', 'text-anchor': 'middle' });\n\n                axis_back.setAttribute('transform', 'translate(-50,' + 0.85 * renderer._axis_height * RS + ')');\n                axis_back.setAttribute('height', 0.1 * renderer._axis_height * RS);\n                pattern.setAttribute('width', 250 * RS);\n                pattern.firstChild.setAttribute('width', RS / renderer.zoom);\n\n                var last_right = -10000;\n                var changed = false;\n                thousand_mark_labels.forEach(function (label) {\n                    if (!label.cached_bbox) {\n                        label.cached_bbox = label.getBBox();\n                    }\n                    if (label.cached_bbox.x <= last_right + RS * 10 || parseInt(label.textContent) % 250 != 0) {\n                        label.setAttribute('visibility', 'hidden');\n                    } else {\n                        label.setAttribute('visibility', 'visible');\n                        last_right = label.cached_bbox.x + label.cached_bbox.width;\n                    }\n                });\n                if (changed) {\n                    thousand_mark_labels[0].setAttribute('visibility', 'hidden');\n                }\n            }\n        };\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'zoomChange', zoomchange);\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(axis, 'removed', function () {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'zoomChange', zoomchange);\n            var remover = function remover(el) {\n                if (el.parentNode) {\n                    el.parentNode.removeChild(el);\n                }\n            };\n            axis_back.parentNode.removeChild(axis_back);\n            all_labels.forEach(remover);\n        });\n        return axis;\n    };\n\n    clazz.prototype.panTo = function (end, callback) {\n        var renderer = this;\n        var pos = renderer.leftVisibleResidue();\n        var delta = 1;\n        if (pos == end) {\n            if (callback) {\n                callback.call(null);\n            }\n            return;\n        }\n        if (pos > end) {\n            delta = -1;\n        }\n        requestAnimationFrame(function () {\n            renderer.setLeftVisibleResidue(pos);\n            pos += delta;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(renderer._canvas, 'panend');\n            if (pos !== end) {\n                requestAnimationFrame(arguments.callee);\n            } else {\n                if (callback) {\n                    callback.call(null);\n                }\n            }\n        });\n    };\n\n    clazz.prototype.zoomTo = function (zoom, residue, callback) {\n        var renderer = this;\n        var curr = renderer.zoom;\n        var delta = (zoom - curr) / 50;\n        let zoomchange = function zoomchange() {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(renderer, 'zoomChange', zoomchange);\n            delete renderer.zoomCenter;\n            if (callback) {\n                callback.call(null);\n            }\n        };\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(renderer, 'zoomChange', zoomchange);\n        if (residue) {\n            renderer.zoomCenter = residue == 'center' ? residue : { 'x': renderer._RS * residue };\n        } else {\n            renderer.zoom = zoom;\n            return;\n        }\n        requestAnimationFrame(function () {\n            renderer.zoom = curr;\n            curr += delta;\n            if (Math.abs(curr - zoom) > 0.01) {\n                requestAnimationFrame(arguments.callee);\n            }\n        });\n    };\n\n    clazz.prototype.setLeftVisibleResidue = function (val) {\n        var self = this;\n        self._canvas.setCurrentTranslateXY(self._canvas.width.baseVal.value * (1 - val / (self.sequence.length + self.padding + 2)) - self._canvas.width.baseVal.value, 0);\n    };\n\n    clazz.prototype.leftVisibleResidue = function () {\n        var self = this;\n        var val = Math.floor((self.sequence.length + self.padding + 2) * (1 - (self._canvas.width.baseVal.value + self._canvas.currentTranslateCache.x) / self._canvas.width.baseVal.value)) - 1;\n        if (val < 0) {\n            val = 0;\n        }\n        return val;\n    };\n\n    clazz.prototype.rightVisibleResidue = function () {\n        var self = this;\n        var container_width = self._container_canvas.parentNode.cached_width;\n        if (!container_width) {\n            container_width = self._container_canvas.parentNode.getBoundingClientRect().width;\n        }\n        var val = Math.floor(self.leftVisibleResidue() + (self.sequence.length + self.padding + 2) * (container_width / self._canvas.width.baseVal.value));\n        if (val > self.sequence.length) {\n            val = self.sequence.length;\n        }\n        return val;\n    };\n\n    clazz.prototype.addAxisScale = function (identifier, scaler) {\n        if (!this._scalers) {\n            this._scalers = [];\n        }\n        this._scalers.push(scaler);\n        scaler.identifier = identifier;\n        return scaler;\n    };\n\n    clazz.prototype.refreshScale = function () {\n        var self = this;\n        var lays = Object.keys(this._layer_containers);\n        lays.forEach(function (lay) {\n            self._layer_containers[lay].forEach(function (el) {\n                if (el.move && el.aa) {\n                    var wanted = self.forceTrackAccs && el.acc ? el.acc : lay;\n                    var aa = self.scalePosition(el.aa, wanted);\n                    var aa_width = self.scalePosition(el.aa + el.aa_width, wanted);\n                    if (aa < 0) {\n                        aa *= -1;\n                    }\n                    if (aa_width < 0) {\n                        aa_width *= -1;\n                    }\n                    el.move(aa - 1, aa_width - aa);\n                }\n            });\n        });\n    };\n\n    clazz.prototype.scalePosition = function (aa, layer, inverse) {\n        var layer_obj = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layer);\n        var new_aa = (inverse ? (this._scalers || []).concat([]).reverse() : this._scalers || []).reduce(function (val, fn) {\n            return fn(val, layer_obj || { 'name': layer }, inverse);\n        }, aa);\n        return new_aa;\n    };\n\n    clazz.prototype.getAA = function (aa, layer, acc) {\n        return this.getAminoAcidsByPosition([aa], layer, acc).shift();\n    };\n\n    clazz.prototype.getAminoAcidsByPosition = function (aas, layer, acc) {\n        var self = this;\n        var new_aas = aas.map(function (aa) {\n            return Math.abs(self.scalePosition(aa, layer ? layer : acc));\n        });\n        var results = _SequenceRenderer__WEBPACK_IMPORTED_MODULE_1__[\"default\"].prototype.getAminoAcidsByPosition.call(this, new_aas);\n\n        for (var i = 0; i < new_aas.length; i++) {\n            if (results[i]) {\n                results[i].original_index = aas[i];\n                results[i].accession = layer ? layer : acc;\n            }\n        }\n        return results;\n    };\n\n    clazz.prototype.getAminoAcidsByPeptide = function (peptide, layer, acc) {\n        var self = this;\n        var positions = [];\n        var self_seq;\n        var identifier = acc ? acc : layer;\n        if (self.sequences) {\n            self_seq = self.sequences[self.sequences.map(function (seq) {\n                return (seq.agi || seq.acc || \"\").toLowerCase();\n            }).indexOf(identifier.toLowerCase())].toString();\n        } else {\n            self_seq = self.sequence;\n        }\n        var start = self_seq.indexOf(peptide);\n        for (var i = 0; i < peptide.length; i++) {\n            positions.push(start + i);\n        }\n        var results = self.getAminoAcidsByPosition(positions, layer, acc);\n        if (results.length) {\n            results.addToLayer = function (layername, fraction, options) {\n                return results[0].addBoxOverlay(layername, results.length, fraction, options);\n            };\n        } else {\n            results.addToLayer = function () {};\n        }\n        return results;\n    };\n\n    clazz.prototype.win = function () {\n        if (this._container && this._container.ownerDocument && this._container.ownerDocument.defaultView) {\n            var return_val = this._container.ownerDocument.defaultView;\n            if (typeof return_val === 'object' && return_val.constructor !== Window) {\n                return_val = return_val[Object.keys(return_val)[0]];\n            }\n            return return_val;\n        }\n        return null;\n    };\n\n    clazz.prototype.setSequence = function (sequence) {\n        var new_sequence = this._cleanSequence(sequence);\n        if (new_sequence == this.sequence && new_sequence !== null) {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(this, 'sequenceChange');\n            return;\n        }\n\n        if (!new_sequence) {\n            return;\n        }\n\n        this.sequence = new_sequence;\n\n        delete this.sequences;\n\n        var seq_chars = this.sequence.split('');\n        var line_length = seq_chars.length;\n\n        if (line_length === 0) {\n            return;\n        }\n\n        var renderer = this;\n\n        var build_sequence_els = function build_sequence_els() {\n            var seq_els = [];\n            renderer.sequence.split('').forEach(function (aa, i) {\n                var el = {};\n                el._index = i;\n                el._renderer = renderer;\n                renderer._extendElement(el);\n                el.amino_acid = aa;\n                seq_els.push(el);\n            });\n            renderer._sequence_els = seq_els;\n        };\n\n        build_sequence_els();\n\n        var RS = this._RS;\n\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this, 'svgready');\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'svgready', function (cnv) {\n            var canv = renderer._canvas;\n            canv.RS = RS;\n            canv.setAttribute('background', '#000000');\n            canv.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n\n            var defs = canv.makeEl('defs');\n            renderer._container_canvas.appendChild(defs);\n\n            defs.appendChild(canv.make_gradient('track_shine', '0%', '100%', ['#111111', '#aaaaaa', '#111111'], [0.5, 0.5, 0.5]));\n            defs.appendChild(canv.make_gradient('simple_gradient', '0%', '100%', ['#aaaaaa', '#888888'], [1, 1]));\n            defs.appendChild(canv.make_gradient('left_fade', '100%', '0%', ['#ffffff', '#ffffff'], [1, 0]));\n            defs.appendChild(canv.make_gradient('right_fade', '100%', '0%', ['#ffffff', '#ffffff'], [0, 1]));\n            defs.appendChild(canv.make_gradient('red_3d', '0%', '100%', ['#CF0000', '#540000'], [1, 1]));\n\n            renderer.gradients = [];\n            renderer.add3dGradient = function (color) {\n                defs.appendChild(canv.make_gradient('grad_' + color, '0%', '100%', [color, '#ffffff', color], [1, 1, 1]));\n                renderer.gradients.push(color);\n            };\n\n            var shadow = canv.makeEl('filter', {\n                'id': 'drop_shadow',\n                'filterUnits': 'objectBoundingBox',\n                'x': '-50%',\n                'y': '-50%',\n                'width': '200%',\n                'height': '200%'\n            });\n\n            shadow.appendChild(canv.makeEl('feGaussianBlur', { 'in': 'SourceGraphic', 'stdDeviation': '4', 'result': 'blur_out' }));\n            shadow.appendChild(canv.makeEl('feOffset', { 'in': 'blur_out', 'result': 'the_shadow', 'dx': '3', 'dy': '1' }));\n            shadow.appendChild(canv.makeEl('feBlend', { 'in': 'SourceGraphic', 'in2': 'the_shadow', 'mode': 'normal' }));\n\n            defs.appendChild(shadow);\n            var link_icon = canv.makeEl('svg', {\n                'width': '100%',\n                'height': '100%',\n                'id': 'new_link_icon',\n                'viewBox': '0 0 100 100',\n                'preserveAspectRatio': 'xMinYMin meet'\n            });\n\n            defs.appendChild(link_icon);\n\n            link_icon.appendChild(canv.makeEl('rect', {\n                'x': '12.5',\n                'y': '37.5',\n                'stroke-width': '3',\n                'width': '50',\n                'height': '50',\n                'stroke': '#ffffff',\n                'fill': 'none'\n            }));\n            link_icon.appendChild(canv.makeEl('path', {\n                'd': 'M 50.0,16.7 L 83.3,16.7 L 83.3,50.0 L 79.2,56.2 L 68.8,39.6 L 43.8,66.7 L 33.3,56.2 L 60.4,31.2 L 43.8,20.8 L 50.0,16.7 z',\n                'stroke-width': '3',\n                'stroke': '#999999',\n                'fill': '#ffffff'\n            }));\n\n            var plus_icon = canv.makeEl('svg', {\n                'width': '100%',\n                'height': '100%',\n                'id': 'plus_icon',\n                'viewBox': '0 0 100 100',\n                'preserveAspectRatio': 'xMinYMin meet'\n            });\n            plus_icon.appendChild(canv.plus(0, 0, 100 / canv.RS));\n\n            defs.appendChild(plus_icon);\n\n            var minus_icon = canv.makeEl('svg', {\n                'width': '100%',\n                'height': '100%',\n                'id': 'minus_icon',\n                'viewBox': '0 0 100 100',\n                'preserveAspectRatio': 'xMinYMin meet'\n            });\n            minus_icon.appendChild(canv.minus(0, 0, 100 / canv.RS));\n\n            defs.appendChild(minus_icon);\n            var axis_pattern_id = 'axis_pattern_' + new Date().getTime();\n            var pattern = canv.makeEl('pattern', {\n                'patternUnits': 'userSpaceOnUse',\n                'x': '0',\n                'y': '0',\n                'width': 10 * canv.RS,\n                'height': 2 * canv.RS,\n                'id': axis_pattern_id\n            });\n            renderer.axis_pattern_id = axis_pattern_id;\n\n            var line = canv.makeEl('rect', {\n                'x': '0',\n                'y': '0',\n                'width': '10%',\n                'height': '1000%',\n                'fill': '#000',\n                'stroke': '0'\n            });\n            pattern.appendChild(line);\n\n            defs.appendChild(pattern);\n\n            var self = this;\n            renderer._axis_height = 10;\n            var aas = drawAminoAcids.call(self, canv);\n            renderer.hideAxis = function () {\n                drawAxis = function drawAxis(canv) {\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canv, 'zoomChange', function () {\n                        self._axis_height = 10 / self.zoom;\n                    });\n                    return {};\n                };\n                self._axis_height = 10 / self.zoom;\n                this.redrawAxis();\n            };\n            renderer.showAxis = function () {\n                drawAxis = mainDrawAxis;\n                this.redrawAxis();\n            };\n\n            var axis = drawAxis.call(self, canv, line_length);\n            renderer.redrawAxis = function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(axis, 'removed');\n                aas.forEach(function (aa) {\n                    if (aa.parentNode) {\n                        aa.parentNode.removeChild(aa);\n                    }\n                });\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(aas, 'removed');\n                axis = drawAxis.call(self, canv, renderer.sequence.length);\n                aas = drawAminoAcids.call(self, canv);\n\n                build_sequence_els();\n                renderer.refresh();\n            };\n            if (!renderer.hide_axis) {\n                this.showAxis();\n            } else {\n                this.hideAxis();\n            }\n\n            renderer._layer_containers = {};\n            renderer.enablePrintResizing();\n            renderer.enableScaling();\n            renderer.enableSelection();\n\n            // When we have a layer registered with the global MASCP object\n            // add a track within this renderer.\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"], 'layerRegistered', function (layer, rend) {\n                if (!rend || rend === renderer) {\n                    renderer.addTrack(layer);\n                }\n            });\n\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(renderer, 'sequenceChange');\n        });\n        var canvas = createCanvasObject.call(this);\n        if (!this._canvas) {\n            if (typeof svgweb != 'undefined') {\n                svgweb.appendChild(canvas, this._container);\n            } else {\n                this._container.appendChild(canvas);\n            }\n        }\n\n        var rend = this;\n        this.EnableHighlights();\n\n        var seq_change_func = function seq_change_func(other_func) {\n            if (!rend._canvas) {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(rend, 'sequenceChange', function () {\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(rend, 'sequenceChange', arguments.callee);\n                    other_func.apply();\n                });\n            } else {\n                other_func.apply();\n            }\n        };\n\n        seq_change_func.ready = function (other_func) {\n            this.call(this, other_func);\n        };\n\n        return seq_change_func;\n    };\n})(CondensedSequenceRenderer);\n\n(function () {\n    var svgns = 'http://www.w3.org/2000/svg';\n    var add_import = function add_import(ownerdoc) {\n        if (!ownerdoc.ELEMENT_NODE) {\n            ownerdoc.ELEMENT_NODE = 1;\n            ownerdoc.ATTRIBUTE_NODE = 2;\n            ownerdoc.TEXT_NODE = 3;\n            ownerdoc.CDATA_SECTION_NODE = 4;\n            ownerdoc.ENTITY_REFERENCE_NODE = 5;\n            ownerdoc.ENTITY_NODE = 6;\n            ownerdoc.PROCESSING_INSTRUCTION_NODE = 7;\n            ownerdoc.COMMENT_NODE = 8;\n            ownerdoc.DOCUMENT_NODE = 9;\n            ownerdoc.DOCUMENT_TYPE_NODE = 10;\n            ownerdoc.DOCUMENT_FRAGMENT_NODE = 11;\n            ownerdoc.NOTATION_NODE = 12;\n        }\n\n        ownerdoc._importNode = function (node, allChildren) {\n            switch (node.nodeType) {\n                case ownerdoc.ELEMENT_NODE:\n                    var newNode = ownerdoc.createElementNS(svgns, node.nodeName);\n                    /* does the node have any attributes to add? */\n                    if (node.attributes && node.attributes.length > 0) for (var i = 0, il = node.attributes.length; i < il;) {\n                        if (!/^on/.test(node.attributes[i].nodeName)) {\n                            newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));\n                        }\n                    }\n                    /* are we going after children too, and does the node have any? */\n                    if (allChildren && node.childNodes && node.childNodes.length > 0) for (var i = 0, il = node.childNodes.length; i < il;) {\n                        if (node.childNodes[i].nodeName !== 'USE' && node.childNodes[i].nodeName.toUpperCase() !== 'SCRIPT') {\n                            newNode.appendChild(ownerdoc._importNode(node.childNodes[i++], allChildren));\n                        }\n                    }\n                    return newNode;\n                    break;\n                case ownerdoc.TEXT_NODE:\n                case ownerdoc.CDATA_SECTION_NODE:\n                case ownerdoc.COMMENT_NODE:\n                    return ownerdoc.createTextNode(node.nodeValue);\n                    break;\n            }\n        };\n    };\n\n    var fix_child_links = function fix_child_links(node, prefix) {\n        if (node.childNodes && node.childNodes.length > 0) {\n            for (var i = 0, il = node.childNodes.length; i < il;) {\n                if (node.childNodes[i].nodeName.toUpperCase() === 'USE') {\n                    var linkval = node.childNodes[i].getAttribute('xlink:href');\n                    node.childNodes[i].setAttribute('xlink:href', linkval.replace(/^#/, '#' + prefix + '_'));\n                }\n                i++;\n            }\n        }\n    };\n\n    CondensedSequenceRenderer.prototype.importIcons = function (namespace, doc, alt_url) {\n        var new_owner = this._container_canvas.ownerDocument;\n        if (this._container_canvas.getElementById('defs_' + namespace)) {\n            return;\n        }\n        this._container_canvas.appendChild(new_owner.createElement('defs'));\n        this._container_canvas.lastChild.setAttribute('id', 'defs_' + namespace);\n        var defs_block = this._container_canvas.lastChild;\n\n        if (!new_owner._importNode) {\n            add_import(new_owner);\n        }\n        var ua = window.navigator.userAgent;\n        if (ua.indexOf('Edge/') >= 0) {\n            this.icons_failed = this.icons_failed || {};\n            this.icons_failed[namespace] = alt_url;\n            return;\n        }\n        var new_nodes = new_owner._importNode(doc, true);\n        if (typeof XPathResult !== 'undefined') {\n            var iterator = new_owner.evaluate('//svg:defs/*', new_nodes, function (ns) {\n                return svgns;\n            }, XPathResult.ANY_TYPE, null);\n            var el = iterator.iterateNext();\n            var to_append = [];\n            while (el) {\n                to_append.push(el);\n                el = iterator.iterateNext();\n            }\n            if (to_append.length === 0) {\n                this.icons_failed = this.icons_failed || {};\n                this.icons_failed[namespace] = alt_url;\n            }\n            to_append.forEach(function (el) {\n                el.setAttribute('id', namespace + '_' + el.getAttribute('id'));\n                fix_child_links(el, namespace);\n                defs_block.appendChild(el);\n            });\n        } else {\n            var els = new_nodes.querySelectorAll('defs > *');\n            for (var i = 0; i < els.length; i++) {\n                els[i].setAttribute('id', namespace + '_' + els[i].getAttribute('id'));\n                fix_child_links(el, namespace);\n                defs_block.appendChild(els[i]);\n            }\n        }\n    };\n})();\n\nCondensedSequenceRenderer.prototype.addValuesToLayer = function (layerName, values, options) {\n    var RS = this._RS;\n\n    var canvas = this._canvas;\n\n    if (!canvas) {\n        var orig_func = arguments.callee;\n        var self = this;\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n            orig_func.call(self, layerName, values);\n        });\n        log(\"Delaying rendering, waiting for sequence change\");\n        return;\n    }\n\n    var max_value;\n    var min_value;\n    var height_scale = 1;\n\n    options = options || {};\n\n    if (options.height) {\n        height_scale = options.height / this._layer_containers[layerName].track_height;\n    }\n\n    var offset_scale = 0;\n    if (options.offset) {\n        offset_scale = options.offset / this._layer_containers[layerName].track_height;\n    }\n    var recalculate_plot = function recalculate_plot(scale) {\n        var plot_path = ' m' + -0.5 * RS + ' 0';\n        var last_value = null;\n        values.forEach(function (value) {\n            if (typeof last_value == 'undefined') {} else {\n                plot_path += ' l' + RS + ' ' + -1 * RS * scale * height_scale * (value - last_value);\n            }\n            last_value = value;\n            if (isNaN(max_value) || value > max_value) {\n                max_value = value;\n            }\n            if (isNaN(min_value) || value < min_value) {\n                min_value = value;\n            }\n        });\n        return plot_path;\n    };\n    var plot = this._canvas.path('M0 0 M0 0 m0 ' + (max_value || 0) * RS + ' ' + recalculate_plot(1));\n    var abs_min_val = min_value;\n    var abs_max_val = max_value;\n    plot.setAttribute('stroke', options.color || '#ff0000');\n    plot.setAttribute('stroke-width', (options.thickness || 0.35) * RS);\n    plot.setAttribute('fill', 'none');\n    plot.setAttribute('visibility', 'hidden');\n    plot.setAttribute('pointer-events', 'none');\n    this._layer_containers[layerName].push(plot);\n    plot.setAttribute('transform', 'translate(1,10) scale(1,1)');\n    if (!options.hide_axis) {\n        var axis = this._canvas.path('M0 0 m0 ' + RS * ((max_value || 0) - (min_value || 0)) + ' l' + this._sequence_els.length * RS + ' 0');\n        axis.setAttribute('stroke-width', 0.2 * RS);\n        axis.setAttribute('visibility', 'hidden');\n        axis.setAttribute('transform', 'translate(1,0)');\n        axis.setAttribute('pointer-events', 'none');\n        axis.setHeight = function (height) {\n            if (abs_min_val < 0 && abs_max_val > 0) {\n                axis.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * height * height_scale + ' l' + renderer._sequence_els.length * RS + ' 0');\n            } else {\n                axis.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * (1 - abs_min_val) * height * height_scale + ' l' + renderer._sequence_els.length * RS + ' 0');\n            }\n            axis.setAttribute('stroke-width', 0.2 * RS / renderer.zoom);\n        };\n        this._layer_containers[layerName].push(axis);\n    }\n    var renderer = this;\n\n    if (options.label) {\n        var text = this._canvas.text(0, 0, options.label.max || options.label.min);\n        text.setAttribute('transform', 'translate(0,0)');\n        text.setAttribute('font-size', 4 * RS + 'pt');\n        text.setHeight = function (height) {\n            text.setAttribute('y', height * offset_scale);\n            text.setAttribute('font-size', 4 * RS / renderer.zoom + 'pt');\n        };\n        this._layer_containers[layerName].push(text);\n    }\n\n    plot.setHeight = function (height) {\n        var path_vals = recalculate_plot(0.5 * height / RS);\n        plot.setAttribute('d', 'M0 0 M0 0 m0 ' + height * offset_scale + ' m0 ' + 0.5 * height * height_scale + ' ' + path_vals);\n        plot.setAttribute('stroke-width', (options.thickness || 0.35) * RS / renderer.zoom);\n    };\n    return plot;\n};\n\n(function () {\n    var addElementToLayer = function addElementToLayer(layerName, opts) {\n        var canvas = this._renderer._canvas;\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var tracer = null;\n        var tracer_marker = null;\n        var renderer = this._renderer;\n\n        if (!opts) {\n            opts = {};\n        }\n\n        var scale = 1;\n        if (opts.height) {\n            opts.height = parseFloat(opts.height);\n            if (typeof opts.height !== 'undefined' && opts.bare_element) {\n                opts.height *= 2;\n            }\n            scale = opts.height / this._renderer._layer_containers[layerName].track_height;\n            if (typeof opts.offset !== 'undefined') {\n                opts.offset = -1.25 - 1.25 + opts.offset / opts.height * 5; // ( -250/4 + (x / height) * 250 ) where 250 is growing marker height\n            }\n        }\n\n        var tracer_marker = canvas.growingMarker(0, 0, opts.content || layerName.charAt(0).toUpperCase(), opts);\n        tracer_marker.setAttribute('transform', 'translate(' + (this._index + 0.5) * this._renderer._RS + ',0.01) scale(' + scale + ')');\n        tracer_marker.setAttribute('height', '250');\n        tracer_marker.firstChild.setAttribute('transform', 'translate(-100,0) rotate(0,100,0.001)');\n        if (opts.break_viewbox) {\n            tracer_marker.container.removeAttribute('viewBox');\n            tracer_marker.container.setAttribute('width', '100%');\n            tracer_marker.container.setAttribute('height', '100%');\n        }\n        if (!opts.no_tracer) {\n\n            var bobble = canvas.circle(this._index + 0.5, 10, 0.25);\n            bobble.setAttribute('visibility', 'hidden');\n            bobble.style.opacity = '0.4';\n            tracer = canvas.rect(this._index + 0.5, 10, 0.05, 0);\n            tracer._index = this._index;\n            tracer.style.strokeWidth = '0';\n            tracer.style.fill = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color;\n            tracer.setAttribute('visibility', 'hidden');\n            canvas.insertBefore(tracer, canvas.firstChild.nextSibling);\n            var renderer = this._renderer;\n\n            if (!this._renderer._layer_containers[layerName].tracers) {\n                this._renderer._layer_containers[layerName].tracers = canvas.set();\n            }\n            if (!canvas.tracers) {\n                canvas.tracers = canvas.set();\n                canvas._visibleTracers = function () {\n                    return renderer._visibleTracers();\n                };\n            }\n            tracer.setHeight = function (height) {\n                if (tracer.getAttribute('visibility') == 'hidden') {\n                    return;\n                }\n\n                var transform_attr = tracer_marker.getAttribute('transform');\n                var matches = /translate\\(.*[,\\s](.*)\\) scale\\((.*)\\)/.exec(transform_attr);\n                if (matches[1] && matches[2]) {\n                    var scale = parseFloat(matches[2]);\n                    var y = parseFloat(matches[1]);\n                    var new_height = y + scale * ((tracer_marker.offset || 0) * 50 + 125) - parseInt(this.getAttribute('y'));\n                    this.setAttribute('height', new_height < 0 ? 0 : new_height);\n                } else {\n                    this.setAttribute('height', height);\n                }\n            };\n            this._renderer._layer_containers[layerName].tracers.push(tracer);\n            this._renderer._layer_containers[layerName].tracers.push(bobble);\n            tracer.setAttribute('pointer-events', 'none');\n            bobble.setAttribute('pointer-events', 'none');\n            canvas.tracers.push(tracer);\n        }\n        if (typeof opts.offset == 'undefined' || opts.offset === null) {\n            // tracer_marker.offset = 2.5*this._renderer._layer_containers[layerName].track_height;\n        } else {\n            tracer_marker.offset = opts.offset;\n        }\n\n        // tracer_marker.setAttribute('transform','scale(0.5)');\n        // tracer_marker.zoom_level = 'text';\n        tracer_marker.setAttribute('visibility', 'hidden');\n\n        this._renderer._layer_containers[layerName].push(tracer_marker);\n        var result = [tracer, tracer_marker, bobble];\n        tracer_marker.setAttribute('class', layerName);\n        result.move = function (x, width) {\n            var transform_attr = tracer_marker.getAttribute('transform');\n            var matches = /translate\\(.*[,\\s](.*)\\) scale\\((.*)\\)/.exec(transform_attr);\n            if (matches[1] && matches[2]) {\n                tracer_marker.setAttribute('transform', 'translate(' + (x + 0.5) * renderer._RS + ',' + matches[1] + ') scale(' + matches[2] + ')');\n            }\n            if (tracer) {\n                tracer.move(x + 0.5, 0.05);\n                bobble.move(x + 0.5);\n            }\n        };\n        if (tracer) {\n            tracer_marker.tracer = tracer;\n            tracer_marker.bobble = bobble;\n        }\n        this._renderer._layer_containers[layerName].push(result);\n        return result;\n    };\n\n    var addBoxOverlayToElement = function addBoxOverlayToElement(layerName, width, fraction, opts) {\n\n        var canvas = this._renderer._canvas;\n        var renderer = this._renderer;\n        if (!opts) {\n            opts = {};\n        }\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var rect = canvas.rect(-0.25 + this._index, 60, width || 1, opts.height || 4, opts);\n        var rect_x = parseFloat(rect.getAttribute('x'));\n        var rect_max_x = rect_x + parseFloat(rect.getAttribute('width'));\n        var container = this._renderer._layer_containers[layerName];\n        if (typeof opts.merge !== 'undefined' && opts.merge) {\n            for (var i = 0; i < container.length; i++) {\n                if (container[i].value != fraction) {\n                    continue;\n                }\n                var el_x = parseFloat(container[i].getAttribute('x'));\n                var el_max_x = el_x + parseFloat(container[i].getAttribute('width'));\n                if (el_x <= rect_x && rect_x <= el_max_x || rect_x <= el_x && el_x <= rect_max_x) {\n                    container[i].setAttribute('x', \"\" + Math.min(el_x, rect_x));\n                    container[i].setAttribute('width', \"\" + (Math.max(el_max_x, rect_max_x) - Math.min(el_x, rect_x)));\n                    rect.parentNode.removeChild(rect);\n                    return container[i];\n                }\n            }\n        }\n        this._renderer._layer_containers[layerName].push(rect);\n        rect.setAttribute('class', layerName);\n        rect.setAttribute('visibility', 'hidden');\n        rect.setAttribute('stroke-width', '0px');\n        if (typeof fraction !== 'undefined') {\n            rect.setAttribute('opacity', fraction);\n            rect.value = fraction;\n        }\n        rect.setAttribute('fill', opts.fill || _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color);\n        rect.position_start = this._index;\n        rect.position_end = this._index + width;\n        if (typeof opts.offset !== \"undefined\" || opts.height_scale) {\n            var offset_val = opts.offset;\n            rect.setHeight = function (hght) {\n                var height_val = opts.height ? opts.height * renderer._RS / renderer.zoom : hght * (opts.height_scale || 1);\n                if (opts.align == 'bottom') {\n                    this.setAttribute('y', offset_val * renderer._RS / renderer.zoom - hght * (opts.height_scale || 1));\n                    this.setAttribute('height', height_val);\n                } else {\n                    this.setAttribute('y', offset_val * renderer._RS / renderer.zoom);\n                    this.setAttribute('height', height_val);\n                }\n            };\n        }\n        return rect;\n    };\n\n    var addTextToElement = function addTextToElement(layerName, width, opts) {\n        var canvas = this._renderer._canvas;\n        var renderer = this._renderer;\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n        if (!opts) {\n            opts = {};\n        }\n        if (opts.height) {\n            opts.height = opts.height * this._renderer._RS;\n        }\n        var height = opts.height || this._renderer._layer_containers[layerName].trackHeight || 4;\n        var position = this._index;\n        if (width > 1) {\n            position = position + Math.floor(0.5 * width);\n        }\n        var text_scale = 4 / 3;\n        var text = canvas.text(position, 0, opts.txt || opts.content || \"Text\");\n        text.setAttribute('font-size', text_scale * height);\n        text.cached_width = text.getComputedTextLength() / height;\n        text.setAttribute('font-weight', 'bolder');\n        text.setAttribute('fill', opts.fill || '#ffffff');\n        text.setAttribute('stroke', '#000000');\n        if (!(\"stroke_width\" in opts)) {\n            opts.stroke_width = 5;\n        }\n        text.setAttribute('stroke-width', opts.stroke_width + '');\n        text.setAttribute('style', 'font-family: ' + canvas.font_order);\n        text.firstChild.setAttribute('dy', '1.3ex');\n        text.setAttribute('text-anchor', 'middle');\n        if (opts.align) {\n            if (opts.align == \"left\") {\n                text.setAttribute('text-anchor', 'start');\n            }\n            if (opts.align == 'right') {\n                text.setAttribute('text-anchor', 'end');\n            }\n        }\n        if (width > 1) {\n            var clip = canvas.clipPath();\n            var mask = canvas.rect(-0.5 * width, opts.offset || 0, width, height);\n            clip.push(mask);\n            mask.removeAttribute('y');\n            var mask_id = 'id' + new Date().getTime() + \"_\" + clip.parentNode.childNodes.length;\n            clip.setAttribute('id', mask_id);\n            text.setAttribute('clip-path', 'url(#' + mask_id + ')');\n        }\n        if (typeof opts.offset !== 'undefined') {\n            text.setAttribute('transform', 'translate(' + text.getAttribute('x') + ',' + text.getAttribute('y') + ')');\n            text.offset = opts.offset;\n            text.setHeight = function (height) {\n                var top_offset = this.offset;\n                this.setAttribute('x', 0);\n                this.setAttribute('y', top_offset * renderer._RS / renderer.zoom);\n                if (mask) mask.setAttribute('y', this.getAttribute('y'));\n                this.setAttribute('stroke-width', 5 / renderer.zoom);\n                if (opts.height) {\n                    this.setAttribute('font-size', text_scale * opts.height / renderer.zoom);\n                    if (mask) mask.setAttribute('height', opts.height / renderer.zoom);\n                } else {\n                    this.setAttribute('font-size', text_scale * height);\n                    if (mask) mask.setAttribute('height', height);\n                }\n                // If we have a mask, we want to move the text to the left.\n                if (mask) {\n                    if (this.cached_width * height > width * 50) {\n                        this.setAttribute('x', -0.5 * width * 50);\n                        this.setAttribute('text-anchor', 'start');\n                    } else {\n                        this.setAttribute('x', '0');\n                        this.setAttribute('text-anchor', 'middle');\n                    }\n                } else {\n                    this.setAttribute('x', '0');\n                    this.setAttribute('text-anchor', 'middle');\n                }\n            };\n        } else {\n            text.setHeight = function (height) {\n                text.setAttribute('stroke-width', 5 / renderer.zoom);\n                if (opts.height) {\n                    text.setAttribute('font-size', text_scale * opts.height / renderer.zoom);\n                    if (mask) mask.setAttribute('height', opts.height / renderer.zoom);\n                } else {\n                    text.setAttribute('font-size', text_scale * height);\n                    if (mask) mask.setAttribute('height', height);\n                }\n            };\n        }\n        if (width > 1) {\n            text.move = function (new_x, new_width) {\n                if (mask) mask.setAttribute('x', -1 * new_width * renderer._RS * 0.5);\n                if (mask) mask.setAttribute('width', new_width * renderer._RS);\n                text.setAttribute('x', (new_x + parseInt(0.5 * new_width)) * renderer._RS);\n            };\n        }\n        this._renderer._layer_containers[layerName].push(text);\n        return text;\n    };\n\n    var addShapeToElement = function addShapeToElement(layerName, width, opts) {\n        var canvas = this._renderer._canvas;\n        var renderer = this._renderer;\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var methods = {\n            \"pentagon\": canvas.pentagon,\n            \"hexagon\": canvas.hexagon,\n            \"rectangle\": canvas.rect,\n            \"ellipse\": canvas.ellipticalRect,\n            \"roundrect\": function roundrect(x, y, width, height) {\n                return canvas.roundRect(x, y, width, height, 0.25 * height);\n            }\n        };\n        if (!opts.rotate) {\n            opts.rotate = 0;\n        }\n        var shape = null;\n        var shape_name = (opts.shape.split('-') || '')[0];\n        if (shape_name in methods) {\n            var is_rotated = opts.shape.split('-')[1];\n            if (is_rotated == 'left' && !opts.rotate) {\n                opts.rotate = 90;\n            }\n            if (is_rotated == 'right' && !opts.rotate) {\n                opts.rotate = 270;\n            }\n            if (is_rotated == 'flip' && !opts.rotate) {\n                opts.rotate = 180;\n            }\n            shape = methods[shape_name].call(canvas, this._index, 60, width || 1, opts.height || 4, opts.rotate);\n        } else {\n            return;\n        }\n        if (typeof opts.offset !== 'undefined') {\n            var x_pos = shape.getAttribute('x');\n            var y_pos = shape.getAttribute('y');\n            shape.setAttribute('transform', 'translate(' + x_pos + ',' + y_pos + ')');\n            shape.setAttribute('x', '0');\n            var offset_val = opts.offset || 0;\n            var orig_height = opts.height || 4;\n            shape.setAttribute('y', offset_val * this._renderer._RS);\n            shape.setHeight = function (height) {\n                if (!this._orig_stroke_width) {\n                    this._orig_stroke_width = parseInt(this.getAttribute('stroke-width'));\n                }\n                shape.setAttribute('y', offset_val * renderer._RS / renderer.zoom);\n                shape.setAttribute('height', orig_height * renderer._RS / renderer.zoom);\n                shape.setAttribute('stroke-width', this._orig_stroke_width / renderer.zoom);\n                if (opts.shape == 'ellipse') {\n                    shape.setAttribute('ry', 0.5 * (orig_height * renderer._RS) / renderer.zoom);\n                }\n                if (opts.shape == 'roundrect') {\n                    shape.setAttribute('rx', 0.25 * (orig_height * renderer._RS) / renderer.zoom);\n                    shape.setAttribute('ry', 0.25 * (orig_height * renderer._RS) / renderer.zoom);\n                }\n            };\n            shape.move = function (new_x, new_width) {\n                var transform_attr = this.getAttribute('transform');\n                var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n                if (matches[1]) {\n                    this.setAttribute('transform', 'translate(' + new_x * renderer._RS + ',' + matches[1] + ')');\n                }\n                this.setAttribute('width', new_width * renderer._RS);\n            };\n        }\n\n        if (typeof opts.offset !== 'undefined' && (opts.shape == \"hexagon\" || opts.shape == \"pentagon\")) {\n            var offset_val = opts.offset || 0;\n            var orig_height = opts.height || 4;\n            var adjustment_g = canvas.group();\n            adjustment_g.setAttribute('transform', shape.getAttribute('transform'));\n            adjustment_g.push(shape);\n            shape.setAttribute('transform', 'translate(0,0)');\n            adjustment_g.setHeight = function (height) {\n                if (!shape._orig_stroke_width) {\n                    shape._orig_stroke_width = parseInt(shape.getAttribute('stroke-width')) || 0;\n                }\n                shape.setHeight(orig_height * renderer._RS / renderer.zoom);\n                shape.setAttribute('stroke-width', this._orig_stroke_width / renderer.zoom);\n                shape.setAttribute('transform', 'translate(0,0)');\n            };\n            this._renderer._layer_containers[layerName].push(adjustment_g);\n            adjustment_g.setAttribute('visibility', 'hidden');\n            adjustment_g.setAttribute('class', layerName);\n            adjustment_g.position_start = this._index;\n            adjustment_g.position_end = this._index + width;\n        } else {\n            this._renderer._layer_containers[layerName].push(shape);\n            shape.setAttribute('visibility', 'hidden');\n            shape.setAttribute('class', layerName);\n            shape.position_start = this._index;\n            shape.position_end = this._index + width;\n        }\n        shape.setAttribute('fill', opts.fill || _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color);\n        if (opts.stroke) {\n            shape.setAttribute('stroke', opts.stroke);\n        }\n        if (opts.stroke_width) {\n            shape.setAttribute('stroke-width', renderer._RS * opts.stroke_width);\n        } else {\n            shape.style.strokeWidth = '0';\n        }\n        return shape;\n    };\n\n    var addElementToLayerWithLink = function addElementToLayerWithLink(layerName, url, width) {\n        var canvas = this._renderer._canvas;\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, url, width);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        var rect = canvas.rect(-0.25 + this._index, 60, width || 1, 4);\n        this._renderer._layer_containers[layerName].push(rect);\n        rect.style.strokeWidth = '0px';\n        rect.setAttribute('fill', _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layerName].color);\n        rect.setAttribute('visibility', 'hidden');\n        rect.setAttribute('class', layerName);\n        return rect;\n    };\n\n    var addCalloutToLayer = function addCalloutToLayer(layerName, element, opts) {\n        var canvas = this._renderer._canvas;\n\n        var renderer = this._renderer;\n\n        if (typeof element == 'string') {\n            var a_el = document.createElement('div');\n            renderer.fillTemplate(element, opts, function (err, el) {\n                a_el.innerHTML = el;\n            });\n            element = a_el;\n        }\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n        var callout = canvas.callout(this._index + 0.5, 0.01, element, { 'width': 10 * opts.width || 100, 'height': opts.height * 10 || 100, 'align': opts.align, 'font-size': opts['font-size'] });\n        callout.setHeight(opts.height * this._renderer._RS);\n        this._renderer._canvas_callout_padding = Math.max(10 * opts.height || 100, this._renderer._canvas_callout_padding || 0);\n        this._renderer._layer_containers[layerName].push(callout);\n        callout.clear = function () {\n            var cont = renderer._layer_containers[layerName];\n            if (cont.indexOf(callout) > 0) {\n                cont.splice(cont.indexOf(callout), 1);\n            }\n            callout.parentNode.removeChild(callout);\n        };\n        return callout;\n    };\n\n    var all_annotations = {};\n    var default_annotation_height = 8;\n\n    var addAnnotationToLayer = function addAnnotationToLayer(layerName, width, opts) {\n        var canvas = this._renderer._canvas;\n\n        var renderer = this._renderer;\n\n        if (!canvas) {\n            var orig_func = arguments.callee;\n            var self = this;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this._renderer, 'sequencechange', function () {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this._renderer, 'sequencechange', arguments.callee);\n                orig_func.call(self, layerName, width, opts);\n            });\n            log(\"Delaying rendering, waiting for sequence change\");\n            return;\n        }\n\n        if (typeof opts == 'undefined') {\n            opts = { 'angle': 0,\n                'border': 'rgb(255,0,0)',\n                'content': 'A'\n            };\n        } else {\n            if (typeof opts.angle == 'undefined') {\n                opts.angle = 0;\n            }\n        }\n\n        if (!all_annotations[layerName]) {\n            all_annotations[layerName] = {};\n        }\n\n        var blob_id = this._index + '_' + opts.angle;\n\n        if (opts.angle == 'auto') {\n            if (!all_annotations[layerName][blob_id]) {\n                all_annotations[layerName][blob_id] = {};\n            }\n        }\n\n        var blob_exists = typeof all_annotations[layerName][blob_id] !== 'undefined';\n\n        var height = opts.height || this._renderer._layer_containers[layerName].track_height;\n\n        var offset = height / 2; //this._renderer._RS * height / 2;\n        var blob = all_annotations[layerName][blob_id] ? all_annotations[layerName][blob_id] : canvas.growingMarker(0, 0, opts.content, opts);\n\n        if (opts.angle == 'auto') {\n            if (!blob.contents) {\n                blob.contents = [opts.content];\n            } else {\n                if (blob.contents.indexOf(opts.content) < 0) {\n                    blob.contents.push(opts.content);\n                }\n            }\n\n            opts.angle = blob.contents.length == 1 ? 0 : -45 + 90 * (blob.contents.indexOf(opts.content) / (blob.contents.length - 1));\n            blob_id = this._index + '_' + opts.content;\n            blob_exists = typeof all_annotations[layerName][blob_id] !== 'undefined';\n            blob = all_annotations[layerName][blob_id] ? all_annotations[layerName][blob_id] : canvas.growingMarker(0, offset, opts.content, opts);\n        }\n\n        blob.setAttribute('transform', 'translate(' + (this._index + 0.5) * this._renderer._RS + ',0.01) scale(1)');\n        blob.setAttribute('height', '250');\n        blob.firstChild.setAttribute('transform', 'translate(-100,0) rotate(' + opts.angle + ',100,0.001)');\n\n        blob.angle = opts.angle;\n        all_annotations[layerName][blob_id] = blob;\n        if (!blob_exists) {\n            blob._value = 0;\n            this._renderer._layer_containers[layerName].push(blob);\n            if (typeof opts.offset == 'undefined' || opts.offset === null) {\n                blob.offset = 0 * height;\n            } else {\n                blob.offset = opts.offset;\n                if (opts.height) {\n                    blob.offset = opts.offset / opts.height;\n                }\n            }\n\n            blob.height = height;\n            if (!opts.height) {\n                this._renderer._layer_containers[layerName].fixed_track_height = height;\n            } else {\n                var old_set_height = blob.setHeight;\n                blob.setHeight = function (hght) {\n                    if (arguments.callee.caller != renderer.redrawAnnotations) {\n                        return;\n                    }\n                    return old_set_height.call(this, hght);\n                };\n            }\n        }\n\n        blob._value += width;\n        if (!blob_exists) {\n            var bobble = canvas.circle(this._index + 0.5, 10 + height, 0.25);\n            bobble.setAttribute('visibility', 'hidden');\n            bobble.style.opacity = '0.4';\n\n            var tracer = canvas.rect(this._index + 0.5, 10 + height, 0.05, 0);\n            tracer._index = this._index;\n            tracer.style.strokeWidth = '0px';\n            tracer.style.fill = '#777777';\n            tracer.setAttribute('visibility', 'hidden');\n            var theight = this._renderer._layer_containers[layerName].track_height;\n            tracer.setHeight = function (hght) {\n                if (this.getAttribute('visibility') == 'hidden') {\n                    return;\n                }\n                var transform_attr = blob.getAttribute('transform');\n                var matches = /translate\\(.*[,\\s](.*)\\) scale\\((.*)\\)/.exec(transform_attr);\n                if (matches[1] && matches[2]) {\n                    var scale = parseFloat(matches[2]);\n                    var y = parseFloat(matches[1]);\n                    var new_height = y + scale * ((blob.offset || 0) * 50) - parseInt(this.getAttribute('y'));\n                    this.setAttribute('height', new_height);\n                } else {\n                    this.setAttribute('height', height);\n                }\n            };\n            canvas.insertBefore(tracer, canvas.firstChild.nextSibling);\n\n            if (!this._renderer._layer_containers[layerName].tracers) {\n                this._renderer._layer_containers[layerName].tracers = canvas.set();\n            }\n            if (!canvas.tracers) {\n                canvas.tracers = canvas.set();\n                canvas._visibleTracers = function () {\n                    return renderer._visibleTracers();\n                };\n            }\n\n            this._renderer._layer_containers[layerName].tracers.push(tracer);\n            this._renderer._layer_containers[layerName].tracers.push(bobble);\n            canvas.tracers.push(tracer);\n        }\n\n        this._renderer.redrawAnnotations(layerName, height);\n        return blob;\n    };\n\n    var scaledAddShapeOverlay = function scaledAddShapeOverlay(layername, width, opts) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, this.accession ? this.accession : layername)) - 1;\n        var res = addShapeToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), opts);\n        res.aa = this.original_index;\n        res.aa_width = width;\n        res.acc = this.acc;\n        return res;\n    };\n\n    var scaledAddBoxOverlay = function scaledAddBoxOverlay(layername, width, fraction, opts) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, this.accession ? this.accession : layername)) - 1;\n\n        var res = addBoxOverlayToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), fraction, opts);\n\n        if (!(opts || {}).merge) {\n            res.aa_width = width;\n            res.aa = this.original_index;\n        } else {\n            res.aa_width = parseInt(res.getAttribute('width')) / this._renderer._RS;\n            if (res.aa_width == width) {\n                res.aa = this.original_index;\n            }\n        }\n        res.acc = this.accession;\n        return res;\n    };\n\n    var scaledAddTextOverlay = function scaledAddTextOverlay(layername, width, opts) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, this.accession ? this.accession : layername)) - 1;\n        var res = addTextToElement.call(start < end ? this : this._renderer._sequence_els[end], layername, Math.abs(end - start), opts);\n        res.aa = this.original_index;\n        res.aa_width = width;\n        res.acc = this.accession;\n        return res;\n    };\n\n    var scaledAddToLayerWithLink = function scaledAddToLayerWithLink(layername, url, width) {\n        var start = this._index;\n        var end = Math.abs(this._renderer.scalePosition(this.original_index + width, this.accession ? this.accession : layername)) - 1;\n        var res = addElementToLayerWithLink.call(start < end ? this : this._renderer._sequence_els[end], layername, url, Math.abs(end - start));\n        res.aa = this.original_index;\n        res.acc = this.accession;\n        return res;\n    };\n\n    var scaledAddToLayer = function scaledAddToLayer(layername, opts) {\n        var res = addElementToLayer.call(this, layername, opts);\n        res.aa = this.original_index;\n        res.acc = this.accession;\n        res.aa_width = 1;\n        return res;\n    };\n\n    CondensedSequenceRenderer.prototype.enableScaling = function () {\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'readerRegistered', function (reader) {\n            var old_result = reader.gotResult;\n            var renderer = this;\n            reader.gotResult = function () {\n                var wanted_id = reader.acc || reader.agi || \"\";\n\n                var old_get_aas = CondensedSequenceRenderer.prototype.getAminoAcidsByPosition;\n                var old_get_pep = CondensedSequenceRenderer.prototype.getAminoAcidsByPeptide;\n                var old_sequence = renderer.sequence;\n                if (renderer.sequences) {\n                    renderer.sequence = (renderer.sequences[renderer.sequences.map(function (seq) {\n                        return (seq.agi || seq.acc || \"\").toLowerCase();\n                    }).indexOf(wanted_id.toLowerCase())] || \"\").toString();\n                } else {\n                    old_sequence = null;\n                }\n                renderer.getAminoAcidsByPosition = function (aas, lay, accession) {\n                    if (renderer.forceTrackAccs) {\n                        return old_get_aas.call(this, aas, wanted_id, wanted_id);\n                    } else {\n                        return old_get_aas.call(this, aas, lay || wanted_id, accession || wanted_id);\n                    }\n                };\n                renderer.getAminoAcidsByPeptide = function (peptide, lay, accession) {\n                    if (renderer.forceTrackAccs) {\n                        return old_get_pep.call(this, peptide, wanted_id, wanted_id);\n                    } else {\n                        return old_get_pep.call(this, peptide, lay || wanted_id, accession || wanted_id);\n                    }\n                };\n                old_result.call(reader);\n\n                if (old_sequence) {\n                    renderer.sequence = old_sequence;\n                }\n\n                renderer.getAminoAcidsByPosition = old_get_aas;\n                renderer.getAminoAcidsByPeptide = old_get_pep;\n            };\n        });\n    };\n\n    CondensedSequenceRenderer.prototype._extendElement = function (el) {\n        el.addToLayer = scaledAddToLayer;\n        el.addBoxOverlay = scaledAddBoxOverlay;\n        el.addShapeOverlay = scaledAddShapeOverlay;\n        el.addTextOverlay = scaledAddTextOverlay;\n        el.addToLayerWithLink = scaledAddToLayerWithLink;\n        el.addAnnotation = addAnnotationToLayer;\n        el.callout = addCalloutToLayer;\n        el['_renderer'] = this;\n    };\n\n    CondensedSequenceRenderer.prototype.remove = function (lay, el) {\n        if (!el) {\n            return false;\n        }\n        if (this._layer_containers[lay] && this._layer_containers[lay].indexOf(el) >= 0) {\n            this._layer_containers[lay].splice(this._layer_containers[lay].indexOf(el), 1);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(el, 'removed');\n            if (el.parentNode) {\n                el.parentNode.removeChild(el);\n            }\n            if (el.tracer && el.tracer.parentNode) {\n                el.tracer.parentNode.removeChild(el.tracer);\n            }\n            if (el.bobble && el.bobble.parentNode) {\n                el.bobble.parentNode.removeChild(el.bobble);\n            }\n            return true;\n        }\n        return false;\n    };\n\n    var zoomFunctions = [];\n\n    CondensedSequenceRenderer.prototype.addUnderlayRenderer = function (underlayFunc) {\n        if (zoomFunctions.length == 0) {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'zoomChange', function () {\n                for (var i = zoomFunctions.length - 1; i >= 0; i--) {\n                    zoomFunctions[i].call(this, this.zoom, this._canvas);\n                }\n            });\n        }\n        zoomFunctions.push(underlayFunc);\n    };\n\n    /*\n              var group = [];\n              for (i = 0; i < sites.length; i++) {\n                  var current = sites[i], next = null;\n                  if ( ! current ) {\n                    continue;\n                  }\n                  if (sites[i+1]) {\n                    next = sites[i+1];\n                  }\n                  if ( ! do_grouping || (! next || ((next - current) > 10) || renderer.sequence.substring(current,next-1).match(/[ST]/)) ) {\n                    if (group.length < 3) {\n                      group.push(current);\n                      group.forEach(function(site){\n                        renderer.getAA(site).addToLayer(layer,{\"content\" : (offset < 1) ? renderer.galnac() : renderer.light_galnac(), \"offset\" : offset, \"height\" : 9,  \"bare_element\" : true });\n                      });\n                    } else {\n                      group.push(current);\n                      group.forEach(function(site){\n                        renderer.getAA(site).addToLayer(layer,{\"content\" : (offset < 1) ? renderer.galnac() : renderer.light_galnac(), \"offset\" : offset, \"height\" : 9,  \"bare_element\" : true })[1].zoom_level = 'text';\n                      });\n                      var rect = renderer.getAA(group[0]).addShapeOverlay(layer,current-group[0]+1,{ \"shape\" : \"roundrect\", \"offset\" : offset - 4.875, \"height\" : 9.75 });\n                      var a_galnac = (offset < 1) ? renderer.galnac() : renderer.light_galnac();\n                      rect.setAttribute('fill',a_galnac.getAttribute('fill'));\n                      rect.setAttribute('stroke',a_galnac.getAttribute('stroke'));\n                      rect.setAttribute('stroke-width',70);\n                      a_galnac.parentNode.removeChild(a_galnac);\n                      rect.removeAttribute('style');\n                      rect.setAttribute('rx','120');\n                      rect.setAttribute('ry','120');\n                      rect.zoom_level = 'summary';\n                    }\n                    group = [];\n                  } else {\n                    group.push(current);\n                  }\n              }\n    */\n\n    var mark_groups = function mark_groups(renderer, objects) {\n        var group = [];\n        var new_objects = [];\n        for (i = 0; i < objects.length; i++) {\n            var current = objects[i],\n                next = null;\n            if (!current) {\n                continue;\n            }\n            if (objects[i + 1]) {\n                next = objects[i + 1];\n            }\n            if (!next || parseInt(next.aa) - parseInt(current.aa) > 10 || renderer.sequence.substring(current, next - 1).match(/[ST]/)) {\n                if (group.length < 3) {\n                    group.push(current);\n                    group.forEach(function (site) {\n                        // We don't want to do anything to these guys, render as usual.\n                        //            renderer.getAA(site).addToLayer(layer,{\"content\" : (offset < 1) ? renderer.galnac() : renderer.light_galnac(), \"offset\" : offset, \"height\" : 9,  \"bare_element\" : true });\n                    });\n                } else {\n                    group.push(current);\n                    group.forEach(function (site) {\n                        site.options.zoom_level = 'text';\n                    });\n                    var coalesce_options = group[0].coalesce || objects[0].coalesce;\n                    new_objects.push({\n                        'aa': group[0].aa,\n                        'type': 'shape',\n                        'width': parseInt(current.aa) - parseInt(group[0].aa) + 1,\n                        'options': { 'zoom_level': 'summary',\n                            'shape': 'roundrect',\n                            'fill': coalesce_options.fill,\n                            'stroke': coalesce_options.stroke,\n                            'stroke_width': coalesce_options.stroke_width,\n                            'height': group[0].options.height,\n                            'offset': group[0].options.offset\n                        }\n                    });\n                    // var rect = renderer.getAA(group[0]).addShapeOverlay(layer,current-group[0]+1,{ \"shape\" : \"roundrect\", \"offset\" : offset - 4.875, \"height\" : 9.75 });\n                    // var a_galnac = (offset < 1) ? renderer.galnac() : renderer.light_galnac();\n                    // rect.setAttribute('fill',a_galnac.getAttribute('fill'));\n                    // rect.setAttribute('stroke',a_galnac.getAttribute('stroke'));\n                    // rect.setAttribute('stroke-width',70);\n                    // a_galnac.parentNode.removeChild(a_galnac);\n                    // rect.removeAttribute('style');\n                    // rect.setAttribute('rx','120');\n                    // rect.setAttribute('ry','120');\n                    // rect.zoom_level = 'summary';\n                }\n                group = [];\n            } else {\n                group.push(current);\n            }\n        }\n        new_objects.forEach(function (obj) {\n            objects.push(obj);\n        });\n    };\n\n    CondensedSequenceRenderer.prototype.fix_icons = function (icon_ref) {\n        if (!this.icons_failed) {\n            return icon_ref;\n        }\n        if (typeof icon_ref === 'string') {\n            var vals = icon_ref.split('_');\n            if (vals[0] && this.icons_failed[vals[0].replace('#', '')]) {\n                vals[0] = this.icons_failed[vals[0].replace('#', '')] + '#';\n                var start = vals.shift();\n                console.log(icon_ref, start + vals.join('_'));\n                return start + vals.join('_');\n            }\n        }\n        return icon_ref;\n    };\n\n    CondensedSequenceRenderer.prototype.renderObjects = function (track, objects) {\n        var renderer = this;\n        if (objects.length > 0 && objects[0].coalesce) {\n            mark_groups(renderer, objects);\n        }\n        var results = [];\n        objects.forEach(function (object) {\n            var potential_height = object.options ? (object.options.height || renderer._layer_containers[track].track_height) + (object.options.offset + object.options.height || 0) : 0;\n            if (object.options && potential_height > renderer._layer_containers[track].track_height) {\n                var new_height = renderer._layer_containers[track].track_height + object.options.offset + (object.options.height || renderer._layer_containers[track].track_height);\n                if ((renderer._layer_containers[track].fixed_track_height || 0) < new_height) {\n                    renderer._layer_containers[track].fixed_track_height = new_height;\n                }\n            }\n\n            var click_reveal;\n            var rendered;\n            if (object.aa && !renderer.getAA(parseInt(object.aa), track)) {\n                return;\n            }\n            if (typeof object.aa !== 'undefined' && isNaN(object.aa)) {\n                return;\n            }\n            if (object.type == \"text\") {\n                if (object.aa) {\n                    if (object.width) {\n                        rendered = renderer.getAA(parseInt(object.aa), track).addTextOverlay(track, object.width, object.options);\n                    } else {\n                        rendered = renderer.getAA(parseInt(object.aa), track).addTextOverlay(track, 1, object.options);\n                    }\n                } else if (object.peptide) {\n                    rendered = renderer.getAminoAcidsByPeptide(object.peptide, track).addTextOverlay(track, 1, object.options);\n                }\n            }\n            if (object.type === \"box\") {\n                if (object.aa) {\n                    rendered = renderer.getAA(parseInt(object.aa), track).addBoxOverlay(track, parseInt(object.width), 1, object.options);\n                } else if (object.peptide) {\n                    rendered = renderer.getAminoAcidsByPeptide(object.peptide, track).addToLayer(track, 1, object.options);\n                }\n            }\n            if (object.type == \"shape\") {\n                if (object.aa) {\n                    rendered = renderer.getAA(parseInt(object.aa), track).addShapeOverlay(track, parseInt(object.width), object.options);\n                } else if (object.peptide) {\n                    rendered = renderer.getAminoAcidsByPeptide(object.peptide, track)[0].addShapeOverlay(track, object.peptide.length, object.options);\n                }\n            }\n            if (object.type == 'line') {\n                rendered = renderer.addValuesToLayer(track, object.values, object.options);\n            }\n            if (object.type == \"marker\") {\n                var content = (object.options || {}).content;\n                var wanted_height = object.options.height;\n\n                if (Array.isArray && Array.isArray(content)) {\n                    var cloned_options_array = {};\n                    for (var key in object.options) {\n                        if (object.options.hasOwnProperty(key)) {\n                            cloned_options_array[key] = object.options[key];\n                        }\n                    }\n                    if (object.options.content && Array.isArray(content_data)) {\n                        cloned_options_array.content = object.options.content.map(renderer.fix_icons.bind(renderer));\n                    }\n\n                    click_reveal = renderer.getAA(parseInt(object.aa), track).addToLayer(track, cloned_options_array);\n                    click_reveal = click_reveal[1];\n                    click_reveal.style.display = 'none';\n                    object.options.content = object.options.alt_content;\n                    content = object.options.content;\n                }\n                if (typeof content == 'object') {\n                    var content_el;\n                    if (content.type == \"circle\") {\n                        content_el = renderer._canvas.circle(-0.5, -0.5, 1, 1);\n                    }\n                    if (content.type == 'text_circle') {\n                        content_el = renderer._canvas.text_circle(0.5, 0.5, 1, content.text, content.options || {});\n                        object.options.break_viewbox = true;\n                    }\n                    if (content.type == \"left_triangle\") {\n                        content_el = renderer._canvas.poly('-100,0 0,-100 0,100');\n                    }\n                    if (content.type == \"right_triangle\") {\n                        content_el = renderer._canvas.poly('0,100 100,0 0,-100');\n                    }\n\n                    [\"fill\", \"stroke\", \"stroke-width\", \"fill-opacity\", \"stroke-opacity\", \"opacity\"].forEach(function (prop) {\n                        if (content[prop]) {\n                            content_el.setAttribute(prop, content[prop]);\n                        }\n                    });\n                    object.options.content = content_el;\n                }\n                var cloned_options = {};\n                for (var key in object.options) {\n                    if (object.options.hasOwnProperty(key)) {\n                        cloned_options[key] = object.options[key];\n                    }\n                }\n                var content_data = (object.options || {}).content;\n                if (content_data && typeof content_data === 'string') {\n                    cloned_options.content = renderer.fix_icons(content_data);\n                }\n                if (content_data && Array.isArray(content_data)) {\n                    cloned_options.content = content_data.map(renderer.fix_icons.bind(renderer));\n                }\n                var added = renderer.getAA(parseInt(object.aa), track).addToLayer(track, cloned_options);\n                if (click_reveal) {\n\n                    click_reveal.toggleReveal = function (ev) {\n                        ev.stopPropagation();\n                        if (this.style.display === 'none') {\n                            this.parentNode.appendChild(this);\n                            this.style.display = 'block';\n                        } else {\n                            this.style.display = 'none';\n                        }\n                        renderer.refresh();\n                    };\n                    added[1].addEventListener('touchstart', click_reveal.toggleReveal.bind(click_reveal), true);\n                    added[1].addEventListener('click', click_reveal.toggleReveal.bind(click_reveal), false);\n                }\n                rendered = added[1];\n            }\n            if ((object.options || {}).zoom_level) {\n                rendered.zoom_level = object.options.zoom_level;\n            }\n            if (object.identifier) {\n                rendered.setAttribute('identifier', object.identifier);\n            }\n            if ((object.options || {}).events && rendered) {\n                object.options.events.forEach(function (ev) {\n                    (ev.type || \"\").split(\",\").forEach(function (evtype) {\n                        if (evtype == 'click' && rendered.style) {\n                            rendered.style.cursor = 'pointer';\n                        }\n                        rendered.addEventListener(evtype, function (e) {\n                            e.event_data = ev.data;\n                            e.layer = track;\n                            e.aa = object.aa;\n                        });\n                    });\n                });\n            }\n            results.push(rendered);\n        });\n        return results;\n    };\n\n    CondensedSequenceRenderer.prototype.addTextTrack = function (seq, container) {\n        var RS = this._RS;\n        var renderer = this;\n        var max_length = 300;\n        var canvas = renderer._canvas;\n        var seq_chars = seq.split('');\n\n        var amino_acids = canvas.set();\n        var amino_acids_shown = false;\n        var x = 0;\n\n        var has_textLength = true;\n        var no_op = function no_op() {};\n        try {\n            var test_el = document.createElementNS(svgns, 'text');\n            test_el.setAttribute('textLength', 10);\n            no_op(test_el.textLength);\n        } catch (e) {\n            has_textLength = false;\n        }\n\n        /* We used to test to see if there was a touch event\n           when doing the textLength method of amino acid\n           layout, but iOS seems to support this now.\n           \n           Test case for textLength can be found here\n           \n           http://jsfiddle.net/nkmLu/11/embedded/result/\n        */\n\n        /* We also need to test for support for adjusting textLength\n           while also adjusting the dx value. Internet Explorer 10\n           squeezes text when setting a dx value as well as a textLength.\n           I.e. the right-most position of the character is calculated to\n           be x + textLength, rather than x + dx + textLength.\n         */\n\n        var supports_dx = false;\n        if (typeof _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_dx !== 'undefined') {\n            supports_dx = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_dx;\n        } else {\n            (function (supports_textLength) {\n                if (!supports_textLength) {\n                    supports_dx = false;\n                    return;\n                }\n                var test_el = document.createElementNS(svgns, 'text');\n                test_el.setAttribute('textLength', 30);\n\n                if (!test_el.getExtentOfChar) {\n                    return;\n                }\n                test_el.setAttribute('x', '0');\n                test_el.setAttribute('y', '0');\n                test_el.textContent = 'ABC';\n                canvas.appendChild(test_el);\n                var extent = test_el.getExtentOfChar(2).x;\n                test_el.setAttribute('dx', '10');\n                if (Math.abs(test_el.getExtentOfChar(2).x - extent) < 9.5) {\n                    supports_dx = false;\n                } else {\n                    supports_dx = true;\n                }\n                _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].supports_dx = supports_dx;\n                test_el.parentNode.removeChild(test_el);\n            })(has_textLength);\n        }\n\n        var a_text;\n\n        if (has_textLength && 'lengthAdjust' in document.createElementNS(svgns, 'text') && 'textLength' in document.createElementNS(svgns, 'text')) {\n            if (seq.length <= max_length) {\n                a_text = canvas.text(0, 12, document.createTextNode(seq));\n                a_text.setAttribute('textLength', RS * seq.length);\n            } else {\n                a_text = canvas.text(0, 12, document.createTextNode(seq.substr(0, max_length)));\n                a_text.setAttribute('textLength', RS * max_length);\n            }\n            canvas.insertBefore(a_text, canvas.firstChild.nextSibling);\n\n            a_text.style.fontFamily = \"'Lucida Console', 'Courier New', Monaco, monospace\";\n            a_text.setAttribute('lengthAdjust', 'spacing');\n            a_text.setAttribute('text-anchor', 'start');\n            a_text.setAttribute('dx', 5);\n            a_text.setAttribute('dy', '1.5ex');\n            a_text.setAttribute('font-size', RS);\n            a_text.setAttribute('fill', '#000000');\n            amino_acids.push(a_text);\n            container.push(a_text);\n        } else {\n            for (var i = 0; i < seq_chars.length; i++) {\n                a_text = canvas.text(x, 12, seq_chars[i]);\n                a_text.firstChild.setAttribute('dy', '1.5ex');\n                amino_acids.push(a_text);\n                container.push(a_text);\n                a_text.style.fontFamily = \"'Lucida Console', Monaco, monospace\";\n                x += 1;\n            }\n            amino_acids.attr({ 'width': RS, 'text-anchor': 'start', 'height': RS, 'font-size': RS, 'fill': '#000000' });\n        }\n        var update_sequence = function update_sequence() {\n            if (seq.length <= max_length) {\n                return;\n            }\n            var container_width = renderer._container_canvas.parentNode.cached_width;\n            if (!container_width) {\n                container_width = renderer._container_canvas.parentNode.getBoundingClientRect().width;\n                var docwidth = document.documentElement.clientWidth;\n                if (docwidth > container_width) {\n                    container_width = docwidth;\n                }\n            }\n            let max_size = Math.ceil(10 * container_width * renderer.zoom / RS);\n            if (max_size > seq.length) {\n                max_size = seq.length;\n            }\n\n            a_text.setAttribute('textLength', RS * max_size);\n\n            var start = parseInt(renderer.leftVisibleResidue());\n            start -= 50;\n            if (start < 0) {\n                start = 0;\n            }\n            if (start + max_size >= seq.length) {\n                start = seq.length - max_size;\n                if (start < 0) {\n                    start = 0;\n                }\n            }\n            a_text.replaceChild(document.createTextNode(seq.substr(start, max_size)), a_text.firstChild);\n            a_text.setAttribute(supports_dx ? 'dx' : 'x', 5 + start * RS);\n        };\n        var panstart = function panstart() {\n            if (amino_acids_shown) {\n                amino_acids.attr({ 'display': 'none' });\n            }\n        };\n        var panend = function panend() {\n            if (amino_acids_shown) {\n                amino_acids.attr({ 'display': 'block' });\n                update_sequence();\n            }\n        };\n        var zoomchange = function zoomchange() {\n            if (canvas.zoom > 3.6) {\n                amino_acids.attr({ 'display': 'block' });\n                amino_acids_shown = true;\n                update_sequence();\n            } else if (canvas.zoom > 0.2) {\n                amino_acids.attr({ 'display': 'none' });\n                amino_acids_shown = false;\n            } else {\n                amino_acids.attr({ 'display': 'none' });\n                amino_acids_shown = false;\n            }\n        };\n        if (!container.panevents) {\n            canvas.addEventListener('panstart', panstart, false);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'panend', panend);\n            container.panevents = true;\n        }\n\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(canvas, 'zoomChange', zoomchange, false);\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(amino_acids[0], 'removed', function () {\n            canvas.removeEventListener('panstart', panstart);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'panend', panend);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(canvas, 'zoomChange', zoomchange);\n            delete container.panevents;\n        });\n        return amino_acids;\n    };\n\n    CondensedSequenceRenderer.prototype.renderTextTrack = function (lay, in_text) {\n        var layerName = lay;\n        if (typeof layerName !== 'string') {\n            layerName = lay.name;\n        }\n        var canvas = this._canvas;\n        if (!canvas || typeof layerName == 'undefined') {\n            return;\n        }\n        var renderer = this;\n        var container = this._layer_containers[layerName];\n        var result = this.addTextTrack(in_text, container);\n        return result;\n    };\n\n    CondensedSequenceRenderer.prototype.resetAnnotations = function () {\n        all_annotations = {};\n    };\n\n    CondensedSequenceRenderer.prototype.removeAnnotations = function (lay) {\n        var layerName = lay;\n        if (typeof layerName !== 'string') {\n            layerName = lay.name;\n        }\n        var canvas = this._canvas;\n        if (!canvas || typeof layerName == 'undefined') {\n            return;\n        }\n\n        for (var blob_idx in all_annotations[layerName]) {\n            if (all_annotations[layerName].hasOwnProperty(blob_idx)) {\n                var blob = all_annotations[layerName][blob_idx];\n                var container = this._layer_containers[layerName];\n                if (container.indexOf(blob) >= 0) {\n                    container.splice(container.indexOf(blob), 1);\n                }\n                if (canvas.tracers && container.tracers) {\n                    for (var i = 0; i < container.tracers.length; i++) {\n                        var tracer = container.tracers[i];\n                        tracer.parentNode.removeChild(tracer);\n                        if (canvas.tracers.indexOf(tracer) >= 0) {\n                            canvas.tracers.splice(canvas.tracers.indexOf(tracer), 1);\n                        }\n                    }\n                    container.tracers = canvas.set();\n                }\n                if (blob.parentNode) {\n                    blob.parentNode.removeChild(blob);\n                }\n                all_annotations[layerName][blob_idx] = null;\n            }\n        }\n        all_annotations[layerName] = null;\n        delete all_annotations[layerName];\n        delete this._layer_containers[layerName].fixed_track_height;\n    };\n\n    CondensedSequenceRenderer.prototype.redrawAnnotations = function (layerName) {\n        var canvas = this._canvas,\n            a_parent = null,\n            blob_idx = 0;\n        var susp_id = canvas.suspendRedraw(10000);\n\n        var max_value = 0;\n        // var height = this._layer_containers[layerName].fixed_track_height || this._layer_containers[layerName].track_height;\n        for (blob_idx in all_annotations[layerName]) {\n            if (all_annotations[layerName].hasOwnProperty(blob_idx)) {\n                if (all_annotations[layerName][blob_idx]._value > max_value) {\n                    max_value = all_annotations[layerName][blob_idx]._value;\n                }\n                a_parent = all_annotations[layerName][blob_idx].parentNode;\n                if (!a_parent) {\n                    continue;\n                }\n                a_parent.removeChild(all_annotations[layerName][blob_idx]);\n                all_annotations[layerName][blob_idx]._parent = a_parent;\n            }\n        }\n        for (blob_idx in all_annotations[layerName]) {\n            if (all_annotations[layerName].hasOwnProperty(blob_idx)) {\n                var a_blob = all_annotations[layerName][blob_idx];\n\n                var height = a_blob.height;\n                var track_height = this._layer_containers[layerName].fixed_track_height || this._layer_containers[layerName].track_height;\n\n                if (!a_blob.setHeight) {\n                    continue;\n                }\n                var size_val = (0.4 + 0.6 * a_blob._value / max_value) * (this._RS * height * 1);\n                a_blob.setHeight(size_val);\n            }\n        }\n\n        for (blob_idx in all_annotations[layerName]) {\n            if (all_annotations[layerName].hasOwnProperty(blob_idx)) {\n                a_parent = all_annotations[layerName][blob_idx]._parent;\n                if (!a_parent) {\n                    continue;\n                }\n                a_parent.appendChild(all_annotations[layerName][blob_idx]);\n            }\n        }\n        canvas.unsuspendRedraw(susp_id);\n    };\n\n    // Simple JavaScript Templating\n    // John Resig - http://ejohn.org/ - MIT Licensed\n    (function (mpr) {\n        var cache = {};\n        var needs_sandbox = false;\n\n        var template_func = function tmpl(str, data) {\n            // Figure out if we're getting a template, or if we need to\n            // load the template - and be sure to cache the result.\n            var fn = !/\\W/.test(str) ? cache[str] = cache[str] || tmpl(document.getElementById(str).innerHTML) :\n\n            // Generate a reusable function that will serve as a template\n            // generator (and which will be cached).\n            new Function(\"obj\", \"var p=[],print=function(){p.push.apply(p,arguments);};\" +\n\n            // Introduce the data as local variables using with(){}\n            \"with(obj){p.push('\" +\n\n            // Convert the template into pure JavaScript\n            str.replace(/[\\r\\t\\n]/g, \" \").split(/\\x3c\\%/g).join(\"\\t\").replace(/((^|%>)[^\\t]*)'/g, \"$1\\r\").replace(/\\t=(.*?)%>/g, \"',$1,'\").split(\"\\t\").join(\"');\").split(\"%>\").join(\"p.push('\").split(\"\\r\").join(\"\\\\'\") + \"');}return p.join('');\");\n\n            // Provide some basic currying to the user\n            return data ? fn(data) : fn;\n        };\n\n        try {\n            var foo = new Function(\"return;\");\n        } catch (exception) {\n            needs_sandbox = true;\n        }\n        if (needs_sandbox) {\n            mpr.fillTemplate = function tmpl(str, data, callback) {\n                _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SANDBOX.contentWindow.postMessage({ \"template\": document.getElementById(str).innerHTML, \"data\": data }, \"*\");\n                var return_func = function return_func(event) {\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(window, 'message', return_func);\n                    if (event.data.html) {\n                        callback.call(null, null, event.data.html);\n                    }\n                };\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(window, 'message', return_func);\n            };\n            return;\n        }\n\n        mpr.fillTemplate = function (str, data, callback) {\n            callback.call(null, null, template_func(str, data));\n        };\n    })(CondensedSequenceRenderer.prototype);\n})();\n\n/**\n * Mouseover event for a layer\n * @name    MASCP.Layer#mouseover\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Mouseout event for a layer\n * @name    MASCP.Layer#mouseout\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Mousemove event for a layer\n * @name    MASCP.Layer#mousemove\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Mousedown event for a layer\n * @name    MASCP.Layer#mousedown\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Mouseup event for a layer\n * @name    MASCP.Layer#mouseup\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Click event for a layer\n * @name    MASCP.Layer#click\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Long click event for a layer\n * @name    MASCP.Layer#longclick\n * @event\n * @param   {Object}    e\n */\n\nCondensedSequenceRenderer.prototype.EnableHighlights = function () {\n    var renderer = this;\n    var highlights = [];\n    var createNewHighlight = function createNewHighlight() {\n        var highlight = renderer._canvas.rect(0, 0, 0, '100%');\n        highlight.setAttribute('fill', '#ffdddd');\n        highlight.removeAttribute('stroke');\n        var pnode = highlight.parentNode;\n        pnode.insertBefore(highlight, pnode.firstChild.nextSibling);\n        highlights.push(highlight);\n    };\n    createNewHighlight();\n\n    renderer.moveHighlight = function () {\n        var vals = Array.prototype.slice.call(arguments);\n        var RS = this._RS;\n        var i = 0,\n            idx = 0;\n        for (i = 0; i < vals.length; i += 2) {\n            var from = vals[i];\n            var to = vals[i + 1];\n            var highlight = highlights[idx];\n            if (!highlight) {\n                createNewHighlight();\n                highlight = highlights[idx];\n            }\n            if (highlight.previousSibling.previousSibling && highlights.indexOf(highlight.previousSibling.previousSibling) < 0) {\n                highlight.parentNode.insertBefore(highlight, highlight.parentNode.firstChild.nextSibling);\n            }\n            highlight.setAttribute('x', (from - 1) * RS);\n            highlight.setAttribute('width', (to - (from - 1)) * RS);\n            highlight.setAttribute('visibility', 'visible');\n            idx += 1;\n        }\n        for (i = idx; i < highlights.length; i++) {\n            highlights[i].setAttribute('visibility', 'hidden');\n        }\n    };\n};\n\n(function () {\n\n    var bindClick = function bindClick(element, handler) {\n        if (\"ontouchstart\" in window) {\n            element.addEventListener('touchstart', function (ev) {\n                var startX = ev.touches[0].clientX;\n                var startY = ev.touches[0].clientY;\n                var reset = function reset() {\n                    document.body.removeEventListener('touchmove', move);\n                    element.removeEventListener('touchend', end);\n                };\n                var end = function end(ev) {\n                    reset();\n                    ev.stopPropagation();\n                    ev.preventDefault();\n                    if (handler) {\n                        handler.call(null, ev);\n                    }\n                };\n                var move = function move(ev) {\n                    if (Math.abs(ev.touches[0].clientX - startX) > 10 || Math.abs(ev.touches[0].clientY - startY) > 10) {\n                        reset();\n                    }\n                };\n                //FIXME - PASSIVE\n                document.body.addEventListener('touchmove', move, { passive: true });\n                element.addEventListener('touchend', end, false);\n            }, { passive: true });\n            //FIXME - PASSIVE\n        } else {\n            element.addEventListener('click', handler, false);\n        }\n    };\n\n    var mousePosition = function mousePosition(evt) {\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX - (document.body.scrollLeft + document.documentElement.scrollLeft);\n            posy = evt.pageY - (document.body.scrollTop + document.documentElement.scrollTop);\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n        if (self.targetElement) {\n            posx = evt.screenX;\n            posy = evt.screenY;\n        }\n        return [posx, posy];\n    };\n\n    var svgPosition = function svgPosition(ev, svgel) {\n        var positions = mousePosition(ev.changedTouches ? ev.changedTouches[0] : ev);\n        var p = {};\n        if (svgel.nodeName == 'svg') {\n            p = svgel.createSVGPoint();\n            var rootCTM = svgel.getScreenCTM();\n            p.x = positions[0];\n            p.y = positions[1];\n\n            self.matrix = rootCTM.inverse();\n            p = p.matrixTransform(self.matrix);\n        } else {\n            p.x = positions[0];\n            p.y = positions[1];\n        }\n        return p;\n    };\n\n    var notifySelectionToLayers = function notifySelectionToLayers(start, end, renderer) {\n        for (var layname in _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n            var lay = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layname);\n            if (start && end) {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(lay, 'selection', [renderer.scalePosition(start, layname, true), renderer.scalePosition(end, layname, true)]);\n            } else {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(lay, 'selection', [null, null]);\n            }\n        }\n    };\n\n    CondensedSequenceRenderer.prototype.enableSelection = function (callback) {\n        var self = this;\n\n        if (!self._canvas) {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(self, 'sequenceChange', function () {\n                self.enableSelection();\n            });\n            return;\n        }\n\n        var canvas = self._canvas;\n        var start;\n        var end;\n        var end_func;\n        var local_start;\n        var local_end;\n\n        var moving_func = function moving_func(evt) {\n            evt.preventDefault();\n\n            var p = svgPosition(evt, canvas);\n            end = p.x;\n\n            if (start > end) {\n                local_end = parseInt(start / 50);\n                local_start = parseInt(end / 50);\n            } else {\n                local_end = parseInt(end / 50);\n                local_start = parseInt(start / 50);\n            }\n            self.select(local_start + 1, local_end);\n        };\n\n        // Do not send the click event to the canvas\n        // this screws up with doing things on the selection\n        // Need alternative method to clear selection\n        //\n        bindClick(canvas, function (evt) {\n            if (!self.selecting) {\n                self.select();\n                notifySelectionToLayers(null, null, self);\n                local_start = null;\n                local_end = null;\n            }\n        });\n\n        canvas.addEventListener('mousedown', function (evt) {\n            if (!self.selecting) {\n                return;\n            }\n            var positions = mousePosition(evt);\n            var p = {};\n            if (canvas.nodeName == 'svg') {\n                p = canvas.createSVGPoint();\n                var rootCTM = this.getScreenCTM();\n                p.x = positions[0];\n                p.y = positions[1];\n\n                self.matrix = rootCTM.inverse();\n                p = p.matrixTransform(self.matrix);\n            } else {\n                p.x = positions[0];\n                p.y = positions[1];\n            }\n            start = p.x;\n            end = p.x;\n            canvas.addEventListener('mousemove', moving_func, false);\n            evt.preventDefault();\n        }, false);\n\n        canvas.addEventListener('mouseup', function (evt) {\n            if (self.selecting) {\n                notifySelectionToLayers(local_start + 1, local_end, self);\n                local_start = null;\n                local_end = null;\n            }\n            canvas.removeEventListener('mousemove', moving_func);\n            evt.preventDefault();\n        });\n\n        canvas.addEventListener('touchend', function () {\n            if (self.selecting) {\n                setTimeout(function () {\n                    notifySelectionToLayers(local_start + 1, local_end, self);\n                    local_start = null;\n                    local_end = null;\n                }, 500);\n            }\n            canvas.removeEventListener('touchmove', moving_func);\n        });\n\n        canvas.addEventListener('touchstart', function (evt) {\n            if (!self.selecting) {\n                return;\n            }\n            if (evt.changedTouches.length == 1) {\n                evt.preventDefault();\n                var positions = mousePosition(evt.changedTouches[0]);\n                var p = {};\n                if (canvas.nodeName == 'svg') {\n                    p = canvas.createSVGPoint();\n                    var rootCTM = this.getScreenCTM();\n                    p.x = positions[0];\n                    p.y = positions[1];\n\n                    self.matrix = rootCTM.inverse();\n                    p = p.matrixTransform(self.matrix);\n                } else {\n                    p.x = positions[0];\n                    p.y = positions[1];\n                }\n                start = p.x;\n                end = p.x;\n                canvas.addEventListener('touchmove', moving_func, { passive: true });\n            }\n        }, { passive: true });\n        //FIXME - PASSIVE\n    };\n})();\n\n/*\n * Get a canvas set of the visible tracers on this renderer\n */\nCondensedSequenceRenderer.prototype._visibleTracers = function () {\n    var tracers = null;\n    for (var i in _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n        if (this.isLayerActive(i) && this._layer_containers[i] && this._layer_containers[i].tracers) {\n            if (!tracers) {\n                tracers = this._layer_containers[i].tracers;\n            } else {\n                tracers.concat(this._layer_containers[i].tracers);\n            }\n        }\n    }\n    return tracers;\n};\n\nCondensedSequenceRenderer.prototype._resizeContainer = function () {\n    var RS = this._RS;\n    if (this._container && this._canvas) {\n\n        var width = (this.zoom || 1) * 2 * this.sequence.length;\n        var height = (this.zoom || 1) * 2 * (this._canvas._canvas_height / this._RS);\n        if (this._canvas_callout_padding) {\n            height += this._canvas_callout_padding;\n        }\n        this._canvas.setAttribute('width', width);\n        this._canvas.setAttribute('height', height);\n        this.navigation.setDimensions(width, height);\n\n        if (this.grow_container) {\n            this._container_canvas.setAttribute('height', height);\n            // this._container.style.height = height+'px';        \n        } else {\n            this._container_canvas.setAttribute('height', '100%');\n            this._container_canvas.setAttribute('width', '100%');\n            // this._container.style.height = 'auto';\n            this.navigation.setZoom(this.zoom);\n        }\n    }\n};\n\n(function (clazz) {\n\n    var vis_change_event = function vis_change_event(renderer, visibility) {\n        var self = this;\n        if (!renderer._layer_containers[self.name] || renderer._layer_containers[self.name].length <= 0) {\n            return;\n        }\n\n        if (!visibility) {\n            if (renderer._layer_containers[self.name].tracers) {\n                renderer._layer_containers[self.name].tracers.hide();\n            }\n        }\n    };\n\n    /**\n     * Add a layer to this renderer.\n     * @param {Object} layer    Layer object to add. The layer data is used to create a track that can be independently shown/hidden.\n     *                          The track itself is by default hidden.\n     */\n    clazz.prototype.addTrack = function (layer) {\n        var RS = this._RS;\n        var renderer = this;\n\n        if (!this._canvas) {\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(this, 'sequencechange', function () {\n                this.addTrack(layer);\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(this, 'sequencechange', arguments.callee);\n            });\n            console.log(\"No canvas, cannot add track, waiting for sequencechange event\");\n            return;\n        }\n\n        var layer_containers = this._layer_containers || [];\n\n        if (!layer_containers[layer.name] || layer_containers[layer.name] === null) {\n            layer_containers[layer.name] = this._canvas.set();\n            if (!layer_containers[layer.name].track_height) {\n                layer_containers[layer.name].track_height = renderer.trackHeight || 4;\n            }\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(layer, 'visibilityChange', vis_change_event);\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(layer, 'visibilityChange', vis_change_event);\n            var event_names = ['click', 'mouseover', 'mousedown', 'mousemove', 'mouseout', 'mouseup', 'mouseenter', 'mouseleave'];\n            var ev_function = function ev_function(ev, original_event, element) {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(layer, ev.type, [original_event, element.position_start, element.position_end]);\n            };\n            // for (var i = 0 ; i < event_names.length; i++) {\n            //     bean.add(layer_containers[layer.name]._event_proxy,event_names[i],ev_function);\n            // }\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(layer, 'removed');\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(layer, 'removed', function (rend) {\n                if (rend) {\n                    rend.removeTrack(this);\n                } else {\n                    renderer.removeTrack(this);\n                }\n            });\n        }\n\n        this._layer_containers = layer_containers;\n    };\n\n    clazz.prototype.removeTrack = function (layer) {\n        if (!this._layer_containers) {\n            return;\n        }\n        var layer_containers = this._layer_containers || [];\n        if (layer_containers[layer.name]) {\n            this.removeAnnotations(layer);\n            this._layer_containers[layer.name] = null;\n            layer.disabled = true;\n        }\n    };\n\n    var refresh_id = 0;\n    clazz.prototype.disablePrintResizing = function () {\n        delete this._media_func;\n    };\n\n    clazz.prototype.enablePrintResizing = function () {\n        if (!(this.win() || window).matchMedia) {\n            return;\n        }\n        if (this._media_func) {\n            return this._media_func;\n        }\n        this._media_func = function (matcher) {\n            var self = this;\n            if (!self._canvas) {\n                return;\n            }\n            if (self.grow_container) {\n                if (matcher.matches) {\n                    delete self._container_canvas.parentNode.cached_width;\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'panend');\n                }\n                return;\n            }\n            var match = matcher;\n            if (!match.matches) {\n                if (self.old_zoom) {\n                    var a_zoom = self.old_zoom;\n                    self.old_zoom = null;\n                    self.zoomCenter = null;\n                    self.withoutRefresh(function () {\n                        self.zoom = a_zoom;\n                    });\n                    self._canvas.setCurrentTranslateXY(self.old_translate, 0);\n                    self._container_canvas.setAttribute('viewBox', self.old_viewbox);\n                    // self._container.style.height = 'auto';\n                    self.old_zoom = null;\n                    self.old_translate = null;\n                    self.refresh();\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'zoomChange');\n                }\n                return;\n            }\n            try {\n                var container = self._container;\n                self.old_translate = self._canvas.currentTranslateCache.x;\n                self._canvas.setCurrentTranslateXY(0, 0);\n                var zoomFactor = 0.95 * container.clientWidth / self.sequence.length;\n                if (!self.old_zoom) {\n                    self.old_zoom = self.zoom;\n                    self.old_viewbox = self._container_canvas.getAttribute('viewBox');\n                }\n                self.zoomCenter = null;\n                self._container_canvas.removeAttribute('viewBox');\n                self.withoutRefresh(function () {\n                    self.zoom = zoomFactor;\n                });\n                self.refresh();\n            } catch (err) {\n                console.log(err);\n                console.log(err.stack);\n            }\n        };\n        var rend = this;\n        if (!rend._bound_media) {\n            (this.win() || window).matchMedia('print').addListener(function (matcher) {\n                if (rend._media_func) {\n                    rend._media_func(matcher);\n                }\n            });\n        }\n        rend._bound_media = true;\n    };\n\n    clazz.prototype.wireframe = function () {\n        var order = this.trackOrder || [];\n        var y_val = 0;\n        var track_heights = 0;\n        if (!this.wireframes) {\n            return;\n        }\n        while (this.wireframes.length > 0) {\n            this._canvas.removeChild(this.wireframes.shift());\n        }\n        for (var i = 0; i < order.length; i++) {\n\n            var name = order[i];\n            var container = this._layer_containers[name];\n            if (!this.isLayerActive(name)) {\n                continue;\n            }\n            if (container.fixed_track_height) {\n\n                var track_height = container.fixed_track_height;\n\n                y_val = this._axis_height + (track_heights - track_height * 0.3) / this.zoom;\n                var a_rect = this._canvas.rect(0, y_val, 10000, 0.5 * track_height);\n                a_rect.setAttribute('stroke', '#ff0000');\n                a_rect.setAttribute('fill', 'none');\n                this.wireframes.push(a_rect);\n                var a_rect = this._canvas.rect(0, y_val, 10000, track_height);\n                a_rect.setAttribute('stroke', '#ff0000');\n                a_rect.setAttribute('fill', 'none');\n                this.wireframes.push(a_rect);\n\n                track_heights += this.zoom * track_height + this.trackGap;\n            } else {\n                y_val = this._axis_height + track_heights / this.zoom;\n                var a_rect = this._canvas.rect(0, y_val, 10000, 0.5 * container.track_height / this.zoom);\n                a_rect.setAttribute('stroke', '#ff0000');\n                a_rect.setAttribute('fill', 'none');\n                this.wireframes.push(a_rect);\n                a_rect = this._canvas.rect(0, y_val, 10000, container.track_height / this.zoom);\n                a_rect.setAttribute('stroke', '#ff0000');\n                a_rect.setAttribute('fill', 'none');\n                this.wireframes.push(a_rect);\n                if (this.navigation) {\n                    track_heights += container.track_height;\n                }\n                track_heights += container.track_height + this.trackGap;\n            }\n        }\n    };\n\n    /**\n     * Cause a refresh of the renderer, re-arranging the tracks on the canvas, and resizing the canvas if necessary.\n     * @param {Boolean} animateds Cause this refresh to be an animated refresh\n     */\n    clazz.prototype.refresh = function (animated) {\n        if (!this._canvas) {\n            return;\n        }\n\n        var layer_containers = this._layer_containers || [];\n\n        var RS = this._RS;\n        var track_heights = 0;\n        var order = this.trackOrder || [];\n        var fixed_font_scale = this.fixedFontScale;\n\n        if (this.navigation) {\n            this.navigation.reset();\n        }\n        for (var i = 0; i < order.length; i++) {\n\n            var name = order[i];\n            var container = layer_containers[name];\n            if (!container) {\n                continue;\n            }\n            var y_val;\n            if (!this.isLayerActive(name)) {\n                var attrs = { 'y': -1 * this._axis_height * RS, 'height': RS * container.track_height / this.zoom, 'visibility': 'hidden' };\n                //            var attrs = { 'y' : (this._axis_height  + (track_heights - container.track_height )/ this.zoom)*RS, 'height' :  RS * container.track_height / this.zoom ,'visibility' : 'hidden' };\n                if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name).group) {\n                    var controller_track = this.navigation.getController(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name).group);\n                    if (controller_track && this.isLayerActive(controller_track)) {\n                        attrs.y = layer_containers[controller_track.name].currenty();\n                    }\n                }\n\n                if (container.fixed_track_height) {\n                    delete attrs.height;\n                }\n\n                if (animated) {\n                    container.animate(attrs);\n                } else {\n                    container.attr(attrs);\n                }\n                if (container.tracers) {}\n                continue;\n            } else {\n                // container.attr({ 'opacity' : '1' });\n            }\n\n            var tracer_top = track_heights;\n\n            if (container.fixed_track_height) {\n\n                var track_height = container.fixed_track_height;\n\n                y_val = this._axis_height + track_heights / this.zoom;\n\n                if (animated) {\n                    container.animate({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                } else {\n                    container.attr({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                }\n                if (this.navigation) {\n                    y_val -= 1 * container.track_height / this.zoom;\n                    this.navigation.renderTrack(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name), y_val * RS, RS * container.fixed_track_height / this.zoom, { 'font-scale': (fixed_font_scale || 1) * 3 * container.track_height / container.fixed_track_height });\n                }\n                track_heights += container.fixed_track_height + this.trackGap - container.track_height;\n            } else {\n                y_val = this._axis_height + track_heights / this.zoom;\n                if (animated) {\n                    container.animate({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                } else {\n                    container.attr({ 'visibility': 'visible', 'y': y_val * RS, 'height': RS * container.track_height / this.zoom });\n                }\n                if (this.navigation) {\n                    y_val -= 1 * container.track_height / this.zoom;\n                    this.navigation.renderTrack(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(name), y_val * RS, RS * 3 * container.track_height / this.zoom, fixed_font_scale ? { 'font-scale': fixed_font_scale } : null);\n                    track_heights += container.track_height;\n                }\n                track_heights += container.track_height + this.trackGap;\n            }\n            container.refresh_zoom();\n\n            if (container.tracers) {\n                var disp_style = this.isLayerActive(name) && this.zoom > 3.6 ? 'visible' : 'hidden';\n                var height = (1.5 + tracer_top / this.zoom) * RS;\n\n                if (animated) {\n                    container.tracers.animate({ 'visibility': disp_style, 'y': 0.65 * this._axis_height * RS, 'height': height });\n                } else {\n                    container.tracers.attr({ 'visibility': disp_style, 'y': 0.65 * this._axis_height * RS, 'height': height });\n                }\n            }\n        }\n        this.wireframe();\n\n        var viewBox = [-1, 0, 0, 0];\n        viewBox[0] = -2 * RS;\n        viewBox[2] = (this.sequence.split('').length + this.padding + 2) * RS;\n        viewBox[3] = (this._axis_height + track_heights / this.zoom + this.padding / this.zoom) * RS;\n        this._canvas.setAttribute('viewBox', viewBox.join(' '));\n        this._canvas._canvas_height = viewBox[3];\n\n        var outer_viewbox = [].concat(viewBox);\n\n        outer_viewbox[0] = 0;\n        outer_viewbox[2] = this.zoom * (2 * this.sequence.length) + this.padding;\n        outer_viewbox[3] = this.zoom * 2 * (this._axis_height + track_heights / this.zoom + this.padding / this.zoom);\n        if (!this.grow_container) {\n            this._container_canvas.setAttribute('viewBox', outer_viewbox.join(' '));\n        } else {\n            this._container_canvas.removeAttribute('viewBox');\n        }\n\n        this._resizeContainer();\n\n        viewBox[0] = 0;\n        if (this.navigation) {\n            this.navigation.nav_width_base = outer_viewbox[3] < 200 ? outer_viewbox[3] : 200;\n            this.navigation.move_closer();\n            if (this.navigation.visible()) {\n                this._canvas.style.GomapScrollLeftMargin = 100 * RS / this.zoom;\n            } else {\n                this._canvas.style.GomapScrollLeftMargin = 1000;\n            }\n            this.navigation.setViewBox(viewBox.join(' '));\n        }\n\n        if (this.navigation) {\n            this.navigation.refresh();\n        }\n    };\n\n    /*\n    \n    Modified from:\n    \n    http://stackoverflow.com/questions/5433806/convert-embedded-svg-to-png-in-place\n    \n    None of the Safari browsers work with this, giving DOM Exception 18\n    \n    http://stackoverflow.com/questions/8158312/rasterizing-an-in-document-svg-to-canvas\n    \n    I think this is the relevant bug.\n    \n    https://bugs.webkit.org/show_bug.cgi?id=119492\n    \n    */\n\n    var svgDataURL = function svgDataURL(svg) {\n        svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        svg.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');\n\n        var svgAsXML = new XMLSerializer().serializeToString(svg);\n        return \"data:image/svg+xml,\" + encodeURIComponent(svgAsXML);\n    };\n\n    clazz.prototype.pngURL = function (pngReady, out_width) {\n        //var svg = document.getElementById('foobar');//this._canvas;\n        var svg_data = this._canvas.cloneNode(true);\n        var sequences = svg_data.querySelectorAll('text[data-spaces]');\n        for (var i = 0; i < sequences.length; i++) {\n            sequences[i].parentNode.removeChild(sequences[i]);\n        }\n\n        // Set up the aspect ratio of the output element\n        var svg = document.createElementNS(svgns, 'svg');\n        svg.setAttribute('width', this._container_canvas.getBoundingClientRect().width);\n        svg.setAttribute('height', this._container_canvas.getBoundingClientRect().height);\n        svg.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n\n        var transform_group = document.createElementNS(svgns, 'g');\n        transform_group.setAttribute('transform', this._canvas.parentNode.getAttribute('transform'));\n        svg.appendChild(transform_group);\n        transform_group.appendChild(svg_data);\n\n        // We are missing the defs elements from the containing node\n\n        var all_defs = this._container_canvas.querySelectorAll('defs');\n        for (var i = 0; i < all_defs.length; i++) {\n            svg.appendChild(all_defs[i].cloneNode(true));\n        }\n        var can = document.createElement('canvas');\n        var total_width = 2 * parseInt(svg.getAttribute('width'));\n        var total_height = 2 * parseInt(svg.getAttribute('height'));\n        if (out_width) {\n            if (total_width > out_width) {\n                var ratio = total_width / out_width;\n                total_width = out_width;\n                total_height = parseInt(total_height / ratio);\n            }\n        }\n        can.width = total_width;\n        can.height = total_height;\n        var svgImg = new Image();\n        svgImg.width = 1;\n        svgImg.height = 1;\n        var ctx = can.getContext('2d');\n        svgImg.onload = function () {\n            ctx.drawImage(svgImg, 0, 0, can.width, can.height);\n            pngReady(can.toDataURL());\n        };\n        svgImg.onerror = function () {\n            console.log(\"Got an error\");\n        };\n        var dataurl = svgDataURL(svg);\n        svgImg.src = dataurl;\n    };\n})(CondensedSequenceRenderer);\n\n/**\n * Zoom level has changed for this renderer\n * @name    CondensedSequenceRenderer#zoomChange\n * @event\n * @param   {Object}    e\n */\n\nCondensedSequenceRenderer.Zoom = function (renderer) {\n\n    /**\n     *  @lends CondensedSequenceRenderer.prototype\n     *  @property   {Number}    zoom        The zoom level for a renderer. Minimum zoom level is zero, and defaults to the default zoom value\n     *  @property   {Array}     trackOrder  The order of tracks on the renderer, an array of layer/group names.\n     *  @property   {Number}    padding     Padding to apply to the right and top of plots (default 10).\n     *  @property   {Number}    trackGap    Vertical gap between tracks (default 10)\n     */\n    var timeout = null;\n    var start_zoom = null;\n    var zoom_level = null;\n    var center_residue = null;\n    var start_x = null;\n    var transformer;\n    var shifter;\n    var accessors = {\n        setZoom: function setZoom(zoomLevel) {\n            var container_width = renderer._container.cached_width;\n            if (!container_width) {\n                container_width = renderer._container.clientWidth;\n            }\n            if (!renderer.sequence) {\n                zoom_level = zoomLevel;\n                return;\n            }\n            var min_zoom_level = container_width / (2 * renderer.sequence.length);\n            if (!renderer.grow_container) {\n                min_zoom_level = 0.3 / 2 * min_zoom_level;\n            }\n\n            // var min_zoom_level = renderer.sequence ? (0.3 / 2) * container_width / renderer.sequence.length : 0.5;\n            if (zoomLevel < min_zoom_level) {\n                zoomLevel = min_zoom_level;\n            }\n            if (zoomLevel > 10) {\n                zoomLevel = 10;\n            }\n\n            var self = this;\n\n            if (zoomLevel == zoom_level) {\n                if (this.refresh.suspended && self._canvas && self._canvas.zoom !== parseFloat(zoom_level)) {\n                    self._canvas.zoom = parseFloat(zoom_level);\n                    self._canvas.setScale(1);\n\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'zoomChange');\n                }\n                return;\n            }\n\n            if (!self._canvas) {\n                zoom_level = zoomLevel;\n                return;\n            }\n\n            var no_touch_center = false;\n\n            if (self.zoomCenter == 'center') {\n                no_touch_center = true;\n                self.zoomCenter = { 'x': self._RS * 0.5 * (self.leftVisibleResidue() + self.rightVisibleResidue()) };\n            }\n\n            if (self.zoomCenter && !center_residue) {\n                start_x = self._canvas.currentTranslateCache.x || 0;\n                center_residue = self.zoomCenter ? self.zoomCenter.x : 0;\n            } else if (center_residue && !self.zoomCenter) {\n                // We should not be zooming if there is a center residue and no zoomCenter;\n                return;\n            }\n\n            if (timeout) {\n                clearTimeout(timeout);\n            } else {\n                start_zoom = parseFloat(zoom_level || 1);\n            }\n\n            zoom_level = parseFloat(zoomLevel);\n\n            var scale_value = Math.abs(parseFloat(zoomLevel) / start_zoom);\n\n            window.cancelAnimationFrame(transformer);\n            transformer = window.requestAnimationFrame(function () {\n                // Rendering bottleneck\n                self._canvas.setScale(scale_value);\n            });\n\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, '_anim_begin');\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('panstart', false, true);\n                self._canvas.dispatchEvent(evObj);\n            }\n            var old_x = self._canvas.currentTranslateCache.x;\n            if (center_residue) {\n                var delta = (start_zoom - zoom_level) / (scale_value * 25) * center_residue;\n                delta += start_x / scale_value;\n                cancelAnimationFrame(shifter);\n                shifter = window.requestAnimationFrame(function () {\n\n                    // Rendering bottleneck\n                    self._canvas.setCurrentTranslateXY(delta, (start_zoom - zoom_level) / scale_value * self._axis_height * 2);\n                });\n            }\n\n            var end_function = function end_function() {\n                timeout = null;\n                var scale_value = Math.abs(parseFloat(zoom_level) / start_zoom);\n\n                self._canvas.setScale(null);\n\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'panend');\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, '_anim_end');\n                let zoomchange = function zoomchange() {\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(self._canvas, 'zoomChange', zoomchange);\n                    self.refresh();\n                    if (typeof center_residue != 'undefined') {\n                        var delta = (start_zoom - zoom_level) / 25 * center_residue;\n                        delta += start_x;\n\n                        self._resizeContainer();\n\n                        if (self._canvas.shiftPosition) {\n                            self._canvas.shiftPosition(delta, 0);\n                        } else {\n                            self._canvas.setCurrentTranslateXY(delta, 0);\n                        }\n                    }\n                    center_residue = null;\n                    start_x = null;\n                };\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(self._canvas, 'zoomChange', zoomchange);\n\n                if (self._canvas) {\n                    self._canvas.zoom = parseFloat(zoom_level);\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self._canvas, 'zoomChange');\n                }\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(self, 'zoomChange');\n            };\n\n            if (\"ontouchend\" in document && self.zoomCenter && !no_touch_center) {\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(self, 'gestureend');\n                _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(self, 'gestureend', function () {\n                    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(self, 'gestureend', arguments.callee);\n                    end_function();\n                });\n                timeout = 1;\n            } else {\n                if (!this.refresh.suspended) {\n                    timeout = setTimeout(end_function, 100);\n                } else {\n                    end_function();\n                }\n            }\n        },\n        fitZoom: function fitZoom() {\n            var container_width = renderer._container.cached_width;\n            if (!container_width) {\n                container_width = renderer._container.clientWidth;\n            }\n            var min_zoom_level = 0.5;\n            if (renderer.sequence) {\n                min_zoom_level = container_width / (2 * renderer.sequence.length);\n            }\n            renderer.zoom = min_zoom_level;\n        },\n        getZoom: function getZoom() {\n            return zoom_level || 1;\n        }\n    };\n\n    if (Object.defineProperty && !_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE8) {\n        Object.defineProperty(renderer, \"zoom\", {\n            get: accessors.getZoom,\n            set: accessors.setZoom\n        });\n    }\n\n    renderer.fitZoom = accessors.fitZoom;\n};\n\n/* Add some properties that will trigger a refresh on the renderer when they are changed.\n   These are all stateless\n */\n\n(function (clazz) {\n\n    var accessors = {\n        getPadding: function getPadding() {\n            return this._padding || 10;\n        },\n\n        setPadding: function setPadding(padding) {\n            this._padding = padding;\n            this.refresh();\n        },\n\n        getTrackGap: function getTrackGap() {\n            if (!this._track_gap) {\n                var default_value = \"ontouchend\" in document ? 20 : 10;\n                this._track_gap = this._track_gap || default_value;\n            }\n\n            return this._track_gap;\n        },\n\n        setTrackGap: function setTrackGap(trackGap) {\n            this._track_gap = trackGap;\n            this.refresh();\n        }\n    };\n\n    if (Object.defineProperty && !_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE8) {\n        Object.defineProperty(clazz.prototype, \"padding\", {\n            get: accessors.getPadding,\n            set: accessors.setPadding\n        });\n        Object.defineProperty(clazz.prototype, \"trackGap\", {\n            get: accessors.getTrackGap,\n            set: accessors.setTrackGap\n        });\n    }\n})(CondensedSequenceRenderer);\n\nCondensedSequenceRenderer.Navigation = _CondensedSequenceRendererNavigation__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (CondensedSequenceRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/CondensedSequenceRenderer.js\n");

/***/ }),

/***/ "./js/lib/CondensedSequenceRendererNavigation.js":
/*!*******************************************************!*\
  !*** ./js/lib/CondensedSequenceRendererNavigation.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _SVGCanvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SVGCanvas */ \"./js/lib/SVGCanvas.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n\nconst svgns = 'http://www.w3.org/2000/svg';\n\n\n\n\nvar touch_scale = 1,\n    touch_enabled = false;\nif (\"ontouchend\" in document) {\n    touch_scale = window.devicePixelRatio > 1 ? 2 : 1;\n    touch_enabled = true;\n}\n\nvar Navigation = function Navigation(parent_canvas, renderer) {\n    Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(parent_canvas);\n\n    this.win = function () {\n        return renderer.win();\n    };\n\n    buildNavPane.call(this, parent_canvas);\n\n    var track_group = parent_canvas.group();\n\n    parent_canvas.insertBefore(track_group, parent_canvas.lastChild);\n\n    var track_canvas = document.createElementNS(svgns, 'svg');\n    buildTrackPane.call(this, track_canvas, connectRenderer.call(this, renderer));\n\n    track_group.appendChild(track_canvas);\n\n    track_group.setAttribute('clip-path', 'url(#' + this.clipping_id + ')');\n\n    this.disable = function () {\n        parent_canvas.style.display = 'none';\n        track_canvas.style.display = 'none';\n    };\n\n    this.enable = function () {\n        parent_canvas.style.display = 'block';\n        track_canvas.style.display = 'block';\n    };\n\n    this.demote = function () {\n        track_canvas.hide();\n        return;\n    };\n\n    this.promote = function () {\n        if (this.visible()) {\n            track_canvas.show();\n        } else {\n            track_canvas.hide();\n        }\n    };\n\n    this.setDimensions = function (width, height) {\n        parent_canvas.setAttribute('width', width);\n        parent_canvas.setAttribute('height', height);\n    };\n};\n\nvar connectRenderer = function connectRenderer(renderer) {\n\n    /**\n     * Create a layer based controller for a group. Clicking on the nominated layer will animate out the expansion of the\n     * group.\n     * @param {Object} lay Layer to turn into a group controller\n     * @param {Object} grp Group to be controlled by this layer.\n     */\n\n    var controller_map = {};\n    var expanded_map = {};\n\n    var old_remove_track = renderer.removeTrack;\n\n    renderer.removeTrack = function (layer) {\n        old_remove_track.call(this, layer);\n        delete controller_map[layer.name];\n        delete expanded_map[layer.name];\n    };\n\n    this.isController = function (layer) {\n        if (controller_map[layer.name]) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    this.getController = function (group) {\n        for (var lay in controller_map) {\n            if (controller_map.hasOwnProperty(lay) && controller_map[lay] == group) {\n                return MASCP.getLayer(lay);\n            }\n        }\n        return null;\n    };\n\n    this.isControllerExpanded = function (layer) {\n        return expanded_map[layer.name];\n    };\n\n    renderer.createGroupController = function (lay, grp) {\n        var layer = MASCP.getLayer(lay);\n        var group = MASCP.getGroup(grp);\n\n        if (!layer || !group) {\n            return;\n        }\n\n        if (controller_map[layer.name]) {\n            return;\n        }\n\n        controller_map[layer.name] = group;\n\n        expanded_map[layer.name] = false;\n\n        var self = this;\n\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, 'removed', function (ev, rend) {\n            self.setGroupVisibility(group);\n        });\n\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, 'visibilityChange', function (rend, visible) {\n            if (group.size() > 0) {\n                if (!expanded_map.hasOwnProperty(layer.name)) {\n                    expanded_map[layer.name] = false;\n                }\n                self.setGroupVisibility(group, expanded_map[layer.name] && visible, true);\n                renderer.refresh();\n            }\n        });\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(group, 'visibilityChange', function (rend, visible) {\n            if (visible) {\n                self.showLayer(layer, true);\n                expanded_map[layer.name] = true;\n            }\n        });\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(layer, '_expandevent');\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, '_expandevent', function (ev) {\n            expanded_map[layer.name] = !expanded_map[layer.name];\n            self.withoutRefresh(function () {\n                self.setGroupVisibility(group, expanded_map[layer.name]);\n            });\n            self.refresh(true);\n        });\n    };\n\n    return DragAndDrop(function (track, before, after) {\n        var t_order = renderer.trackOrder;\n\n        t_order.trackIndex = function (tr) {\n            if (!tr) {\n                return this.length;\n            }\n            return this.indexOf(tr.name);\n        };\n\n        if (after && !before) {\n            before = MASCP.getLayer(t_order[t_order.trackIndex(after) + 1]);\n        }\n\n        t_order.splice(t_order.trackIndex(track), 1);\n        var extra_to_push = [];\n        if (controller_map[track.name]) {\n            let layer_func = function layer_func(lay) {\n                if (MASCP.getGroup(lay) === lay) {\n                    MASCP.getGroup(lay).eachLayer(layer_func);\n                }\n                if (t_order.trackIndex(lay) >= 0) {\n                    extra_to_push = [t_order.splice(t_order.trackIndex(lay), 1)[0]].concat(extra_to_push);\n                }\n            };\n            MASCP.getGroup(controller_map[track.name]).eachLayer(layer_func);\n        }\n        if (before) {\n            t_order.splice(t_order.trackIndex(before), 1, track.name, before ? before.name : undefined);\n            for (var i = 0; i < extra_to_push.length; i++) {\n                if (extra_to_push[i]) {\n                    t_order.splice(t_order.trackIndex(before), 0, extra_to_push[i]);\n                }\n            }\n        } else {\n            renderer.hideLayer(track);\n            MASCP.getLayer(track).disabled = true;\n\n            extra_to_push.forEach(function (lay) {\n\n                renderer.hideLayer(lay);\n                MASCP.getLayer(lay).disabled = true;\n            });\n            t_order.push(track.name);\n            t_order = t_order.concat(extra_to_push);\n        }\n\n        renderer.trackOrder = t_order;\n    });\n};\n\nvar DragAndDrop = function DragAndDrop(spliceFunction) {\n    var targets = [];\n    var in_drag = false,\n        drag_el;\n\n    var splice_before, splice_after, trackToSplice;\n\n    var last_target;\n\n    var timeouts = {};\n\n    var nav_reset_set = null;\n\n    var drag_func = function drag_func(handle, element, track, canvas) {\n        var nav = this;\n\n        var old_reset = nav.reset;\n        if (nav_reset_set === null) {\n            nav.reset = function () {\n                targets = [];\n                old_reset.call(this);\n            };\n            nav_reset_set = true;\n        }\n        var resetDrag = function resetDrag() {\n            window.clearTimeout(timeouts.anim);\n            window.clearTimeout(timeouts.hover);\n            for (var i = 0; i < targets.length; i++) {\n                if (targets[i] != drag_el) {\n                    targets[i].removeAttribute('dragging');\n                    targets[i].removeAttribute('transform');\n                    targets[i].setAttribute('pointer-events', 'all');\n                }\n            }\n        };\n\n        targets.push(element);\n        element.track = track;\n\n        var single_touch_event = function single_touch_event(fn) {\n            return function (e) {\n                if (e.touches && e.touches.length == 1) {\n                    fn.call(this, e);\n                }\n            };\n        };\n\n        var beginDragging = function beginDragging(ev, tr, lbl_grp) {\n\n            if (drag_disabled()) {\n                return;\n            }\n\n            var target = canvas.nearestViewportElement;\n\n            if (in_drag) {\n                return;\n            }\n            lbl_grp.setAttribute('dragging', 'true');\n\n            let spliceBefore = null;\n            let spliceAfter = null;\n\n            var p_orig = lbl_grp.nearestViewportElement.createSVGPoint();\n\n            p_orig.x = ev.clientX || window.pageXOffset + ev.touches[0].clientX;\n            p_orig.y = ev.clientY || window.pageYOffset + ev.touches[0].clientY;\n\n            var rootCTM = lbl_grp.nearestViewportElement.getScreenCTM();\n            var matrix = rootCTM.inverse();\n\n            p_orig = p_orig.matrixTransform(matrix);\n\n            var oX = p_orig.x;\n            var oY = p_orig.y;\n\n            var dragfn = function dragfn(e) {\n                var p = lbl_grp.nearestViewportElement.createSVGPoint();\n                p.x = e.clientX || window.pageXOffset + e.touches[0].clientX;\n                p.y = e.clientY || window.pageYOffset + e.touches[0].clientY;\n                p = p.matrixTransform(matrix);\n\n                var dX = p.x - oX;\n                var dY = p.y - oY;\n                var curr_transform = lbl_grp.getAttribute('transform') || '';\n                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                curr_transform += ' translate(' + dX + ',' + dY + ') ';\n                curr_transform = curr_transform.replace(/\\s*$/, '');\n                lbl_grp.setAttribute('transform', curr_transform);\n                targets.forEach(function (targ) {\n                    var bb = targ.getBBox();\n                    if (bb.y < p.y && bb.y > p.y - bb.height && bb.x < p.x && bb.x > p.x - bb.width) {\n                        el_move.call(targ, e, targ.track);\n                    }\n                });\n                e.stopPropagation();\n                e.preventDefault();\n                return false;\n            };\n            if (touch_enabled) {\n                dragfn = single_touch_event(dragfn);\n            }\n\n            var enddrag = function enddrag(e) {\n                if (e.relatedTarget && (e.relatedTarget == lbl_grp || e.relatedTarget.nearestViewportElement == lbl_grp.nearestViewportElement || e.relatedTarget.nearestViewportElement == target)) {\n                    if (in_drag && targets.indexOf(e.relatedTarget) >= 0) {\n                        resetDrag();\n                    }\n                    return;\n                }\n\n                if (in_drag && (e.type == 'mouseup' || e.type == 'touchend')) {\n                    if (spliceBefore || spliceAfter) {\n                        spliceFunction(trackToSplice, spliceBefore, spliceAfter);\n                    }\n                }\n                target.removeEventListener('touchmove', dragfn, false);\n                target.removeEventListener('mousemove', dragfn, false);\n                target.removeEventListener('touchend', enddrag, false);\n                target.removeEventListener('mouseup', enddrag, false);\n                target.removeEventListener('mouseout', enddrag, false);\n                if (in_drag) {\n                    lbl_grp.setAttributeNS(null, 'pointer-events', 'all');\n                    lbl_grp.removeAttribute('transform');\n                    resetDrag();\n                    in_drag = false;\n                    last_target = null;\n                }\n            };\n            lbl_grp.setAttributeNS(null, 'pointer-events', 'none');\n            lbl_grp.addEventListener('touchmove', dragfn, false);\n            lbl_grp.addEventListener('touchend', enddrag, false);\n            target.addEventListener('mousemove', dragfn, false);\n            target.addEventListener('mouseup', enddrag, false);\n            target.addEventListener('mouseout', enddrag, false);\n\n            in_drag = track;\n            drag_el = lbl_grp;\n        };\n\n        var handle_start = function handle_start(e) {\n            beginDragging(e, track, element);\n        };\n\n        var el_move = function el_move(e, trk) {\n            var trck = trk ? trk : track;\n            var elem = this ? this : element;\n\n            if (in_drag && in_drag != trck && trck != last_target) {\n                last_target = trck;\n                if (timeouts.hover) {\n                    window.clearTimeout(timeouts.hover);\n                }\n                timeouts.hover = window.setTimeout(function () {\n                    if ((in_drag.group || trck.group) && (in_drag.group ? trck.group : !trck.group)) {\n                        if (in_drag.group.name != trck.group.name) {\n                            return;\n                        }\n                    } else {\n                        if (in_drag.group || trck.group) {\n                            return;\n                        }\n                    }\n\n                    if (timeouts.anim) {\n                        window.clearInterval(timeouts.anim);\n                        timeouts.anim = null;\n                    }\n\n                    resetDrag();\n\n                    var current_sibling = elem;\n\n                    var elements_to_shift = [];\n\n                    while (current_sibling !== null) {\n                        if (current_sibling != drag_el && targets.indexOf(current_sibling) >= 0) {\n                            elements_to_shift.push(current_sibling);\n                        }\n                        current_sibling = current_sibling.nextSibling;\n                        if (current_sibling == drag_el) {\n                            break;\n                        }\n                    }\n\n                    current_sibling = elem.previousSibling;\n\n                    var elements_to_shift_up = [];\n\n                    while (current_sibling !== null) {\n                        if (current_sibling != drag_el && targets.indexOf(current_sibling) >= 0) {\n                            elements_to_shift_up.push(current_sibling);\n                        }\n                        current_sibling = current_sibling.previousSibling;\n                        if (current_sibling == drag_el) {\n                            break;\n                        }\n                    }\n                    var anim_steps = 1;\n                    var height = drag_el.getBBox().height / 4;\n                    timeouts.anim = window.setInterval(function () {\n                        var curr_transform,\n                            i = 0;\n\n                        if (anim_steps < 5) {\n                            for (i = 0; i < elements_to_shift.length; i++) {\n                                curr_transform = elements_to_shift[i].getAttribute('transform') || '';\n                                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                                curr_transform += ' translate(0,' + anim_steps * height + ')';\n                                elements_to_shift[i].setAttribute('transform', curr_transform);\n                            }\n\n                            for (i = 0; elements_to_shift.length > 0 && i < elements_to_shift_up.length; i++) {\n\n                                curr_transform = elements_to_shift_up[i].getAttribute('transform') || '';\n                                curr_transform = curr_transform.replace(/\\s?translate\\([^\\)]+\\)/, '');\n                                curr_transform += ' translate(0,' + anim_steps * -1 * height + ')';\n                                elements_to_shift_up[i].setAttribute('transform', curr_transform);\n                            }\n\n                            anim_steps += 1;\n                        } else {\n                            spliceBefore = trck;\n                            trackToSplice = in_drag;\n                            window.clearInterval(timeouts.anim);\n                            timeouts.anim = null;\n                        }\n                    }, 30);\n                }, 300);\n            }\n        };\n\n        handle.addEventListener('mousedown', handle_start, false);\n        handle.addEventListener('touchstart', single_touch_event(handle_start), false);\n    };\n\n    var drag_disabled = function drag_disabled() {\n        return drag_func.disabled;\n    };\n\n    drag_func.spliceFunction = spliceFunction;\n\n    return drag_func;\n};\n\nvar setElementTransform = function setElementTransform(el, transform) {\n    var ua = window.navigator.userAgent;\n    if (ua.indexOf('Edge/') >= 0) {\n        transform = transform.replace(/px/g, '');\n        el.setAttribute('transform', transform);\n    } else {\n        el.style.transform = transform;\n    }\n};\n\nvar buildNavPane = function buildNavPane(back_canvas) {\n    var self = this;\n    self.zoom = 1;\n    self.nav_width_base = 200;\n    var nav_width = self.nav_width_base;\n    self.nav_width = self.nav_width_base;\n    var panel_back = back_canvas.group();\n    var button_group = back_canvas.group();\n\n    var rect = back_canvas.rect(-10, 0, nav_width.toString(), '100%');\n    var base_rounded_corner = [12 * touch_scale, 10 * touch_scale];\n    rect.setAttribute('rx', base_rounded_corner[0].toString());\n    rect.setAttribute('ry', base_rounded_corner[1].toString());\n    if (!touch_enabled) {\n        rect.setAttribute('opacity', '0.8');\n    }\n    rect.style.stroke = '#000000';\n    rect.style.strokeWidth = '2px';\n    rect.style.fill = '#000000';\n    rect.id = 'nav_back';\n\n    panel_back.push(rect);\n\n    self.clipping_id = 'nav_clipping' + new Date().getTime();\n    var clipping = document.createElementNS(svgns, 'clipPath');\n    clipping.id = self.clipping_id;\n    var rect2 = rect.cloneNode();\n    rect2.removeAttribute('id');\n    rect2.removeAttribute('opacity');\n    rect2.setAttribute('x', '0');\n    rect2.setAttribute('width', \"\" + (parseInt(rect2.getAttribute('width')) - 10));\n    rect2.removeAttribute('style');\n    rect2.setAttribute('height', '10000');\n\n    back_canvas.insertBefore(clipping, back_canvas.firstChild);\n    clipping.appendChild(rect2);\n\n    var close_group = back_canvas.crossed_circle(nav_width - (10 + touch_scale * 11), 12 * touch_scale, 10 * touch_scale);\n\n    close_group.style.cursor = 'pointer';\n    if (typeof matchMedia !== 'undefined') {\n        (this.win() || window).matchMedia('print').addListener(function (match) {\n            if (match.matches) {\n                close_group.setAttribute('display', 'none');\n                tracks_button.setAttribute('display', 'none');\n            } else {\n                close_group.setAttribute('display', 'block');\n                tracks_button.setAttribute('display', 'none');\n            }\n        });\n    }\n\n    button_group.push(close_group);\n\n    var tracks_button = MASCP.IE ? back_canvas.svgbutton(10, 5, 65, 25, 'Edit') : back_canvas.button(10, 5, 65, 25, 'Edit');\n    tracks_button.id = 'controls';\n    tracks_button.parentNode.setAttribute('clip-path', 'url(#' + self.clipping_id + ')');\n\n    panel_back.push(MASCP.IE ? tracks_button : tracks_button.parentNode);\n\n    tracks_button.addEventListener('click', function () {\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'toggleEdit');\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'click');\n    }, false);\n\n    panel_back.setAttribute('style', 'transition: all 0.25s;');\n\n    var old_tracks_style = tracks_button.getAttribute('style');\n    var transform_origin = \"\" + (nav_width - (10 + touch_scale * 11)) + \"px \" + 12 * touch_scale + \"px;\";\n    var transform_origin_statement = \" -webkit-transform-origin: \" + transform_origin + \" -ms-transform-origin: \" + transform_origin + \" -moz-transform-origin: \" + transform_origin + \" transform-origin: \" + transform_origin;\n    var translate = function translate(amount, rotate) {\n        var trans = \" translate3d(\" + amount + \"px,0px,0px)\";\n        if (rotate) {\n            trans = trans + \" rotate(\" + rotate + \")\";\n        }\n        return \"-webkit-transform:\" + trans + \"; -moz-transform:\" + trans + \"; -ms-transform:\" + trans.replace('3d', '').replace(',0px)', ')') + \"; transform: \" + trans + \";\";\n    };\n\n    tracks_button.setAttribute('style', old_tracks_style + \" transition: all 0.25s;\");\n    close_group.setAttribute('style', \"transition: all 0.25s; \" + transform_origin_statement);\n    var visible = true;\n\n    var toggler = function toggler(vis, interactive) {\n        visible = vis === false || vis === true ? vis : !visible;\n        var close_transform;\n        var needs_transition = interactive ? \"all ease-in-out 0.4s\" : \"\";\n        var transform_origin = \"\" + (self.nav_width_base - (10 + touch_scale * 11)) + \"px \" + 12 * touch_scale + \"px;\";\n\n        if (visible) {\n            self.promote();\n            setElementTransform(panel_back, 'translate(0,0)');\n            panel_back.style.transition = needs_transition;\n\n            close_group._button.removeAttribute('filter');\n            if (\"ontouchend\" in window || window.getComputedStyle(close_group).getPropertyValue(\"-ms-transform\")) {\n                setElementTransform(close_group, '');\n            }\n            setElementTransform(close_group, 'translate(0,0)');\n            close_group.style.transition = needs_transition;\n            close_group.style.transformOrigin = transform_origin;\n            close_group.style.webkitTransformOrigin = transform_origin;\n            self.refresh();\n        } else {\n            self.demote();\n            // Chrome bug Jan 2015 with the drop shadow\n            //close_group._button.setAttribute('filter','url(#drop_shadow)');\n            close_group.style.transition = needs_transition;\n            close_group.style.transition = needs_transition;\n            close_group.style.transformOrigin = transform_origin;\n            setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(405deg)');\n            if (\"ontouchend\" in window) {\n                // No longer special casing IE\n                setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(45,' + (self.nav_width_base - (10 + touch_scale * 11)) + 'px,' + 12 * touch_scale + 'px)');\n                setElementTransform(panel_back, 'translate(' + -1 * self.nav_width * self.zoom + 'px,0)');\n                panel_back.style.transition = needs_transition;\n            } else {\n                setElementTransform(panel_back, 'translate(' + -1 * self.nav_width * self.zoom + 'px,0)');\n                panel_back.style.transition = needs_transition;\n            }\n        }\n        return true;\n    };\n\n    self.move_closer = function () {\n        if (visible) {\n            return;\n        }\n        setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(405deg)');\n        if (\"ontouchend\" in window) {\n            // No longer special casing IE\n            setElementTransform(close_group, 'translate(' + -0.75 * self.nav_width_base + 'px,0) rotate(45,' + (self.nav_width_base - (10 + touch_scale * 11)) + 'px,' + 12 * touch_scale + 'px)');\n        }\n    };\n\n    self.hide = function (interactive) {\n        toggler.call(this, false, interactive);\n    };\n    self.show = function (interactive) {\n        toggler.call(this, true, interactive);\n    };\n\n    self.visible = function () {\n        return visible;\n    };\n\n    self.setZoom = function (zoom) {\n        self.nav_width = self.nav_width_base / zoom;\n        close_group.setAttribute('transform', 'scale(' + zoom + ',' + zoom + ') ');\n\n        var transform_origin = \"\" + (self.nav_width_base - (10 + touch_scale * 11)) + \"px \" + 12 * touch_scale + \"px;\";\n        transform_origin_statement = \" -webkit-transform-origin: \" + transform_origin + \" -ms-transform-origin: \" + transform_origin + \" -moz-transform-origin: \" + transform_origin + \" transform-origin: \" + transform_origin;\n        close_group.move(self.nav_width_base - (10 + touch_scale * 11), 12 * touch_scale);\n        rect.setAttribute('transform', 'scale(' + zoom + ',1) ');\n        rect.setAttribute('ry', base_rounded_corner[1].toString());\n        rect.setAttribute('rx', (base_rounded_corner[0] / zoom).toString());\n        rect.setAttribute('x', parseInt(-10 / zoom).toString());\n        rect.setAttribute('width', self.nav_width.toString());\n        self.zoom = zoom;\n        toggler.call(this, visible);\n        self.refresh();\n    };\n\n    close_group.addEventListener('click', function () {\n        if (visible) {\n            self.hide(true);\n        } else {\n            self.show(true);\n        }\n    }, false);\n};\n\nvar buildTrackPane = function buildTrackPane(track_canvas, draganddrop) {\n    var self = this;\n\n    var close_buttons, controller_buttons, edit_enabled;\n\n    var nav_width_track_canvas_ctm = 0;\n\n    Object(_SVGCanvas__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(track_canvas);\n    track_canvas.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n\n    var track_rects = [];\n\n    self.reset = function () {\n        while (track_canvas.firstChild) {\n            track_canvas.removeChild(track_canvas.firstChild);\n        }\n        track_rects = [];\n        ctm_refresh = [];\n        //            self.refresh();\n    };\n\n    var ctm_refresh = [];\n\n    self.isEditing = function () {\n        return edit_enabled;\n    };\n\n    self.refresh = function () {\n        (close_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'visible' : 'hidden');\n        });\n        (controller_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'hidden' : 'visible');\n        });\n        if (edit_enabled) {\n            toggleMouseEvents.call(this, true);\n        } else {\n            toggleMouseEvents.call(this, false);\n        }\n\n        if (track_canvas.getAttribute('display') == 'none' || track_canvas.style.display == 'none') {\n            return;\n        }\n        if (ctm_refresh.length < 1) {\n            return;\n        }\n        var nav_back = track_canvas.ownerSVGElement.getElementById('nav_back');\n\n        var ctm = nav_back.getScreenCTM().inverse().multiply(track_canvas.getScreenCTM()).inverse();\n        var back_width = nav_back.getBBox().width + nav_back.getBBox().x;\n        var point = track_canvas.createSVGPoint();\n        point.x = back_width;\n        point.y = 0;\n        nav_width_track_canvas_ctm = point.matrixTransform(ctm).x;\n        ctm_refresh.forEach(function (el) {\n            var width = 0;\n            try {\n                width = el.getBBox().width;\n            } catch (err) {\n                // This is a bug with Firefox on some elements getting\n                // the bounding box. We silently fail here, as I can't\n                // figure out why the call to getBBox fails.\n            }\n            if (width > 0) {\n                var a_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(el.getAttribute('transform') || '');\n                if (typeof a_y != 'undefined') {\n                    a_y = a_y[2];\n                } else {\n                    return;\n                }\n\n                var new_x = nav_width_track_canvas_ctm - 1.5 * parseInt(el.getAttribute('width'), 10);\n                el.setAttribute('transform', 'translate(' + new_x + ',' + a_y + ')');\n            }\n        });\n    };\n\n    var toggleMouseEvents = function toggleMouseEvents(on) {\n        if (track_rects) {\n            (track_rects || []).forEach(function (el) {\n                el.setAttribute('opacity', on ? '1' : touch_enabled ? \"0.5\" : \"0.1\");\n                el.setAttribute('pointer-events', on ? 'all' : 'none');\n                on ? el.parentNode.setAttribute('dragenabled', 'true') : el.parentNode.removeAttribute('dragenabled');\n            });\n        }\n    };\n\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(self, 'toggleEdit', function () {\n        edit_enabled = typeof edit_enabled == 'undefined' ? true : !edit_enabled;\n        draganddrop.disabled = !edit_enabled;\n        toggleMouseEvents.call(self, edit_enabled);\n\n        self.hide();\n        self.show();\n\n        (close_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'visible' : 'hidden');\n        });\n        (controller_buttons || []).forEach(function (button) {\n            button.setAttribute('visibility', edit_enabled ? 'hidden' : 'visible');\n        });\n    });\n\n    this.setViewBox = function (viewBox) {\n        track_canvas.setAttribute('viewBox', viewBox);\n    };\n\n    track_canvas.style.height = '100%';\n    track_canvas.style.width = '100%';\n    track_canvas.setAttribute('height', '100%');\n    track_canvas.setAttribute('width', '100%');\n\n    this.renderTrack = function (track, y, height, options) {\n        var label_group = track_canvas.group();\n        var a_rect = track_canvas.rect(0, y, '100%', height);\n        a_rect.setAttribute('stroke', '#000000');\n        a_rect.setAttribute('stroke-width', '2');\n        a_rect.setAttribute('fill', 'url(#simple_gradient)');\n        a_rect.setAttribute('opacity', touch_enabled ? '0.5' : '0.1');\n        a_rect.setAttribute('pointer-events', 'none');\n        track_rects = track_rects || [];\n\n        track_rects.push(a_rect);\n\n        label_group.push(a_rect);\n\n        // Use these for debugging positioning\n\n        // var r = track_canvas.rect(0,y-height,height,height);\n        // r.setAttribute('fill','#ff0000');\n        // label_group.push(r);\n        // \n        // r = track_canvas.rect(0,y+height,height,height);\n        // r.setAttribute('fill','#ff0000');\n        // label_group.push(r);\n\n\n        var text_scale = options && options['font-scale'] ? options['font-scale'] : 1;\n        var text_left = 4 / 3 * touch_scale * height * text_scale;\n        var a_text = track_canvas.text(text_left, y + 0.5 * height, track.fullname || track.name);\n        a_text.setAttribute('height', height);\n        a_text.setAttribute('width', height);\n        a_text.setAttribute('font-size', 0.6 * height * text_scale);\n        a_text.setAttribute('fill', '#ffffff');\n        a_text.setAttribute('stroke', '#ffffff');\n        a_text.setAttribute('stroke-width', '0');\n        a_text.firstChild.setAttribute('dy', '0.5ex');\n\n        // r = track_canvas.rect(3*height*text_scale,y+0.5*height,2*height,2*height);\n        // r.setAttribute('fill','#00ff00');\n        // label_group.push(r);\n\n        label_group.push(a_text);\n\n        a_text.setAttribute('pointer-events', 'none');\n\n        var circ;\n\n        if (track.href) {\n            a_anchor = track_canvas.a(track.href);\n            var icon_name = null;\n            var icon_metrics = [0.5 * height * text_scale, 0, height * text_scale * touch_scale];\n            icon_metrics[1] = -0.5 * (icon_metrics[2] - height);\n\n            circ = track_canvas.circle(icon_metrics[0] + 0.5 * icon_metrics[2], 0.5 * height, 0.5 * icon_metrics[2]);\n            circ.setAttribute('fill', '#ffffff');\n            circ.setAttribute('opacity', '0.1');\n            a_anchor.appendChild(circ);\n\n            var url_type = track.href;\n            if (typeof url_type === 'string' && url_type.match(/^javascript\\:/)) {\n                icon_name = '#plus_icon';\n            } else if (typeof url_type === 'function') {\n                icon_name = '#plus_icon';\n                a_anchor.setAttribute('href', '#');\n                a_anchor.removeAttribute('target');\n                a_anchor.addEventListener('click', function (e) {\n                    url_type.call();\n\n                    if (e.preventDefault) {\n                        e.preventDefault();\n                    } else {\n                        e.returnResult = false;\n                    }\n                    if (e.stopPropagation) {\n                        e.stopPropagation();\n                    } else {\n                        e.cancelBubble = true;\n                    }\n\n                    return false;\n                }, false);\n            } else {\n                icon_name = '#new_link_icon';\n            }\n            if (track.icon) {\n                icon_name = track.icon;\n            }\n            var a_use = track_canvas.use(icon_name, icon_metrics[0], icon_metrics[1], icon_metrics[2], icon_metrics[2]);\n            a_use.style.cursor = 'pointer';\n            a_anchor.appendChild(a_use);\n            a_anchor.setAttribute('transform', 'translate(' + (nav_width_track_canvas_ctm - 1.5 * icon_metrics[2]) + ',' + y + ')');\n            a_anchor.setAttribute('width', icon_metrics[2].toString());\n            ctm_refresh.push(a_anchor);\n        }\n\n        label_group.addEventListener('touchstart', function () {\n            label_group.onmouseover = undefined;\n            label_group.onmouseout = undefined;\n        }, false);\n\n        label_group.addEventListener('touchend', function () {\n            label_group.onmouseover = undefined;\n            label_group.onmouseout = undefined;\n        }, false);\n\n        draganddrop.call(this, a_rect, label_group, track, track_canvas);\n\n        (function () {\n\n            if (track.group) {\n                return;\n            }\n\n            var t_height = 0.5 * height * touch_scale;\n\n            if (!close_buttons) {\n                close_buttons = [];\n            }\n\n            var closer = track_canvas.crossed_circle(1.5 * t_height, 0, t_height);\n            closer.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n            closer.firstChild.setAttribute('fill', 'url(#red_3d)');\n            for (var nodes = closer.childNodes, i = 0, len = nodes.length; i < len; i++) {\n                nodes[i].setAttribute('stroke-width', (t_height / 4).toString());\n            }\n            closer.addEventListener('click', function () {\n                draganddrop.spliceFunction(track);\n            }, false);\n            label_group.push(closer);\n            close_buttons.push(closer);\n            closer.setAttribute('visibility', 'hidden');\n        })();\n        if (this.isController(track)) {\n            if (!controller_buttons) {\n                controller_buttons = [];\n            }\n\n            var t_height = 0.5 * height * touch_scale;\n            var expander = track_canvas.group();\n            circ = track_canvas.circle(1.5 * t_height, 0, t_height);\n            circ.setAttribute('fill', '#ffffff');\n            circ.setAttribute('opacity', '0.1');\n            expander.push(circ);\n\n            var t_metrics = [1.1 * t_height, -1.25 * t_height, 2.25 * t_height, -0.5 * t_height, 1.1 * t_height, 0.25 * t_height];\n\n            t_metrics[1] += 0.5 * (t_height - 0 * height);\n            t_metrics[3] += 0.5 * (t_height - 0 * height);\n            t_metrics[5] += 0.5 * (t_height - 0 * height);\n\n            var group_toggler = track_canvas.poly('' + t_metrics[0] + ',' + t_metrics[1] + ' ' + t_metrics[2] + ',' + t_metrics[3] + ' ' + t_metrics[4] + ',' + t_metrics[5]);\n            if (this.isControllerExpanded(track)) {\n                expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ') rotate(90,' + 1.5 * t_height + ',' + t_metrics[3] + ')');\n            } else {\n                expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n            }\n            group_toggler.setAttribute('height', 1.75 * t_height);\n            group_toggler.setAttribute('font-size', 1.5 * t_height);\n            group_toggler.setAttribute('fill', '#ffffff');\n            group_toggler.setAttribute('pointer-events', 'none');\n\n            expander.push(group_toggler);\n\n            expander.style.cursor = 'pointer';\n            expander.addEventListener('click', function (e) {\n                e.stopPropagation();\n                _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(track, '_expandevent');\n                if (self.isControllerExpanded(track)) {\n                    expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ') rotate(90,' + 1.5 * t_height + ',' + t_metrics[3] + ')');\n                } else {\n                    expander.setAttribute('transform', 'translate(0,' + (y + 0.5 * height) + ') scale(' + text_scale + ')');\n                }\n            }, false);\n            label_group.push(expander);\n\n            controller_buttons.push(expander);\n            expander.setAttribute('visibility', 'hidden');\n        }\n    };\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Navigation);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/CondensedSequenceRendererNavigation.js\n");

/***/ }),

/***/ "./js/lib/Dragger.js":
/*!***************************!*\
  !*** ./js/lib/Dragger.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _hammer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../hammer.js */ \"./js/hammer.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/**\n *  @fileOverview   Basic classes and defitions for a Gene Ontology ID based map\n */\n\n\n\n\n/**\n * @class       State class for adding panning functionality to an element. Each element that is to be panned needs a new instance\n *              of the Dragger to store state.\n * @author      hjjoshi\n * @requires    svgweb\n */\nconst Dragger = function Dragger() {\n    this.oX = 0;\n    this.oY = 0;\n    this.dX = 0;\n    this.dY = 0;\n    this.dragging = false;\n    this.targetElement = null;\n};\n\n/**\n * Connect this dragger to a particular element. If an SVG element is given, panning occurs within the bounding box of the SVG, and\n * the image is shifted by using the currentTranslate property. If a regular HTML element is given, the scrollLeft and scrollTop attributes\n * are used to move the viewport around. \n * @param {Element} targetElement Element to enable panning upon.\n */\nDragger.prototype.applyToElement = function (targetElement) {\n    var self = this;\n    self.enabled = true;\n\n    var momentum = [];\n\n    if (targetElement.nodeName == 'svg') {\n        targetElement.getPosition = function () {\n            var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n            var dX = translate.x;\n            var dY = translate.y;\n\n            return [dX, dY];\n        };\n\n        targetElement.shiftPosition = function (x, y) {\n            var p = { 'x': x, 'y': y };\n            var viewBoxScale = 1;\n            var vbox = this.getAttribute('viewBox');\n\n            var min_x, min_y, width, height;\n\n            if (vbox) {\n                var viewBox = this.getAttribute('viewBox').split(' ');\n                viewBoxScale = parseFloat(this.width.baseVal.value) / parseFloat(viewBox[2]);\n                min_x = 0;\n                min_y = parseInt(viewBox[1], 10);\n                width = parseInt(viewBox[2], 10);\n                height = parseInt(viewBox[3], 10);\n            } else {\n                min_x = 0;\n                min_y = 0;\n                width = targetElement.width;\n                height = targetElement.height;\n            }\n\n            if (targetElement.style.GomapScrollLeftMargin) {\n                min_x += targetElement.style.GomapScrollLeftMargin;\n            }\n\n            if (self.dragging) {\n                p.x = viewBoxScale * (p.x - self.oX);\n                p.y = viewBoxScale * (p.y - self.oY);\n\n                p.x += self.dX;\n                p.y += self.dY;\n                p.y = 0;\n            }\n\n            if (targetElement._snapback) {\n                clearTimeout(targetElement._snapback);\n                targetElement._snapback = null;\n            }\n\n            if (p.x > viewBoxScale * min_x) {\n                /* Element has shifted too far to the right\n                   Induce some gravity towards the left side\n                   of the screen\n                */\n\n                let do_snapback = function do_snapback() {\n                    var evObj;\n                    var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n                    if (Math.abs(translate.x - viewBoxScale * min_x) > 35) {\n                        var new_pos = 0.95 * (translate.x - viewBoxScale * min_x);\n                        if (new_pos < viewBoxScale * min_x) {\n                            new_pos = viewBoxScale * min_x;\n                        }\n\n                        targetElement.setCurrentTranslateXY(new_pos, 0);\n                        window.requestAnimationFrame(do_snapback, targetElement);\n                        //                        targetElement._snapback = setTimeout(arguments.callee,10);\n                        if (document.createEvent) {\n                            var evObj = document.createEvent('Events');\n                            evObj.initEvent('panstart', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                    } else {\n                        targetElement.setCurrentTranslateXY(viewBoxScale * min_x, 0);\n                        if (document.createEvent) {\n                            var evObj = document.createEvent('Events');\n                            evObj.initEvent('pan', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                        if (!self.dragging) {\n                            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(targetElement, 'panend');\n                        }\n                        targetElement._snapback = null;\n                    }\n                };\n                targetElement._snapback = setTimeout(do_snapback, 300);\n            }\n\n            var min_val = viewBoxScale * (width - 2 * min_x);\n\n            if (min_x === 0) {\n                min_val *= 0.90;\n            }\n            if (p.x < 0 && Math.abs(p.x) > min_val) {\n                /* Element has shifted too far to the left\n                   Induce some gravity to the right side of the screen\n                */\n                let do_snapback = function do_snapback() {\n                    var evObj;\n                    var translate = targetElement.currentTranslateCache || targetElement.currentTranslate;\n                    if (Math.abs(translate.x - -1 * min_val) > 35) {\n                        var new_pos = 0.95 * translate.x;\n                        if (new_pos > -1 * min_val) {\n                            new_pos = -1 * min_val;\n                        }\n                        targetElement.setCurrentTranslateXY(new_pos, 0);\n                        window.requestAnimationFrame(do_snapback, targetElement);\n                        //                        targetElement._snapback = setTimeout(arguments.callee,10);\n                        if (document.createEvent) {\n                            evObj = document.createEvent('Events');\n                            evObj.initEvent('panstart', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                    } else {\n                        targetElement.setCurrentTranslateXY(-1 * min_val, 0);\n                        if (document.createEvent) {\n                            evObj = document.createEvent('Events');\n                            evObj.initEvent('pan', false, true);\n                            targetElement.dispatchEvent(evObj);\n                        }\n                        if (!self.dragging) {\n                            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(targetElement, 'panend');\n                        }\n                        targetElement._snapback = null;\n                    }\n                };\n                targetElement._snapback = setTimeout(do_snapback, 300);\n            }\n\n            if (p.y > viewBoxScale * min_y) {\n                p.y = viewBoxScale * min_y;\n            }\n            if (Math.abs(p.y) > 0.50 * viewBoxScale * height) {\n                p.y = -0.50 * viewBoxScale * height;\n            }\n            if (this.setCurrentTranslateXY) {\n                this.setCurrentTranslateXY(p.x, p.y);\n            } else if (this.currentTranslate.setXY) {\n                this.currentTranslate.setXY(p.x, p.y);\n            } else {\n                this.currentTranslate.x = p.x;\n                this.currentTranslate.y = p.y;\n            }\n\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('pan', false, true);\n                this.dispatchEvent(evObj);\n            }\n        };\n    } else {\n        targetElement.getPosition = function () {\n            return [this.scrollLeft, this.scrollTop];\n        };\n        targetElement.shiftPosition = function (x, y) {\n            this.scrollLeft = self.dX + (self.oX - x);\n            this.scrollTop = self.dY + (self.oY - y);\n\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('pan', false, true);\n                this.dispatchEvent(evObj);\n            }\n        };\n    }\n\n    var stationary;\n\n    var svgMouseDown = function svgMouseDown(evt) {\n        if (!self.enabled) {\n            return true;\n        }\n\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        var positions = mousePosition(evt);\n        self.dragging = true;\n        self.moved = false;\n        targ.setAttribute('dragging', 'true');\n\n        if (self.targetElement) {\n\n            self.oX = positions[0];\n            self.oY = positions[1];\n            self.dX = self.targetElement.scrollLeft;\n            self.dY = self.targetElement.scrollTop;\n            evt.preventDefault(true);\n            return;\n        }\n\n        var p = targetElement.createSVGPoint();\n        positions = mousePosition(evt);\n        p.x = positions[0];\n        p.y = positions[1];\n\n        var rootCTM = this.firstElementChild.getScreenCTM();\n        self.matrix = rootCTM.inverse();\n\n        p = p.matrixTransform(self.matrix);\n\n        self.dX = targetElement.getPosition()[0];\n        self.dY = targetElement.getPosition()[1];\n\n        self.oX = p.x;\n        self.oY = p.y;\n\n        evt.preventDefault(true);\n\n        if (document.createEvent) {\n            self.clicktimeout = setTimeout(function () {\n                var evObj = document.createEvent('Events');\n                self.clicktimeout = null;\n                evObj.initEvent('panstart', false, true);\n                targ.dispatchEvent(evObj);\n            }, 200);\n        }\n    };\n\n    var mousePosition = function mousePosition(evt) {\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX;\n            posy = evt.pageY;\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n        if (self.targetElement) {\n            posx = evt.screenX;\n            posy = evt.screenY;\n        }\n        return [posx, posy];\n    };\n\n    var mouseMove = function mouseMove(evt) {\n        var positions = mousePosition(evt);\n        if (self.clicktimeout && Math.abs(positions[0] - self.oX) < 10) {\n            mouseUp();\n        }\n        if (!self.dragging) {\n            return;\n        }\n\n        targetElement.shiftPosition(positions[0], positions[1]);\n\n        evt.preventDefault(true);\n    };\n\n    var mouseDown = function mouseDown(evt) {\n        self.dragging = true;\n        self.moved = false;\n        var positions = mousePosition(evt);\n        self.oX = positions[0];\n        self.oY = positions[1];\n        self.dX = targetElement.getPosition()[0];\n        self.dY = targetElement.getPosition()[1];\n        evt.preventDefault(true);\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        targ.setAttribute('dragging', 'true');\n        if (document.createEvent) {\n            var evObj = document.createEvent('Events');\n            evObj.initEvent('panstart', false, true);\n            targ.dispatchEvent(evObj);\n        }\n    };\n\n    var svgMouseMove = function svgMouseMove(evt) {\n        if (!self.enabled) {\n            return true;\n        }\n        // this.style.cursor = 'url(http://maps.gstatic.com/intl/en_us/mapfiles/openhand_8_8.cur), move';\n        if (!self.dragging) {\n            return;\n        }\n\n        // if (stationary) {\n        //     clearTimeout(stationary);\n        //     stationary = null;\n        // }\n        // \n        // stationary = window.setTimeout(function() {\n        //     self.dragging = false;\n        // },200);        \n\n        doMouseMove.call(this, evt);\n    };\n\n    var doMouseMove = function doMouseMove(evt) {\n        var positions = mousePosition(evt);\n        // this.style.cursor = 'url(http://maps.gstatic.com/intl/en_us/mapfiles/closedhand_8_8.cur), -moz-grabbing';\n\n        if (self.targetElement) {\n            self.targetElement.shiftPosition(positions[0], positions[1]);\n            self.moved = true;\n            return;\n        }\n\n        var p = targetElement._cachedpoint || targetElement.createSVGPoint();\n        targetElement._cachedpoint = p;\n\n        positions = mousePosition(evt);\n\n        p.x = positions[0];\n        p.y = positions[1];\n\n        var rootCTM = targetElement._cachedrctm || targetElement.firstElementChild.getScreenCTM();\n        targetElement._cachedrctm = rootCTM;\n\n        p = p.matrixTransform(self.matrix);\n        targetElement.shiftPosition(p.x, p.y);\n        self.moved = true;\n        //        momentum = p.x;        \n    };\n\n    var captureClick = function captureClick(evt) {\n        evt.stopPropagation();\n        this.removeEventListener('click', captureClick, true);\n    };\n\n    var mouseUp = function mouseUp(evt) {\n        if (self.clicktimeout) {\n            clearTimeout(self.clicktimeout);\n            self.clicktimeout = null;\n        }\n        if (!self.enabled) {\n            return true;\n        }\n        self.oX = 0;\n        self.oY = 0;\n        self.dX = null;\n        self.dY = null;\n        self.dragging = false;\n        evt.preventDefault(true);\n\n        var targ = self.targetElement ? self.targetElement : targetElement;\n\n        targ.removeAttribute('dragging');\n\n        if (!targ._snapback) {\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(targ, 'panend', true);\n        }\n\n        if (evt.type == 'mouseup' && self.moved) {\n            targ.addEventListener('click', captureClick, true);\n        }\n        self.moved = false;\n    };\n\n    var mouseOut = function mouseOut(e) {\n        if (!self.dragging || !self.enabled) {\n            return true;\n        }\n        if (this == self.targetElement) {\n            mouseUp(e);\n        }\n\n        if (e.target != this && !e.currentTarget) {\n            return;\n        }\n\n        var toTarget = e.relatedTarget ? e.relatedTarget : e.toElement;\n\n        while (toTarget !== null) {\n            if (toTarget == this) {\n                return;\n            }\n            toTarget = toTarget.parentNode;\n        }\n        mouseUp(e);\n    };\n\n    if (!targetElement.addEventListener) {\n        targetElement.addEventListener = function (name, func, bool) {\n            this.attachEvent(name, func);\n        };\n    }\n\n    targetElement.addEventListener('touchstart', function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        if (self.momentum) {\n            window.clearTimeout(self.momentum);\n            self.momentum = null;\n        }\n        if (e.touches.length == 1) {\n            var positions = mousePosition(e.touches[0]);\n            var p;\n            if (targ.nodeName == 'svg') {\n                p = targ.createSVGPoint();\n                p.x = positions[0];\n                p.y = positions[1];\n                var rootCTM = this.getScreenCTM();\n                self.matrix = rootCTM.inverse();\n                p = p.matrixTransform(self.matrix);\n            } else {\n                p.x = positions[0];\n                p.y = positions[1];\n            }\n            self.oX = p.x;\n            self.oY = p.y;\n\n            self.dragging = true;\n            self.dX = targ.getPosition()[0];\n            self.dY = targ.getPosition()[1];\n\n            self._momentum_shrinker = setInterval(function () {\n                momentum.shift();\n            }, 20);\n            if (document.createEvent) {\n                var evObj = document.createEvent('Events');\n                evObj.initEvent('panstart', false, true);\n                targ.dispatchEvent(evObj);\n            }\n            e.preventDefault();\n        }\n    }, false);\n\n    // document.addEventListener('touchmove',function(e) {\n    //     console.log('touchmove for the document');\n    //     console.log(self.dragging);\n    //     if ( ! self.dragging ) {\n    //         return;\n    //     }\n    //     console.log(\"Ending the drag for document move\");\n    //     self.oX = 0;\n    //     self.oY = 0;\n    //     self.dX = null;\n    //     self.dY = null;\n    //     self.dragging = false;\n    // \n    //     var targ = self.targetElement ? self.targetElement : targetElement;      \n    // \n    //     if (document.createEvent) {\n    //         var evObj = document.createEvent('Events');\n    //         evObj.initEvent('panend',false,true);\n    //         targ.dispatchEvent(evObj);\n    //     }      \n    // },false);\n\n    targetElement.addEventListener('touchmove', function (e) {\n        if (self.drag_zoom) {\n            return;\n        }\n        if (self.momentum) {\n            window.clearTimeout(self.momentum);\n            self.momentum = null;\n        }\n\n        if (e.touches.length != 1) {\n            self.dragging = false;\n        }\n\n        var targ = self.targetElement ? self.targetElement : targetElement;\n\n        var positions = mousePosition(e.touches[0]);\n\n        if (!positions || !self.matrix) {\n            return;\n        }\n\n        var p;\n        if (targ.nodeName == 'svg') {\n            p = targ.createSVGPoint();\n            p.x = positions[0];\n            p.y = positions[1];\n            p = p.matrixTransform(self.matrix);\n        } else {\n            p.x = positions[0];\n            p.y = positions[1];\n        }\n\n        if (self.dragging && 6 * Math.abs(self.oX - p.x) > Math.abs(self.oY - p.y)) {\n            // FIXME - PASSIVE\n            // e.preventDefault();\n        }\n\n        if (!self.dragging) {\n            self.oX = 0;\n            self.oY = 0;\n            self.dX = null;\n            self.dY = null;\n            return;\n        }\n        if (momentum.length > 3) {\n            momentum.splice(2);\n        }\n        targ.shiftPosition(p.x, p.y);\n        momentum.push(targ.getPosition()[0] - self.dX);\n    }, { passive: true });\n    // FIXME - PASSIVE\n\n    var momentum_func = function momentum_func(e) {\n        if (!self.enabled) {\n            return true;\n        }\n        if (!self.dragging) {\n            clearInterval(self._momentum_shrinker);\n            mouseUp(e);\n            return;\n        }\n        var targ = self.targetElement ? self.targetElement : targetElement;\n        var delta = 0;\n\n        if (momentum.length > 0) {\n            var last_val = momentum[0];\n            momentum.forEach(function (m) {\n                if (typeof last_val != 'undefined') {\n                    delta += m - last_val;\n                }\n                last_val = m;\n            });\n            delta = delta / momentum.length;\n        }\n        var start = targ.getPosition()[0];\n        var start_delta = delta;\n        self.dragging = false;\n        if (self.momentum) {\n            window.clearTimeout(self.momentum);\n        }\n        self.momentum = 1;\n        let moment = function moment() {\n            start = targ.getPosition()[0];\n            if (self.dragging) {\n                start += self.oX - self.dX;\n            } else {\n                self.oX = 0;\n                self.dX = 0;\n            }\n            targ.shiftPosition(start + delta, 0);\n            start = start + delta;\n            delta = delta * 0.5;\n\n            if (delta > 0 && Math.abs(start_delta / delta) < 10) {\n                window.requestAnimationFrame(moment, targ);\n                //                window.setTimeout(arguments.callee,50);\n            } else {\n                self.momentum = null;\n                clearInterval(self._momentum_shrinker);\n                mouseUp(e);\n            }\n        };\n\n        moment();\n    };\n\n    targetElement.addEventListener('touchend', momentum_func, false);\n\n    if (targetElement.nodeName == 'svg') {\n        targetElement.addEventListener('mousedown', svgMouseDown, false);\n        targetElement.addEventListener('mousemove', svgMouseMove, false);\n        targetElement.addEventListener('mouseup', mouseUp, false);\n        targetElement.addEventListener('mouseout', mouseOut, false);\n        if (self.targetElement) {\n            self.targetElement.addEventListener('mouseout', mouseOut, false);\n        }\n        // targetElement.addEventListener('click',function(ev) { ev.preventDefault(); ev.stopPropagation(); },false);\n    } else {\n        targetElement.addEventListener('mousedown', mouseDown, false);\n        targetElement.addEventListener('mousemove', mouseMove, false);\n        targetElement.addEventListener('mouseup', mouseUp, false);\n        targetElement.addEventListener('mouseout', mouseOut, false);\n    }\n};\n\nDragger.addTouchZoomControls = function (zoomElement, touchElement, controller) {\n    if (!controller) {\n        controller = { \"enabled\": true };\n    }\n    Dragger.prototype.addTouchZoomControls.call(controller, zoomElement, touchElement);\n    return controller;\n};\n\nDragger.prototype.addTouchZoomControls = function (zoomElement, touchElement) {\n    var self = this;\n    var last_touch_start = null;\n    var xform = null;\n    var max_y = null;\n    var mousePosition = function mousePosition(evt) {\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX;\n            posy = evt.pageY;\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n        if (self.targetElement) {\n            posx = evt.screenX;\n            posy = evt.screenY;\n        }\n        return [posx, posy];\n    };\n\n    var drag_zoom_move = function drag_zoom_move(evt) {\n        if (!self.enabled || !self.drag_zoom) {\n            return;\n        }\n        if (evt.touches.length == 1) {\n            var positions = mousePosition(evt.touches[0]);\n            var p = {};\n            p.x = positions[0];\n            p.y = positions[1];\n\n            if (touchElement.nodeName == 'svg') {\n                p = touchElement.createSVGPoint();\n                p.x = positions[0];\n                p.y = positions[1];\n                p = p.matrixTransform(xform);\n            }\n            zoomElement.zoom = self.zoom_start * Math.pow(10, (p.y - zoomElement.zoomCenter.y) / max_y);\n        }\n    };\n\n    var drag_zoom_end = function drag_zoom_end(evt) {\n        touchElement.removeEventListener('touchmove', drag_zoom_move);\n        touchElement.removeEventListener('touchend', drag_zoom_end);\n        self.drag_zoom = false;\n    };\n\n    touchElement.addEventListener('touchstart', function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        if (e.touches.length == 1) {\n            if (new Date().getTime() - last_touch_start <= 300) {\n                self.drag_zoom = true;\n                self.zoom_start = zoomElement.zoom;\n\n                var positions = mousePosition(e.touches[0]);\n                var positions2 = mousePosition(e.touches[0]);\n                var p;\n                if (touchElement.nodeName == 'svg') {\n                    p = touchElement.createSVGPoint();\n                    p.x = 0.5 * (positions[0] + positions2[0]);\n                    p.y = 0.5 * (positions[1] + positions2[1]);\n                    var rootCTM = this.getScreenCTM();\n                    xform = rootCTM.inverse();\n                    p = p.matrixTransform(xform);\n                    max_y = parseInt(touchElement.getAttribute('viewBox').split(' ')[3]);\n                } else {\n                    p.x = 0.5 * (positions[0] + positions2[0]);\n                    p.y = 0.5 * (positions[1] + positions2[1]);\n                }\n                zoomElement.zoomCenter = p;\n                touchElement.addEventListener('touchmove', drag_zoom_move, { passive: true });\n                touchElement.addEventListener('touchend', drag_zoom_end, false);\n                e.preventDefault();\n                return;\n            }\n\n            last_touch_start = new Date().getTime();\n            return;\n        }\n        if (e.touches.length == 2) {\n            var positions = mousePosition(e.touches[0]);\n            var positions2 = mousePosition(e.touches[1]);\n            var p;\n            if (touchElement.nodeName == 'svg') {\n                p = touchElement.createSVGPoint();\n                p.x = 0.5 * (positions[0] + positions2[0]);\n                p.y = 0.5 * (positions[1] + positions2[1]);\n                var rootCTM = this.getScreenCTM();\n                self.matrix = rootCTM.inverse();\n                p = p.matrixTransform(self.matrix);\n            } else {\n                p.x = 0.5 * (positions[0] + positions2[0]);\n                p.y = 0.5 * (positions[1] + positions2[1]);\n            }\n            zoomElement.zoomCenter = p;\n            e.preventDefault();\n        }\n    }, false);\n\n    // touchElement.addEventListener('gesturestart',function(e) {\n    Hammer(touchElement).on(\"touch\", function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        // zoomElement.zoomLeft = null;\n        var zoomStart = zoomElement.zoom;\n\n        var zoomscale = function zoomscale(ev) {\n            if (zoomElement.zoomCenter) {\n                zoomElement.zoom = zoomStart * ev.gesture.scale;\n            }\n            ev.preventDefault();\n        };\n        Hammer(touchElement).on('pinch', zoomscale, false);\n        let hammer_release = function hammer_release(ev) {\n            Hammer(touchElement).off('pinch', zoomscale);\n            Hammer(touchElement).off('release', hammer_release);\n            zoomElement.zoomCenter = null;\n            zoomElement.zoomLeft = null;\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(zoomElement, 'gestureend');\n        };\n        Hammer(touchElement).on('release', hammer_release, false);\n        e.preventDefault();\n    }, false);\n};\n\n/**\n * Given an element that implements a zoom attribute, creates a div that contains controls for controlling the zoom attribute. The\n * zoomElement must have a zoom attribute, and can fire the zoomChange event whenever the zoom value is changed on the object. The\n * scrollwheel is connected to this element so that when the mouse hovers over the controls, it can control the zoom using only\n * the scroll wheel.\n * @param {Object} zoomElement Element to control the zooming for.\n * @param {Number} min Minimum value for the zoom attribute (default 0)\n * @param {Number} max Maximum value for the zoom attribute (default 10)\n * @param {Number} precision Step precision for the zoom control (default 0.5)\n * @param {Number} value Default value for this control\n * @returns DIV element containing the controls\n * @type Element\n * @see GOMap.Diagram#event:zoomChange\n */\nDragger.addZoomControls = function (zoomElement, min, max, precision, value) {\n    min = min || 0;\n    max = max || 10;\n    precision = precision || 0.5;\n    value = value || zoomElement.zoom || min;\n\n    var controls_container = document.createElement('div');\n\n    var zoomIn = document.createElement('input');\n    zoomIn.setAttribute('type', 'button');\n    zoomIn.setAttribute('value', '+');\n    var zoomOut = document.createElement('input');\n    zoomOut.setAttribute('type', 'button');\n    zoomOut.setAttribute('value', '-');\n    var reset = document.createElement('input');\n    reset.setAttribute('type', 'button');\n    reset.setAttribute('value', 'Reset');\n\n    controls_container.appendChild(reset);\n\n    reset.addEventListener('click', function () {\n        zoomElement.zoom = zoomElement.defaultZoom || value;\n    }, false);\n\n    var range = document.createElement('input');\n    range.setAttribute('min', min);\n    range.setAttribute('max', max);\n    range.setAttribute('step', precision);\n    range.setAttribute('value', value);\n    range.setAttribute('type', 'range');\n    range.setAttribute('style', '-webkit-appearance: slider-horizontal; width: 100%; position: absolute; top: 0px; bottom: 0px; margin-top: 0.5em; left: 100%; margin-left: -0.5em;');\n\n    if (range.type == 'range') {\n\n        range.addEventListener('change', function () {\n            zoomElement.zoom = this.value;\n        }, false);\n\n        var evFunction = null;\n        if (zoomElement.addEventListener) {\n            evFunction = zoomElement.addEventListener;\n        } else if (zoomElement.bind) {\n            evFunction = zoomElement.bind;\n        }\n\n        evFunction.apply(zoomElement, ['zoomChange', function () {\n            range.value = zoomElement.zoom;\n        }, false]);\n\n        reset.style.margin = '0px';\n        reset.style.display = 'block';\n        reset.style.position = 'absolute';\n        reset.style.top = '0px';\n\n        controls_container.appendChild(range);\n        controls_container.style.height = '100%';\n    } else {\n        if (!zoomIn.addEventListener) {\n            var addevlis = function addevlis(name, func) {\n                this.attachEvent(name, func);\n            };\n            zoomIn.addEventListener = addevlis;\n            reset.addEventListener = addevlis;\n            zoomOut.addEventListener = addevlis;\n        }\n        zoomIn.addEventListener('click', function () {\n            zoomElement.zoom += precision;\n        }, false);\n        zoomOut.addEventListener('click', function () {\n            zoomElement.zoom -= precision;\n        }, false);\n\n        zoomIn.style.margin = '0px';\n        zoomIn.style.display = 'block';\n        zoomIn.style.position = 'absolute';\n        zoomIn.style.top = '0px';\n        zoomIn.style.left = '29px';\n\n        zoomOut.style.margin = '0px';\n        zoomOut.style.display = 'block';\n        zoomOut.style.position = 'absolute';\n        zoomOut.style.top = '0px';\n\n        reset.style.margin = '0px';\n        reset.style.display = 'block';\n        reset.style.position = 'absolute';\n        reset.style.top = '23px';\n        reset.style.left = '3px';\n\n        controls_container.appendChild(zoomOut);\n        controls_container.appendChild(zoomIn);\n        controls_container.appendChild(reset);\n    }\n\n    this.addScrollZoomControls(zoomElement, controls_container, precision);\n\n    return controls_container;\n};\n\nDragger.addScrollBar = function (target, controlElement, scrollContainer) {\n    return;\n    var scroller = document.createElement('div');\n    while (scrollContainer.childNodes.length > 0) {\n        scrollContainer.removeChild(scrollContainer.firstChild);\n    }\n    scrollContainer.appendChild(scroller);\n    if (!scrollContainer.style.position) {\n        scrollContainer.style.position = 'relative';\n    }\n    scrollContainer.style.overflowX = 'scroll';\n    scrollContainer.style.overflowY = 'hidden';\n\n    scroller.style.position = 'absolute';\n    scroller.style.left = '0px';\n    scroller.style.width = '100%';\n    scroller.style.height = '100%';\n\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'scroll');\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'mouseenter');\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(scrollContainer, 'mouseenter', function () {\n        var size = 100 * target.getTotalLength() / target.getVisibleLength();\n        scroller.cached_width = scroller.clientWidth / size;\n        disabled = true;\n        scrollContainer.scrollLeft += 1;\n        scrollContainer.scrollLeft -= 1;\n        setTimeout(function () {\n            disabled = false;\n        }, 0);\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'scroll', scroll_func);\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(scrollContainer, 'scroll', scroll_func);\n    });\n    var disabled = false;\n\n    if (window.matchMedia) {\n        window.matchMedia('print').addListener(function (matcher) {\n            disabled = true;\n            setTimeout(function () {\n                disabled = false;\n            }, 0);\n        });\n    }\n    var scroll_func = function scroll_func() {\n        if (disabled || !console) {\n            return;\n        }\n        if (document.createEvent) {\n            var evObj = document.createEvent('Events');\n            evObj.initEvent('panstart', false, true);\n            controlElement.dispatchEvent(evObj);\n        }\n        var size = 100 * target.getTotalLength() / target.getVisibleLength();\n        var width = scroller.cached_width ? parseInt(scroller.cached_width * size) : scroller.clientWidth;\n        target.setLeftPosition(parseInt(scrollContainer.scrollLeft * target.getTotalLength() / width));\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(controlElement, 'panend');\n    };\n\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(scrollContainer, 'scroll', scroll_func);\n\n    var left_setter;\n\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(controlElement, 'pan', function () {\n        cancelAnimationFrame(left_setter);\n        var size = 100 * target.getTotalLength() / target.getVisibleLength();\n        scroller.style.width = parseInt(size) + '%';\n        var width = scroller.cached_width ? parseInt(scroller.cached_width * size) : scroller.clientWidth;\n        scroller.cached_width = width / size;\n\n        var left_shift = parseInt(width * (target.getLeftPosition() / target.getTotalLength()));\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(scrollContainer, 'scroll', scroll_func);\n        left_setter = requestAnimationFrame(function () {\n            // Rendering bottleneck\n            scrollContainer.scrollLeft = left_shift;\n        });\n    });\n};\n\n/**\n * Connect the scroll wheel to the controls to control zoom\n */\nDragger.addScrollZoomControls = function (target, controlElement, precision) {\n    precision = precision || 0.5;\n    var self;\n\n    if (this.enabled === null) {\n        self = { 'enabled': true };\n    } else {\n        self = this;\n    }\n    var hookEvent = function hookEvent(element, eventName, callback) {\n        if (typeof element == 'string') {\n            element = document.getElementById(element);\n        }\n\n        if (element === null) {\n            return;\n        }\n\n        if (element.addEventListener) {\n            if (eventName == 'mousewheel') {\n                element.addEventListener('DOMMouseScroll', callback, false);\n                element.addEventListener('wheel', callback, false);\n            }\n            element.addEventListener(eventName, callback, false);\n        } else if (element.attachEvent) {\n            element.attachEvent(\"on\" + eventName, callback);\n        }\n    };\n\n    var mousePosition = function mousePosition(evt) {\n        if (!self.enabled) {\n            return;\n        }\n        var posx = 0;\n        var posy = 0;\n        if (!evt) {\n            evt = window.event;\n        }\n        if (evt.pageX || evt.pageY) {\n            posx = evt.pageX;\n            posy = evt.pageY;\n        } else if (evt.clientX || evt.clientY) {\n            posx = evt.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n            posy = evt.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n        }\n\n        var p = {};\n\n        if (controlElement.nodeName == 'svg') {\n            p = controlElement.createSVGPoint();\n            p.x = posx;\n            p.y = posy;\n            /* Fix for mouse position in firefox - http://jsfiddle.net/JNKgR/6/ */\n            var rootCTM = controlElement.firstElementChild.getScreenCTM();\n            self.matrix = rootCTM.inverse();\n            p = p.matrixTransform(self.matrix);\n        } else {\n            p.x = posx;\n            p.y = posy;\n        }\n        return p;\n    };\n\n    var mouseWheel = function mouseWheel(e) {\n        if (!self.enabled) {\n            return;\n        }\n        e = e ? e : window.event;\n        var wheelData = e.detail ? e.detail * -1 : e.wheelDelta;\n        if (!wheelData) {\n            wheelData = e.deltaY;\n        }\n        target.zoomCenter = mousePosition(e);\n\n        if (wheelData > 0) {\n            target.zoom = target.zoom += precision;\n        } else {\n            target.zoom = target.zoom -= precision;\n        }\n\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n\n        e.returnValue = false;\n        e.stopPropagation();\n\n        return false;\n    };\n\n    var isFF = false;\n\n    if (navigator.userAgent.indexOf('Gecko') >= 0) {\n        isFF = parseFloat(navigator.userAgent.split('Firefox/')[1]) || undefined;\n    }\n\n    if (isFF && typeof svgweb != 'undefined' && svgweb.getHandlerType() == 'native') {\n        hookEvent(controlElement, 'mousewheel', mouseWheel);\n    } else {\n        hookEvent(controlElement, 'mousewheel', mouseWheel);\n    }\n\n    hookEvent(controlElement, 'mousemove', function (e) {\n        if (!self.enabled) {\n            return;\n        }\n        if (target.zoomCenter && Math.abs(target.zoomCenter.x - mousePosition(e).x) > 100) {\n            target.zoomCenter = null;\n            target.zoomLeft = null;\n        }\n    });\n\n    return self;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Dragger);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/Dragger.js\n");

/***/ }),

/***/ "./js/lib/GatorDataReader.js":
/*!***********************************!*\
  !*** ./js/lib/GatorDataReader.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MascpService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _ClustalRunner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ClustalRunner */ \"./js/lib/ClustalRunner.js\");\n/* harmony import */ var _UniprotReader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UniprotReader */ \"./js/lib/UniprotReader.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/**\n * @fileOverview    Retrieve data from the Gator web service\n */\n\n\n\n\n\n\nvar localhosts = ['localhost', '10.0.2.2'];\nvar url_base = localhosts.indexOf(window.location.hostname) >= 0 ? 'https://test.glycocode.com/api' : '/api';\nvar cloudfront_host = '';\n\nvar data_parser = function data_parser(data) {\n  var doc = this.datasetname || 'combined';\n  if (!data || !data.data) {\n    return this;\n  }\n  var actual_data = data.data.filter(function (set) {\n    return set.dataset.indexOf(doc) >= 0;\n  })[0] || { 'data': [] };\n\n  if (doc.split(',').length > 1) {\n    doc = doc.split(',');\n    var data_by_mime = {};\n    data.data.filter(function (set) {\n      return doc.indexOf(set.dataset) >= 0;\n    }).forEach(function (set) {\n      var mimetype = set.metadata.mimetype;\n      set.data.forEach(function (dat) {\n        dat.dataset = set.dataset;\n        dat.acc = set.acc;\n        if (set.metadata.sample) {\n          dat.species = set.metadata.sample.species;\n        }\n      });\n      data_by_mime[mimetype] = (data_by_mime[mimetype] || []).concat(set.data);\n    });\n    actual_data = { 'data': data_by_mime };\n  }\n\n  if (doc == 'glycodomain') {\n    actual_data = data.data.filter(function (set) {\n      return set.metadata.mimetype == 'application/json+glycodomain';\n    })[0] || { 'data': [] };\n    console.log(actual_data);\n  }\n  if (doc == 'combined' || doc == 'homology' || doc == 'predictions') {\n    var data_by_mime = {};\n    data.data.forEach(function (set) {\n      var mimetype = set.metadata.mimetype;\n      if (!mimetype) {\n        return;\n      }\n      set.data.forEach(function (dat) {\n        dat.dataset = set.dataset;\n        dat.acc = set.acc;\n        if (set.metadata.sample) {\n          dat.species = set.metadata.sample.species;\n        }\n      });\n      data_by_mime[mimetype] = (data_by_mime[mimetype] || []).concat(set.data);\n    });\n    actual_data = { 'data': data_by_mime };\n  }\n  if (doc == 'homology') {\n    actual_data.alignments = data.data.filter(function (set) {\n      return set.dataset == 'homology_alignment';\n    })[0].data;\n  }\n  this._raw_data = actual_data;\n  return this;\n};\n\n/** Default class constructor\n */\nconst GatorDataReader = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buildService(data_parser);\n\nGatorDataReader.prototype.requestData = function () {\n  var reader_conf = {\n    type: \"GET\",\n    dataType: \"json\",\n    data: {}\n  };\n  var acc = (this._requestset || 'combined') + '/' + (this.agi || this.acc).toLowerCase();\n  var gatorURL = this._endpointURL.slice(-1) == '/' ? this._endpointURL + acc : this._endpointURL + '/' + acc;\n  reader_conf.auth = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_AUTH_TOKEN;\n  reader_conf.api_key = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_CLIENT_ID;\n  reader_conf.session_cache = true;\n  reader_conf.url = gatorURL;\n  return reader_conf;\n};\n\nvar id_token;\n\nObject.defineProperty(GatorDataReader, 'server', {\n  get: function get() {\n    return url_base.replace('/api', '');\n  },\n  set: function set(url) {\n    url_base = url.replace('/$', '') + '/api';\n  }\n});\n\nObject.defineProperty(GatorDataReader, 'ID_TOKEN', {\n  get: function get() {\n    return id_token;\n  },\n  set: function set(token) {\n    id_token = token;\n    authenticating_promise = null;\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(GatorDataReader, 'idtoken');\n  }\n});\n\nvar is_anonymous;\n\nObject.defineProperty(GatorDataReader, 'anonymous', {\n  get: function get() {\n    return is_anonymous;\n  },\n  set: function set(anon) {\n    is_anonymous = anon;\n    id_token = null;\n    authenticating_promise = null;\n  }\n});\n\nvar authenticating_promise;\n\nvar anonymous_login = function anonymous_login() {\n  return new Promise(function (resolve, reject) {\n    _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Service.request({ 'url': url_base + '/login?cachebuster=' + new Date().getTime(),\n      'type': 'GET'\n    }, function (err, token) {\n      if (err) {\n        reject(err);\n      } else {\n        var auth_token = JSON.parse(token);\n        if (typeof auth_token == 'string') {\n          auth_token = { id_token: auth_token };\n        }\n        GatorDataReader.ID_TOKEN = auth_token.id_token;\n        resolve(url_base);\n      }\n    }, true);\n  });\n};\n\nvar reading_was_ok = true;\n\nvar reauth_reader = function reauth_reader(reader_class) {\n  var current_retrieve = reader_class.prototype.retrieve;\n  reader_class.prototype.retrieve = function () {\n    var current_arguments = [].slice.call(arguments);\n    var self = this;\n    this.bind('error', function (err) {\n      if (err.status == 401 || err.status == 403) {\n        if (!self.tried_auth) {\n          self.unbind('error');\n          self.tried_auth = true;\n          if (reading_was_ok) {\n            delete _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_AUTH_TOKEN;\n            GatorDataReader.ID_TOKEN = null;\n            authenticating_promise = null;\n            _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(GatorDataReader, 'unauthorized');\n            reading_was_ok = false;\n          }\n          authenticate_gator().catch(function (err) {\n            console.log(\"Error after auth\", err);\n            throw err;\n          }).then(function () {\n            reading_was_ok = true;\n            self.retrieve.apply(self, current_arguments);\n          }).catch(function (err) {\n            console.log(\"Died on doing the reauth\", err);\n          });\n        }\n      }\n    });\n    current_retrieve.apply(self, current_arguments);\n  };\n};\n\nreauth_reader(GatorDataReader);\n\nwindow.addEventListener(\"unhandledrejection\", function (err, promise) {\n  if (err.reason && err.reason.message == 'Unauthorized' && !err.reason.handled) {\n    err.reason.handled = true;\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(GatorDataReader, 'unauthorized');\n    return;\n  }\n  console.log(err);\n});\n\nvar authenticate_gator = function authenticate_gator() {\n  if (authenticating_promise) {\n    return authenticating_promise;\n  }\n  // Need to put this somewhere for the moment\n  // Temporary code until we move to a single host\n  _ClustalRunner__WEBPACK_IMPORTED_MODULE_1__[\"default\"].SERVICE_URL = url_base + '/tools/clustal';\n  _UniprotReader__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SERVICE_URL = url_base + '/data/latest/uniprot';\n  if (!_UniprotReader__WEBPACK_IMPORTED_MODULE_2__[\"default\"].reauthed) {\n    reauth_reader(_UniprotReader__WEBPACK_IMPORTED_MODULE_2__[\"default\"]);\n  }\n  _UniprotReader__WEBPACK_IMPORTED_MODULE_2__[\"default\"].reauthed = true;\n\n  if (!GatorDataReader.ID_TOKEN && GatorDataReader.anonymous) {\n    console.log(\"Doing an anonymous login\");\n    authenticating_promise = anonymous_login().then(function () {\n      authenticating_promise = null;\n    }).then(authenticate_gator);\n    return authenticating_promise;\n  }\n\n  if (!GatorDataReader.ID_TOKEN && !GatorDataReader.anonymous) {\n    console.log(\"We cannot log in without an ID TOKEN, waiting for token\");\n\n    authenticating_promise = new Promise(function (resolve, reject) {\n      var resolver = function resolver() {\n        console.log(\"Got a new ID token\");\n        _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].remove(GatorDataReader, 'idtoken', resolver);\n        _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_AUTH_TOKEN = GatorDataReader.ID_TOKEN;\n        resolve(url_base);\n      };\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].add(GatorDataReader, 'idtoken', resolver);\n      setTimeout(function () {\n        console.log(\"Timed out logging in\");\n        reject(new Error('Timed out'));\n      }, 5000);\n    });\n    return authenticating_promise;\n  }\n\n  authenticating_promise = new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_AUTH_TOKEN = GatorDataReader.ID_TOKEN;\n      _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(GatorDataReader, 'auth', [url_base]);\n      resolve(url_base);\n    }, 0);\n  });\n\n  return authenticating_promise;\n};\n\nGatorDataReader.prototype.setupSequenceRenderer = function (renderer) {\n  var self = this;\n  if (this.datasetname !== 'homology') {\n    return;\n  }\n  renderer.forceTrackAccs = true;\n  renderer.addAxisScale('homology', function (pos, accession, inverse) {\n    if (!self.result || self.agi === accession.name || self.acc === accession.name) {\n      return pos;\n    }\n    if (inverse) {\n      return self.result.calculateSequencePositionFromPosition(self.agi || self.acc, accession.name.toLowerCase(), pos);\n    }\n    return self.result.calculatePositionForSequence(self.agi || self.acc, accession.name.toLowerCase(), pos);\n  });\n};\n\n(function () {\n  var normalise_insertions = function normalise_insertions(inserts) {\n    var pos;\n    var positions = [];\n    var result_data = {};\n    for (pos in inserts) {\n      if (inserts.hasOwnProperty(pos) && parseInt(pos) >= -1) {\n        positions.push(parseInt(pos));\n      }\n    }\n    positions = positions.sort(function sortfunction(a, b) {\n      return a - b;\n    });\n\n    // From highest to lowest position, loop through and\n    // subtract the lengths of previous subtratctions from\n    // the final position value.\n\n    for (var i = positions.length - 1; i >= 0; i--) {\n      var j = i - 1;\n      pos = parseInt(positions[i]);\n      var value = inserts[pos];\n      while (j >= 0) {\n        pos -= inserts[positions[j]].length;\n        j--;\n      }\n      if (!value.match(/^\\s+$/)) {\n        result_data[pos + 1] = value + (result_data[pos + 1] || '');\n      }\n    }\n    //    delete result_data[0];\n    return result_data;\n  };\n\n  var splice_char = function splice_char(seqs, index, insertions) {\n    for (var i = 0; i < seqs.length; i++) {\n      var seq = seqs[i].toString();\n      if (seq.charAt(index) != '-') {\n        if (!insertions[i]) {\n          insertions[i] = {};\n          insertions[i][-1] = '';\n        }\n        insertions[i][index - 1] = seq.charAt(index);\n        if (insertions[i][index] && insertions[i][index].match(/\\w/)) {\n          insertions[i][index - 1] += insertions[i][index];\n          delete insertions[i][index];\n        }\n      } else {\n        if (insertions[i]) {\n          insertions[i][index - 1] = ' ';\n          if ((insertions[i][index] || '').match(/^\\s+$/)) {\n            insertions[i][index - 1] += insertions[i][index];\n            delete insertions[i][index];\n          }\n        }\n      }\n      seqs[i] = seq.slice(0, index) + seq.slice(index + 1);\n    }\n  };\n\n  GatorDataReader.Result.prototype.makeSequences = function (ref_acc, alignments) {\n    var seqs = [];\n    var insertions = [];\n    var accs = [];\n    var ref_cigar = '';\n    alignments.forEach(function (align) {\n      if (!align.cigar && align.cigar_line) {\n        align.cigar = align.cigar_line;\n        delete align.cigar_line;\n      }\n      // If the cigar line hasn't already been revivified\n      if (!align.cigar.match(/^[\\-\\.]*$/)) {\n        // Expand out the cigar line replacing M with . and D with -\n        align.cigar = align.cigar.match(/\\d*[MD]/g).map(function (bit) {\n          return new Array((parseInt(bit.slice(0, -1)) || 1) + 1).join(bit.slice(-1) == 'M' ? '.' : '-');\n        }).join('');\n      }\n      if (align.uniprot !== ref_acc.toUpperCase()) {\n        accs.push(align.uniprot);\n        seqs.push(align.cigar);\n      } else {\n        ref_cigar = align.cigar;\n      }\n    });\n    var aligning_seq = ref_cigar,\n        i = aligning_seq.length - 1;\n    for (i; i >= 0; i--) {\n      if (aligning_seq.charAt(i) == '-') {\n        splice_char(seqs, i, insertions);\n      }\n    }\n    for (i = 0; i < seqs.length; i++) {\n      if (insertions[i]) {\n        insertions[i] = normalise_insertions(insertions[i]);\n        var seq = seqs[i];\n        seqs[i] = { 'sequence': seq, 'insertions': insertions[i] };\n        seqs[i].toString = function () {\n          return this.sequence;\n        };\n      }\n    }\n    var result = {};\n    accs.forEach(function (acc, idx) {\n      result[acc.toLowerCase()] = seqs[idx];\n    });\n    result[ref_acc.toLowerCase()] = ref_cigar.replace('-', '');\n    return result;\n  };\n})();\n\nGatorDataReader.Result.prototype.calculatePositionForSequence = function (ref_acc, idx, pos) {\n  if (ref_acc.toLowerCase() === idx.toLowerCase()) {\n    return pos;\n  }\n  if (!this.sequences) {\n    this.sequences = this.makeSequences(ref_acc, this._raw_data.alignments);\n  }\n\n  var inserts = this.sequences[idx.toLowerCase()].insertions || {};\n  var result = pos;\n  var actual_position = 0;\n  var seq = this.sequences[idx.toLowerCase()].toString();\n  for (var i = 0; i < seq.length; i++) {\n    if (inserts[i]) {\n      actual_position += inserts[i].length;\n    }\n    actual_position += 1;\n    if (seq.charAt(i) == '-') {\n      actual_position -= 1;\n    }\n    if (pos <= actual_position) {\n      if (pos == actual_position) {\n        return i + 1;\n      } else {\n        if (i == 0) {\n          i = 1;\n        }\n        return -1 * i;\n      }\n    }\n  }\n  return -1 * seq.length;\n};\n\nGatorDataReader.Result.prototype.calculateSequencePositionFromPosition = function (ref_acc, idx, pos) {\n  if (ref_acc.toLowerCase() === idx.toLowerCase()) {\n    return pos;\n  }\n  if (!this.sequences) {\n    this.sequences = this.makeSequences(ref_acc, this._raw_data.alignments);\n  }\n  var inserts = this.sequences[idx.toLowerCase()].insertions || {};\n  var result = pos;\n  var actual_position = 0;\n  var seq = this.sequences[idx.toLowerCase()].toString();\n  for (var i = 0; i < pos; i++) {\n    if (inserts[i]) {\n      actual_position += inserts[i].length;\n    }\n    actual_position += 1;\n    if (seq.charAt(i) == '-') {\n      actual_position -= 1;\n    }\n  }\n  if (actual_position == 0) {\n    actual_position += 1;\n  }\n  return actual_position;\n};\n\nvar default_result_proto = GatorDataReader.Result.prototype;\n\nObject.defineProperty(GatorDataReader.prototype, 'datasetname', {\n  get: function get() {\n    return this._datasetname;\n  },\n  set: function set(value) {\n    this._datasetname = value;\n    this._requestset = value === 'homology' ? 'homology' : 'combined';\n    var alt_result = function alt_result(data) {\n      this.datasetname = value;\n      GatorDataReader.Result.apply(this, [data]);\n      return this;\n    };\n    alt_result.prototype = default_result_proto;\n    this.__result_class = alt_result;\n  }\n});\nGatorDataReader.authenticate = function () {\n  return authenticate_gator();\n};\n\nvar running_promises = {};\n\nvar new_retrieve = function new_retrieve(acc) {\n  var self = this;\n  var orig_arguments = [].slice.call(arguments);\n  if (running_promises[acc + '-' + this._requestset]) {\n    running_promises[acc + '-' + this._requestset].then(function (result) {\n      GatorDataReader.prototype.retrieve.apply(self, orig_arguments);\n    }).catch(function (err) {\n      authenticate_gator().then(function () {\n        new_retrieve.apply(self, orig_arguments);\n      });\n    });\n    return;\n  }\n  running_promises[acc + '-' + this._requestset] = new Promise(function (resolve, reject) {\n    self.bind('resultReceived', resolve);\n    self.once('error', reject);\n  });\n\n  running_promises[acc + '-' + this._requestset].catch(function (err) {\n    authenticate_gator().then(function () {\n      running_promises[acc + '-' + self._requestset] = null;\n    });\n  });\n\n  GatorDataReader.prototype.retrieve.apply(self, orig_arguments);\n};\n\nGatorDataReader.createReader = function (doc) {\n  // Do the auth dance here\n\n  var reader = new GatorDataReader(null, url_base + '/data/latest/');\n  console.log(doc);\n  reader.datasetname = doc;\n  // MASCP.Service.CacheService(reader);\n\n  authenticate_gator().then(function () {\n    reader.retrieve = new_retrieve;\n    _bean__WEBPACK_IMPORTED_MODULE_3__[\"default\"].fire(reader, 'ready');\n  });\n\n  return reader;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GatorDataReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/GatorDataReader.js\n");

/***/ }),

/***/ "./js/lib/GenomeReader.js":
/*!********************************!*\
  !*** ./js/lib/GenomeReader.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MascpService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/** @fileOverview   Classes for reading data from MyGene.info */\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Mygene.info for given sequences\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst GenomeReader = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buildService(function (data) {\n    this._raw_data = data;\n    return this;\n});\n\nGenomeReader.SERVICE_URL = 'http://mygene.info/v2/query';\nGenomeReader.prototype.requestData = function () {\n    this.acc = this.agi;\n\n    if (!this.geneid) {\n        return {\n            type: \"GET\",\n            dataType: \"json\",\n            url: 'http://mygene.info/v2/query',\n            data: { 'q': 'uniprot:' + this.acc.toUpperCase(),\n                'fields': 'entrezgene',\n                'email': 'joshi%40sund.ku.dk'\n            }\n        };\n    } else if (!this.acc) {\n        this.acc = this.agi = \"\" + this.geneid;\n    }\n\n    if (!this.exons) {\n        return {\n            type: \"GET\",\n            url: 'http://mygene.info/v2/gene/' + this.geneid,\n            dataType: \"json\",\n            data: {\n                'fields': 'exons_hg19'\n            }\n        };\n    }\n\n    return {\n        type: \"GET\",\n        dataType: \"txt\",\n        url: \"http://www.uniprot.org/mapping/\",\n        data: {\n            \"from\": \"REFSEQ_NT_ID\",\n            \"to\": \"ACC\",\n            \"format\": \"tab\",\n            \"query\": Object.keys(this.exons).join(' ')\n        }\n    };\n};\n\n(function (serv) {\n    var defaultDataReceived = serv.prototype._dataReceived;\n\n    serv.prototype._dataReceived = function (data, status) {\n        var self = this;\n        if (data.data && status === \"db\") {\n            self.sequences = [{ \"agi\": \"genome\" }];\n            Object.keys(data.data).forEach(function (uniprot) {\n                self.sequences.push({ \"agi\": uniprot.toLowerCase() });\n            });\n            return defaultDataReceived.call(this, data, status);\n        }\n        if (status < 200 || status >= 400) {\n            return defaultDataReceived.call(this, null, status);\n        }\n\n        if (!this.geneid) {\n            this.geneid = data.hits[0].entrezgene;\n            this.retrieve(this.acc || this.agi);\n            return;\n        }\n        if (!this.exons) {\n            this.exons = data.exons_hg19 || data.exons;\n            if (!this.nt_mapping) {\n                this.retrieve(this.acc || this.agi);\n                return;\n            }\n            data = this.nt_mapping.map(function (map) {\n                return map.join('\\t');\n            }).join('\\n');\n        }\n        var mapped = {};\n        self.sequences = [{ \"agi\": \"genome\" }];\n        (data || \"\").split('\\n').forEach(function (row) {\n            var bits = row.split('\\t');\n            if (!bits[1]) {\n                return;\n            }\n            var uniprot = bits[1].toLowerCase();\n            var nuc = bits[0];\n            nuc = nuc.replace(/\\..*$/, '');\n            if (!self.exons[nuc]) {\n                return;\n            }\n            if (!self.agi || !self.acc) {\n                self.acc = uniprot;\n                self.agi = uniprot;\n            }\n\n            if (!mapped[uniprot]) {\n                mapped[uniprot] = [];\n            }\n            self.exons[nuc]._id = nuc;\n            mapped[uniprot].push(self.exons[nuc]);\n            self.sequences.push({ \"agi\": uniprot.toLowerCase() });\n        });\n        return defaultDataReceived.call(this, { \"data\": mapped }, status);\n    };\n})(GenomeReader);\n\nGenomeReader.Result.prototype.getSequences = function () {\n    var results = [];\n    var cds_data = this._raw_data.data;\n    var uniprots = Object.keys(cds_data);\n    var min = max = null;\n    uniprots.forEach(function (uniprot) {\n        var ends = cds_data[uniprot].map(function (cd) {\n            if (Array.isArray(cd)) {\n                cd = cd.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n            }\n            return [cd.txstart, cd.txend];\n        });\n        ends.forEach(function (cd) {\n            if (!min || cd[0] < min) {\n                min = cd[0];\n            }\n            if (!max || cd[1] > max) {\n                max = cd[1];\n            }\n        });\n    });\n    results = [Array(Math.floor((max - min) / 3)).join('.')];\n    this.min = min;\n    this.max = max;\n    return results;\n};\n\nGenomeReader.Result.prototype.getIntrons = function (margin) {\n    var self = this;\n    var results = [];\n    var uprots = Object.keys(self._raw_data.data);\n    uprots.forEach(function (up) {\n        var cds = self._raw_data.data[up];\n        cds.forEach(function (target_cds) {\n            if (Array.isArray(target_cds)) {\n                target_cds = target_cds.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n                if (!target_cds) {\n                    return null;\n                }\n            }\n\n            var exons = target_cds.exons;\n            var target_position;\n\n            for (var i = 0; i < exons.length; i++) {\n                if (i == 0) {\n                    results.push([self.min, exons[i][0] - margin]);\n                } else {\n                    results.push([exons[i - 1][1] + margin, exons[i][0] - margin]);\n                }\n                if (i == exons.length - 1) {\n                    results.push([exons[i][1] + margin, self.max]);\n                }\n                if (results.slice(-1)[0][0] > results.slice(-1)[0][1]) {\n                    results.splice(results.length - 1, 1);\n                }\n            }\n        });\n    });\n    return results;\n};\n\nGenomeReader.prototype.proteinLength = function (target_cds) {\n    var exons = target_cds.exons;\n    var total = 0;\n    for (var i = 0; i < exons.length; i++) {\n        if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n            continue;\n        }\n        if (target_cds.cdsend < exons[i][0]) {\n            continue;\n        }\n\n        var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n        var end = target_cds.cdsend < exons[i][1] ? target_cds.cdsend : exons[i][1];\n        total += end - start;\n    }\n    return Math.floor(total / 3) - 1;\n};\n\nGenomeReader.prototype.calculateSequencePositionFromProteinPosition = function (idx, pos) {\n    var self = this;\n    var wanted_identifier = idx;\n    var cds = self.result._raw_data.data[wanted_identifier.toLowerCase()];\n    if (!cds) {\n        return -1;\n    }\n\n    if (!cds.txstart) {\n        cds = cds.map(function (cd) {\n            if (Array.isArray(cd)) {\n                cd = cd.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n                if (!cd) {\n                    return null;\n                }\n            }\n            return cd;\n        });\n    }\n\n    var target_cds = cds[0] || {};\n    var exons = target_cds.exons || [];\n\n    var position_genome = Math.floor(pos / 3);\n\n    var target_position = 0;\n\n    if (pos < target_cds.cdsstart) {\n        target_position = 6;\n        if (target_cds.strand == -1) {\n            target_position = 3;\n        }\n    }\n\n    if (pos > target_cds.cdsend) {\n        target_position = self.proteinLength(target_cds) * 3;\n        if (target_cds.strand == 1) {\n            target_position += 3;\n        }\n    }\n    if (target_position == 0) {\n        for (var i = 0; i < exons.length; i++) {\n            if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n                continue;\n            }\n            var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n            var end = target_cds.cdsend < exons[i][1] ? target_cds.cdsend : exons[i][1];\n\n            if (pos < start) {\n                break;\n            }\n\n            if (pos <= end && pos >= start) {\n                target_position += pos - start;\n                break;\n            } else {\n                target_position += end - start;\n            }\n        }\n    }\n    target_position = Math.floor(target_position / 3) - 1;\n\n    if (target_cds.strand == -1) {\n        target_position = self.proteinLength(target_cds) - target_position;\n    }\n\n    return target_position;\n};\n\nGenomeReader.prototype.calculateProteinPositionForSequence = function (idx, pos) {\n    var self = this;\n    var wanted_identifier = idx;\n    var cds = self.result._raw_data.data[wanted_identifier.toLowerCase()];\n    if (!cds) {\n        return -1;\n    }\n\n    if (!cds.txstart) {\n        cds = cds.map(function (cd) {\n            if (Array.isArray(cd)) {\n                cd = cd.filter(function (c) {\n                    return c.chr.match(/^[\\dXx]+$/);\n                })[0];\n                if (!cd) {\n                    return null;\n                }\n            }\n            return cd;\n        });\n    }\n\n    var target_cds = cds[0] || {};\n    var exons = target_cds.exons || [];\n\n    if (target_cds.strand == -1) {\n        pos = self.proteinLength(target_cds) - pos;\n    }\n    var position_genome = pos * 3;\n\n    var target_position;\n\n    for (var i = 0; i < exons.length; i++) {\n        if (target_cds.cdsstart > exons[i][1] & target_cds.cdsstart > exons[i][0]) {\n            continue;\n        }\n        var start = target_cds.cdsstart > exons[i][0] ? target_cds.cdsstart : exons[i][0];\n        var bases = exons[i][1] - start;\n        if (bases >= position_genome) {\n            target_position = start + position_genome;\n            break;\n        } else {\n            position_genome -= bases;\n        }\n    }\n    return target_position;\n};\n\nGenomeReader.prototype.calculatePositionForSequence = function (idx, pos) {\n    var self = this;\n    var wanted_identifier = self.sequences[idx].agi;\n    var empty_regions = [];\n    var calculated_pos = pos;\n\n    if (wanted_identifier == 'genome') {\n        // Don't change the genome identifier\n    } else {\n        calculated_pos = self.calculateProteinPositionForSequence(idx, pos);\n    }\n\n    for (var i = 0; i < empty_regions.length; i++) {\n        if (pos > empty_regions[i][1]) {\n            calculated_pos -= empty_regions[i][1] - empty_regions[i][0];\n        }\n        if (pos < empty_regions[i][1] && pos > empty_regions[i][0]) {\n            calculated_pos = -1;\n        }\n    }\n\n    return calculated_pos;\n};\n\n(function (serv) {\n    var get_exon_boxes = function get_exon_boxes(result) {\n        var cds_data = result._raw_data.data;\n        var uniprots = Object.keys(cds_data);\n        var max = result.max;\n        var min = result.min;\n        var return_data = [];\n        var base_offset = 0;\n        uniprots.forEach(function (uniprot) {\n            var ends = cds_data[uniprot].map(function (cd, idx) {\n                if (Array.isArray(cd)) {\n                    cd = cd.filter(function (c) {\n                        return c.chr.match(/^[\\dXx]+$/);\n                    })[0];\n                    if (!cd) {\n                        return;\n                    }\n                }\n\n                var exons = cd.exons;\n                var color = idx == 0 ? '#999' : '#f99';\n                exons.forEach(function (exon) {\n                    return_data.push({ \"aa\": 1 + exon[0], \"type\": \"box\", \"width\": exon[1] - exon[0], \"options\": { \"offset\": base_offset, \"height_scale\": 1, \"fill\": color, \"merge\": false } });\n                    if (cd.strand > 0) {\n                        return_data.push({ \"aa\": exon[1] - 1, \"type\": \"marker\", \"options\": { \"height\": 4, \"content\": { \"type\": \"right_triangle\", \"fill\": '#aaa' }, \"offset\": base_offset + 2, \"bare_element\": true } });\n                    } else {\n                        return_data.push({ \"aa\": exon[0] + 1, \"type\": \"marker\", \"options\": { \"height\": 4, \"content\": { \"type\": \"left_triangle\", \"fill\": '#aaa' }, \"offset\": base_offset + 2, \"bare_element\": true } });\n                    }\n                });\n                return_data.push({ \"aa\": cd.cdsstart, \"type\": \"box\", \"width\": 1, \"options\": { \"fill\": \"#0000ff\", \"height_scale\": 2, \"offset\": base_offset - 2, \"merge\": false } });\n                return_data.push({ \"aa\": cd.cdsend, \"type\": \"box\", \"width\": 1, \"options\": { \"fill\": \"#0000ff\", \"height_scale\": 2, \"offset\": base_offset - 2, \"merge\": false } });\n                base_offset += 1;\n            });\n            base_offset += 2;\n        });\n        return return_data;\n    };\n\n    var get_removed_labels = function get_removed_labels(result) {\n        var removed = result.removed_regions || [];\n        var results = [];\n        var max = result.max;\n        var min = result.min;\n        var cds_data = result._raw_data.data;\n        var uniprots = Object.keys(cds_data);\n        var total = uniprots.reduce(function (prev, up) {\n            return prev + cds_data[up].length;\n        }, 0);\n        removed.forEach(function (vals) {\n            var start = vals[0];\n            var end = vals[1];\n            var start_txt = Math.floor(start % 1e6 / 1000) + \"kb\";\n            var end_txt = Math.floor(end % 1e6 / 1000) + \"kb\";\n\n            results.push({ \"aa\": start - 3, \"type\": \"text\", \"options\": { \"txt\": start_txt, \"fill\": \"#000\", \"height\": 4, \"offset\": -5 * total, \"align\": \"right\" } });\n            results.push({ \"aa\": end + 3, \"type\": \"text\", \"options\": { \"txt\": end_txt, \"fill\": \"#000\", \"height\": 4, \"offset\": total * 5, \"align\": \"left\" } });\n            results.push({ \"aa\": start - 1, \"type\": \"box\", width: end - start + 3, \"options\": { \"fill\": \"#999\", \"height_scale\": total * 3, \"offset\": -1 * total } });\n        });\n        return results;\n    };\n\n    var calculate_removed_regions = function calculate_removed_regions(result, margin) {\n        var introns = result.getIntrons(margin);\n\n        var intervals = [{ \"index\": result.min - 2, \"start\": true, \"idx\": -1 }, { \"index\": result.min, \"start\": false, \"idx\": -1 }];\n        introns.forEach(function (intron, idx) {\n            intervals.push({ \"index\": intron[0], \"start\": true, \"idx\": idx });\n            intervals.push({ \"index\": intron[1], \"start\": false, \"idx\": idx });\n        });\n\n        intervals.sort(function (a, b) {\n            if (a.index < b.index) {\n                return -1;\n            }\n            if (a.index > b.index) {\n                return 1;\n            }\n            if (a.index == b.index) {\n                return a.start ? -1 : 1;\n            }\n        });\n        var results = [];\n        intervals.forEach(function (intr, idx) {\n            if (intr.start && intervals[idx + 1] && intervals[idx + 1].start == false) {\n                if (intr.index != intervals[idx + 1].index && intervals[idx + 1].index != result.min) {\n                    results.push([intr.index, intervals[idx + 1].index]);\n                }\n            }\n        });\n        result.removed_regions = results;\n    };\n    var generate_scaler_function = function generate_scaler_function(reader) {\n        return function (in_pos, layer, inverse) {\n            var pos = in_pos;\n\n            if (!reader.result) {\n                return inverse ? pos * 3 : Math.floor(pos / 3);\n            }\n\n            var introns = reader.result.removed_regions || [];\n\n            if (inverse) {\n                pos = in_pos * 3;\n                calculated_pos = pos;\n                for (var i = 0; i < introns.length && pos > 0; i++) {\n                    var left_exon = i > 0 ? introns[i - 1] : [null, reader.result.min];\n                    var right_exon = introns[i] || [reader.result.max, null];\n                    pos -= right_exon[0] - left_exon[1];\n                    if (pos > 0) {\n                        calculated_pos += introns[i][1] - introns[i][0];\n                    }\n                }\n                return calculated_pos + reader.result.min;\n            }\n\n            var calculated_pos = pos - reader.result.min;\n            for (var i = 0; i < introns.length; i++) {\n                if (pos > introns[i][1]) {\n                    calculated_pos -= introns[i][1] - introns[i][0];\n                }\n                if (pos < introns[i][1] && pos > introns[i][0]) {\n                    calculated_pos = introns[i][1] - reader.result.min;\n                }\n            }\n            if (calculated_pos < 3) {\n                calculated_pos = 3;\n            }\n            return Math.floor(calculated_pos / 3);\n        };\n    };\n    Object.defineProperty(serv.prototype, 'exon_margin', {\n        set: function set(val) {\n            this._exon_margin = val;\n            if (this.result) {\n                calculate_removed_regions(this.result, val);\n                this.redrawIntrons();\n            }\n        },\n        get: function get() {\n            return this._exon_margin;\n        }\n    });\n\n    var redrawIntrons = function redrawIntrons(renderer, controller_name, scaler_function) {\n        var labs = [];\n        var zoomCheck = function zoomCheck() {\n            if (labs.length < 1 || !labs[0].parentNode) {\n                return;\n            }\n            var hidden = false;\n            for (var i = 0; !hidden && i < labs.length - 3; i += 3) {\n                if (labs[i].hasAttribute('display')) {\n                    hidden = true;\n                    continue;\n                }\n                if (labs[i].getBoundingClientRect().right > labs[i + 3].getBoundingClientRect().left) {\n                    hidden = true;\n                }\n            }\n            labs.forEach(function (lab) {\n                if (lab.nodeName == 'rect') {\n                    return;\n                }if (hidden) {\n                    lab.setAttribute('display', 'none');\n                } else {\n                    lab.removeAttribute('display');\n                }\n            });\n        };\n        renderer.bind('zoomChange', zoomCheck);\n\n        return function () {\n            var result = this.result;\n            renderer.sequence = Array(scaler_function(result.max)).join('.');\n\n            if (labs.length > 0) {\n                labs.forEach(function (lab) {\n                    renderer.remove(controller_name, lab);\n                });\n                labs = [];\n            }\n            var proxy_reader = {\n                agi: controller_name,\n                gotResult: function gotResult() {\n                    labs = renderer.renderObjects(controller_name, get_removed_labels(result));\n                    renderer.refresh();\n                    zoomCheck();\n                }\n            };\n            _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Service.prototype.registerSequenceRenderer.call(proxy_reader, renderer);\n            proxy_reader.gotResult();\n        };\n    };\n\n    serv.prototype.setupSequenceRenderer = function (renderer) {\n        var self = this;\n        renderer.addAxisScale('genome', function (pos, layer, inverse) {\n            if (layer && layer.genomic) {\n                return pos;\n            }\n            if (inverse) {\n                return self.calculateSequencePositionFromProteinPosition(layer.name, pos);\n            }\n            return self.calculateProteinPositionForSequence(layer.name, pos);\n        });\n        var controller_name = 'cds';\n        var redraw_alignments = function redraw_alignments(sequence_index) {\n            if (!sequence_index) {\n                sequence_index = 0;\n            }\n            _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer(controller_name, { 'fullname': 'Exons', 'color': '#000000' });\n            _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(controller_name).genomic = true;\n\n            if (renderer.trackOrder.indexOf(controller_name) < 0) {\n                renderer.trackOrder.push(controller_name);\n            }\n            renderer.showLayer(controller_name);\n\n            var result = this.result;\n\n            var aligned = result.getSequences();\n            var scaler_function = generate_scaler_function(self);\n\n            renderer.addAxisScale('removeIntrons', scaler_function);\n\n            calculate_removed_regions(self.result, self.exon_margin || 300);\n\n            if (!renderer.sequence) {\n                // Not sure what to do with this bit here\n\n                renderer.setSequence(Array(scaler_function(result.max)).join('.'))(function () {\n                    redraw_alignments(sequence_index);\n                });\n                return;\n            } else {\n                renderer.sequence = Array(scaler_function(result.max)).join('.');\n                renderer.redrawAxis();\n            }\n            var proxy_reader = {\n                agi: controller_name,\n                gotResult: function gotResult() {\n                    renderer.renderObjects(controller_name, get_exon_boxes(result));\n                }\n            };\n            _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Service.prototype.registerSequenceRenderer.call(proxy_reader, renderer);\n            proxy_reader.gotResult();\n\n            self.redrawIntrons = redrawIntrons(renderer, controller_name, scaler_function);\n            self.redrawIntrons();\n        };\n\n        this.bind('resultReceived', redraw_alignments);\n    };\n})(GenomeReader);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (GenomeReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/GenomeReader.js\n");

/***/ }),

/***/ "./js/lib/MascpService.js":
/*!********************************!*\
  !*** ./js/lib/MascpService.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n//\"use strict\";\n\n\n\n/**\n *  @fileOverview   Basic classes and defitions for the MASCP services\n */\n\n/** Convenience logging function. If there is no log function defined, add a log method that simply\n *  forwards the message on to the console.log.\n *  @function\n *  @param  {Object}    message Message to log\n */\n\n/**\n *  @namespace MASCP namespace\n */\nconst MASCP = {};\n\nif (Object.defineProperty && !MASCP.IE8) {\n    (function () {\n        var ready_callbacks = [];\n        var is_ready = false;\n        Object.defineProperty(MASCP, \"ready\", {\n            get: function get() {\n                if (ready_callbacks.length === 0 && !is_ready) {\n                    return false;\n                }\n                return function () {\n                    ready_callbacks.forEach(function (cb) {\n                        cb.call();\n                    });\n                };\n            },\n            set: function set(cb) {\n                if (cb === false || cb === true) {\n                    ready_callbacks = [];\n                    if (cb) {\n                        is_ready = true;\n                    }\n                    return is_ready;\n                } else {\n                    if (is_ready) {\n                        cb.call();\n                        return;\n                    }\n                    ready_callbacks.push(cb);\n                }\n            }\n        });\n    })();\n}\n\n/** Default constructor for Services\n *  @class      Super-class for all MASCP services to retrieve data from\n *              proteomic databases. Sub-classes of this class override methods\n *              to change how requests are built, and how the data is parsed.\n *  @param      {String}    agi             AGI to retrieve data for\n *  @param      {String}    endpointURL     Endpoint for the service\n */\nMASCP.Service = function (agi, endpointURL) {};\n\nvar ie = function () {\n\n    var undef,\n        v = 3,\n        div = document.createElement('div'),\n        all = div.getElementsByTagName('i');\n\n    do {\n        div.innerHTML = '<!--[if gt IE ' + ++v + ']><i></i><![endif]-->';\n    } while (all[0]);\n\n    return v > 4 ? v : undef;\n}();\nif (ie) {\n    if (ie === 7) {\n        MASCP.IE = true;\n        MASCP.IE7 = true;\n    }\n    if (ie === 8) {\n        MASCP.IE = true;\n        MASCP.IE8 = true;\n    }\n    if (ie == 9) {\n        MASCP.IE = true;\n        MASCP.IE9 = true;\n    }\n    MASCP.IE = true;\n}\n\n/** Build a data retrieval class that uses the given function to extract result data.\n *  @static\n *  @param  {Function}  dataExtractor   Function to extract data from the resultant data (passed as an argument\n *                                      to the function), and then populate the result object. The function is\n *                                      bound to a hash to populate data in to. When no data is passed to the\n *                                      function, the hash should be populated with default values.\n */\nMASCP.buildService = function (dataExtractor) {\n    var clazz = function clazz(agi, endpointURL) {\n        if (typeof endpointURL != 'undefined') {\n            this._endpointURL = endpointURL;\n        } else {\n            this._endpointURL = clazz.SERVICE_URL;\n        }\n        this.agi = agi;\n        return this;\n    };\n\n    clazz.Result = function (data) {\n        dataExtractor.apply(this, [data]);\n        return this;\n    };\n\n    clazz.prototype = MASCP.extend(new MASCP.Service(), {\n        '__class__': clazz,\n        '__result_class': clazz.Result,\n        '_endpointURL': null\n    });\n\n    clazz.Result.prototype = MASCP.extend(new MASCP.Service.Result(), {\n        '__class__': clazz.Result\n    });\n\n    clazz.Result.prototype = MASCP.extend(clazz.Result.prototype, dataExtractor.apply({}, []));\n\n    clazz.toString = function () {\n        for (var serv in MASCP) {\n            if (this === MASCP[serv]) {\n                return \"MASCP.\" + serv;\n            }\n        }\n    };\n\n    return clazz;\n};\n\nMASCP.cloneService = function (service, name) {\n    var new_service = MASCP.buildService(function () {\n        return this;\n    });\n    new_service.Result = service.Result;\n    new_service.prototype = new service();\n    MASCP[name] = new_service;\n    new_service.prototype['__class__'] = new_service;\n    return new_service;\n};\n\n(function () {\n    var already_seen_set = {};\n    var service_from_config = function service_from_config(set, pref, callback) {\n        if (!pref) {\n            return;\n        }\n        if (pref.type == \"liveClass\") {\n            var reader_class = MASCP[set];\n            callback.call(null, null, pref, new reader_class(null, pref.url));\n            return;\n        }\n        if (pref.type == \"gatorURL\") {\n            var reader = new MASCP.UserdataReader(null, set);\n            reader.datasetname = pref.title;\n            reader.requestData = function () {\n                var agi = this.agi.toLowerCase();\n                var urlpart = set.split('#')[0];\n                var gatorURL = urlpart.slice(-1) == '/' ? urlpart + agi : urlpart + '/' + agi;\n                return {\n                    type: \"GET\",\n                    dataType: \"json\",\n                    url: gatorURL,\n                    data: { 'agi': agi,\n                        'service': this.datasetname\n                    }\n                };\n            };\n            callback.call(null, null, pref, reader);\n            return;\n        }\n\n        if (pref.type == \"data\") {\n            var reader = new MASCP.UserdataReader();\n            reader.map = function (data) {\n                var results = {};\n                for (var key in data) {\n                    if (key == \"retrieved\" || key == \"title\") {\n                        continue;\n                    }\n                    if (!data[key].data) {\n                        results[key] = { 'data': data[key] };\n                    } else {\n                        results[key] = data;\n                    }\n                    results[key].retrieved = data.retrieved;\n                    results[key].title = data.title;\n                }\n                return results;\n            };\n            reader.bind('ready', function () {\n                callback.call(null, null, pref, reader);\n            });\n            reader.setData(set, pref.data);\n            return;\n        }\n        if (pref.type == \"reader\") {\n            callback.call(null, null, pref, pref.reader);\n            return;\n        }\n\n        if (pref.type == 'dataset') {\n            var a_reader = MASCP.GatorDataReader.createReader(set);\n            a_reader.bind('ready', function () {\n                if (parser) {\n                    parser.terminate();\n                }\n                callback.call(null, null, pref, a_reader);\n                callback = function callback() {};\n            });\n            a_reader.bind('error', function (err) {\n                callback.call(null, { \"error\": err }, pref);\n                callback = function callback() {};\n            });\n            return;\n        }\n\n        // If we wish to load complete datasets\n        // and store them browser-side, we need\n        // a parser function to grab the dataset.\n\n        if (!pref.parser_function) {\n            return;\n        }\n\n        if (JSandbox && /^(https?:)?\\/?\\//.test(set)) {\n            var sandbox = new JSandbox();\n            var parser;\n            sandbox.eval('var sandboxed_parser = ' + pref.parser_function + ';', function () {\n                var box = this;\n                parser = function parser(datablock, cback) {\n                    box.eval({ \"data\": \"sandboxed_parser(input.datablock)\",\n                        \"input\": { \"datablock\": datablock },\n                        \"callback\": function callback(r) {\n                            cback.call(null, r);\n                            box.terminate();\n                        },\n                        \"onerror\": function onerror(err) {\n                            console.log(\"Parser error\");\n                            cback.call(null, null);\n                        }\n                    });\n                };\n                parser.callback = true;\n                parser.terminate = function () {\n                    if (sandbox) {\n                        sandbox.terminate();\n                    }\n                };\n\n                // Right now we only download stuff from Google Drive\n                // We should be able to download stuff from other datasources too\n                if (/^(https?:)?\\/?\\//.test(set)) {\n                    MASCP.Service.request(set, function (err, data) {\n                        if (err) {\n                            callback.call(null, { \"error\": err }, pref);\n                            return;\n                        }\n\n                        var reader = new MASCP.UserdataReader(null, null);\n\n                        reader.datasetname = pref.title;\n\n                        if (already_seen_set[set]) {\n                            MASCP.Service.CacheService(reader);\n                            callback.call(null, null, pref, reader);\n                            return;\n                        }\n                        already_seen_set[set] = true;\n\n                        reader.bind('ready', function () {\n                            if (parser) {\n                                parser.terminate();\n                            }\n                            callback.call(null, null, pref, reader);\n                        });\n\n                        reader.bind('error', function (err) {\n                            if (parser) {\n                                parser.terminate();\n                            }\n                            callback.call(null, { \"error\": err }, pref);\n                        });\n\n                        MASCP.Service.ClearCache(reader, null, function (error) {\n                            if (error) {\n                                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(reader, \"error\", [error]);\n                                return;\n                            }\n                            reader.map = parser;\n                            reader.setData(pref.title, data);\n                        });\n                    });\n                    return;\n                }\n            });\n        } else {\n            console.log(\"No sandbox support - not trying to get data for \" + pref.title);\n            callback.call(null, { \"error\": \"No sandbox support\" });\n            return;\n        }\n    };\n\n    MASCP.IterateServicesFromConfig = function (configuration, callback) {\n        if (!configuration) {\n            return;\n        }\n        for (var set in configuration) {\n            service_from_config(set, configuration[set], callback);\n        }\n    };\n})();\n\nMASCP.extend = function (in_hsh, hsh) {\n    for (var i in hsh) {\n        if (true) {\n            in_hsh[i] = hsh[i];\n        }\n    }\n    return in_hsh;\n};\n\n/**\n *  @lends MASCP.Service.prototype\n *  @property   {String}  agi               AGI to retrieve data for\n *  @property   {MASCP.Service.Result}  result  Result from the query\n *  @property   {Boolean} async             Flag for using asynchronous requests - defaults to true\n */\nMASCP.extend(MASCP.Service.prototype, {\n    'agi': null,\n    'result': null,\n    '__result_class': null,\n    'async': true\n});\n\n/*\n * Internal callback for new data coming in from a XHR\n * @private\n */\n\nMASCP.Service.prototype._dataReceived = function (data, status) {\n    if (!data) {\n        return false;\n    }\n    var clazz = this.__result_class;\n    if (data && data.error && data.error != '' && data.error !== null) {\n        _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(this, 'error', [data.error]);\n        return false;\n    }\n    if (Object.prototype.toString.call(data) === '[object Array]') {\n        for (var i = 0; i < data.length; i++) {\n            arguments.callee.call(this, data[i], status);\n        }\n        if (i === 0) {\n            this.result = new clazz();\n        }\n        this.result._raw_data = { 'data': data };\n    } else if (!this.result) {\n        var result;\n        try {\n            result = new clazz(data);\n        } catch (err2) {\n            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(this, 'error', [err2]);\n            return false;\n        }\n        if (!result._raw_data) {\n            result._raw_data = data;\n        }\n        this.result = result;\n    } else {\n        // var new_result = {};\n        try {\n            clazz.call(this.result, data);\n        } catch (err3) {\n            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(this, 'error', [err3]);\n            return false;\n        }\n        // for(var field in new_result) {\n        //     if (true && new_result.hasOwnProperty(field)) {\n        //         this.result[field] = new_result[field];\n        //     }\n        // }\n        if (!this.result._raw_data) {\n            this.result._raw_data = data;\n        }\n        // this.result._raw_data = data;\n    }\n\n    if (data && data.retrieved) {\n        this.result.retrieved = data.retrieved;\n        this.result._raw_data.retrieved = data.retrieved;\n    }\n\n    this.result.agi = this.agi;\n\n    return true;\n};\n\nMASCP.Service.prototype.gotResult = function () {\n    var self = this;\n\n    var reader_cache = function reader_cache(thing) {\n        if (!thing.readers) {\n            thing.readers = [];\n        }\n        thing.readers.push(self.toString());\n    };\n\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(MASCP, 'layerRegistered', reader_cache);\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(MASCP, 'groupRegistered', reader_cache);\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(self, \"resultReceived\");\n    try {\n        _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(MASCP, 'layerRegistered', reader_cache);\n        _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(MASCP, 'groupRegistered', reader_cache);\n    } catch (e) {}\n\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(MASCP.Service, \"resultReceived\");\n};\n\nMASCP.Service.prototype.requestComplete = function () {\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(this, 'requestComplete');\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(MASCP.Service, 'requestComplete', [this]);\n};\n\nMASCP.Service.prototype.requestIncomplete = function () {\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(this, 'requestIncomplete');\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(MASCP.Service, 'requestIncomplete', [this]);\n};\n\nMASCP.Service.registeredLayers = function (service) {\n    var result = [];\n    for (var layname in MASCP.layers) {\n        if (MASCP.layers.hasOwnProperty(layname)) {\n            var layer = MASCP.layers[layname];\n            if (layer.readers && layer.readers.indexOf(service.toString()) >= 0) {\n                result.push(layer);\n            }\n        }\n    }\n    return result;\n};\n\nMASCP.Service.registeredGroups = function (service) {\n    var result = [];\n    for (var nm in MASCP.groups) {\n        if (MASCP.groups.hasOwnProperty(nm)) {\n            var group = MASCP.groups[nm];\n            if (group.readers && group.readers.indexOf(service.toString()) >= 0) {\n                result.push(group);\n            }\n        }\n    }\n    return result;\n};\n\n/**\n *  Binds a handler to one or more events. Returns a reference to self, so this method\n *  can be chained.\n *\n *  @param  {String}    type        Event type to bind\n *  @param  {Function}  function    Handler to execute on event\n */\n\nMASCP.Service.prototype.bind = function (type, func) {\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(this, type, func);\n    return this;\n};\n\nMASCP.Service.prototype.once = function (type, func) {\n    var self = this;\n    var wrapped_func = function wrapped_func() {\n        _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(self, type, wrapped_func);\n        func.apply(self, [].slice.call(arguments));\n    };\n    self.bind(type, wrapped_func);\n};\n\n/**\n *  Unbinds a handler from one or more events. Returns a reference to self, so this method\n *  can be chained.\n *\n *  @param  {String}    type        Event type to unbind\n *  @param  {Function}  function    Handler to unbind from event\n */\nMASCP.Service.prototype.unbind = function (type, func) {\n    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(this, type, func);\n    return this;\n};\n\n/**\n * @name    MASCP.Service#resultReceived\n * @event\n * @param   {Object}    e\n */\n\n/**\n * @name    MASCP.Service#error\n * @event\n * @param   {Object}    e\n */\n\n/**\n *  Asynchronously retrieves data from the remote source. When data is received, a \n *  resultReceived.mascp event is triggered upon this service, while an error.mascp\n *  event is triggered when an error occurs. This method returns a reference to self\n *  so it can be chained.\n */\n(function (base) {\n\n    var make_params = function make_params(params) {\n        var qpoints = [];\n        for (var fieldname in params) {\n            if (params.hasOwnProperty(fieldname)) {\n                qpoints.push(fieldname + '=' + params[fieldname]);\n            }\n        }\n        return qpoints.join('&');\n    };\n\n    var cached_requests = {};\n\n    var do_request = function do_request(request_data) {\n\n        request_data.async = true;\n\n        var datablock = null;\n\n        if (!request_data.url) {\n            request_data.success.call(null, null);\n            return;\n        }\n\n        var request = new XMLHttpRequest();\n\n        if (request_data.type == 'GET' && request_data.data) {\n            var index_of_quest = request_data.url.indexOf('?');\n\n            if (index_of_quest == request_data.url.length - 1) {\n                request_data.url = request_data.url.slice(0, -1);\n                index_of_quest = -1;\n            }\n            var has_question = index_of_quest >= 0 ? '&' : '?';\n            request_data.url = request_data.url.replace(/\\?$/, '') + has_question + make_params(request_data.data);\n        }\n        if (request_data.type == 'GET' && request_data.session_cache) {\n            if (cached_requests[request_data.url]) {\n                cached_requests[request_data.url].then(function (data) {\n                    request_data.success.call(null, data);\n                }).catch(function (error_args) {\n                    request_data.error.apply(null, [null, request, error_args]);\n                });\n                return;\n            } else {\n                var success_callback = request_data.success;\n                var error_callback = request_data.error;\n                cached_requests[request_data.url] = new Promise(function (resolve, reject) {\n                    request_data.success = function (data) {\n                        resolve(data);\n                    };\n                    request_data.error = function (message, req, error_obj) {\n                        reject([message, req, error_obj]);\n                        delete cached_requests[request_data.url];\n                    };\n                });\n                cached_requests[request_data.url].catch(function (error_args) {\n                    error_callback.apply(null, error_args);\n                }).then(function (data) {\n                    success_callback.call(null, data);\n                });\n            }\n        }\n\n        request.open(request_data.type, request_data.url, request_data.async);\n\n        if (request_data.type == 'POST') {\n            request.setRequestHeader(\"Content-Type\", request_data.content ? request_data.content : \"application/x-www-form-urlencoded\");\n            datablock = request_data.content ? request_data.data : make_params(request_data.data);\n        }\n\n        if (request.customUA) {\n            request.setRequestHeader('User-Agent', request.customUA);\n        }\n\n        if (request_data.auth) {\n            request.setRequestHeader('Authorization', 'Bearer ' + request_data.auth);\n        }\n\n        if (request_data.api_key) {\n            request.setRequestHeader('x-api-key', request_data.api_key);\n        }\n\n        var redirect_counts = 5;\n\n        request.onreadystatechange = function (evt) {\n            if (request.readyState == 4) {\n                if (request.status >= 300 && request.status < 400 && redirect_counts > 0) {\n                    var loc = request.getResponseHeader('location').replace(/location:\\s+/, '');\n                    redirect_counts = redirect_counts - 1;\n                    request.open('GET', loc, request_data.async);\n                    request.send();\n                    return;\n                }\n                if (request.status == 503) {\n                    // Let's encode an exponential backoff\n                    request.last_wait = (request_data.last_wait || 500) * 2;\n                    setTimeout(function () {\n                        request.open(request_data.type, request_data.url, request_data.async);\n                        if (request_data.type == 'POST') {\n                            request.setRequestHeader(\"Content-Type\", request_data.content ? request_data.content : \"application/x-www-form-urlencoded\");\n                        }\n                        if (request.customUA) {\n                            request.setRequestHeader('User-Agent', request.customUA);\n                        }\n                        request.send(datablock);\n                    }, request_data.last_wait);\n                    return;\n                }\n                if (request.status == 403) {\n                    // Make sure our S3 buckets expose the Server header cross-origin\n                    var server = request.getResponseHeader('Server');\n                    if (server === 'AmazonS3') {\n                        request_data.success.call(null, { \"error\": \"No data\" }, 403, request);\n                        return;\n                    }\n                }\n                if (request.status >= 200 && request.status < 300) {\n                    var data_block;\n                    if (request_data.dataType == 'xml') {\n                        data_block = typeof document !== 'undefined' ? document.implementation.createDocument(null, \"nodata\", null) : { 'getElementsByTagName': function getElementsByTagName() {\n                                return [];\n                            } };\n                    } else {\n                        data_block = {};\n                    }\n                    try {\n                        var text = request.responseText;\n                        data_block = request_data.dataType == 'xml' ? request.responseXML || MASCP.importNode(request.responseText) : request_data.dataType == 'txt' ? request.responseText : JSON.parse(request.responseText);\n                    } catch (e) {\n                        if (e.type == 'unexpected_eos') {\n                            request_data.success.call(null, {}, request.status, request);\n                            return;\n                        } else {\n                            request_data.error.call(null, request.responseText, request, { 'error': e.type || e.message, 'stack': e });\n                            return;\n                        }\n                    }\n                    if (request.status == 202 && data_block.status == \"RUNNING\") {\n                        setTimeout(function () {\n                            request.open(request_data.type, request_data.url, request_data.async);\n                            if (request_data.type == 'POST') {\n                                request.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n                            }\n                            if (request.customUA) {\n                                request.setRequestHeader('User-Agent', request.customUA);\n                            }\n                            request.send(datablock);\n                        }, 5000);\n                        return;\n                    }\n                    request_data.success.call(null, data_block, request.status, request);\n                    data_block = null;\n                } else {\n                    request_data.error.call(null, request.responseText, request, request.status);\n                }\n            }\n        };\n        if (MASCP.NETWORK_FAIL && MASCP.NETWORK_FAIL.enabled) {\n            setTimeout(function () {\n                console.log(\"Causing network failure\");\n                request = { 'onreadystatechange': request.onreadystatechange };\n                request.readyState = 4;\n                request.status = MASCP.NETWORK_FAIL.status || 500;\n                request.responseText = \"Intercepted by Network Failure simulator\";\n                request.onreadystatechange();\n            }, 1000);\n            return;\n        }\n\n        request.send(datablock);\n    };\n\n    MASCP.Service.request = function (url, callback, noparse) {\n        var method = MASCP.IE ? do_request_ie : do_request;\n        if (MASCP.IE && !url.match(/^https?\\:/)) {\n            method = do_request;\n        }\n        var params;\n        if (!url) {\n            callback(null);\n            return;\n        }\n        if (typeof url == 'string') {\n            params = { async: true, url: url, timeout: 5000, type: \"GET\",\n                error: function error(response, req, status) {\n                    callback.call(null, { \"status\": status });\n                },\n                success: function success(data, status, xhr) {\n                    callback.call(null, null, data);\n                }\n            };\n        } else if (url.hasOwnProperty('url')) {\n            params = url;\n            params.success = function (data) {\n                callback.call(null, null, data);\n            };\n            params.error = function (resp, req, status) {\n                callback.call(null, { \"status\": status });\n            };\n        }\n        if (noparse) {\n            params.dataType = 'txt';\n            if (noparse === \"xml\") {\n                params.dataType = 'xml';\n            }\n        }\n        method.call(null, params);\n    };\n\n    /**\n     * Private method for performing a cross-domain request using Internet Explorer 8 and up. Adapts the \n     * parameters passed, and builds an XDR object. There is no support for a locking\n     * synchronous method to do these requests (that is required for Unit testing) so an alert box is used\n     * to provide the locking.\n     * @private\n     * @param {Object} dataHash Hash with the data and settings used to build the query.\n     */\n\n    var do_request_ie = function do_request_ie(dataHash) {\n        // Use XDR\n        var xdr = new XDomainRequest();\n        var loaded = false;\n        var counter = 0;\n        xdr.onerror = function (ev) {\n            dataHash.error(xdr, xdr, { \"message\": \"XDomainRequest error\" });\n        };\n        xdr.onprogress = function () {};\n        xdr.open(\"GET\", dataHash.url + \"?\" + make_params(dataHash.data));\n        xdr.onload = function () {\n            loaded = true;\n            if (dataHash.dataType == 'xml') {\n                var dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n                dom.async = false;\n                dom.loadXML(xdr.responseText);\n                dataHash.success(dom, 'success', xdr);\n            } else if (dataHash.dataType == 'json') {\n                var parsed = null;\n                try {\n                    parsed = JSON.parse(xdr.responseText);\n                } catch (err) {\n                    dataHash.error(xdr, xdr, { \"message\": \"JSON parsing error\" });\n                }\n                if (parsed) {\n                    dataHash.success(parsed, 'success', xdr);\n                }\n            } else {\n                dataHash.success(xdr.responseText, 'success', xdr);\n            }\n        };\n        // We can't set the content-type on the parameters here to url-encoded form data.\n        setTimeout(function () {\n            xdr.send();\n        }, 0);\n        while (!dataHash.async && !loaded && counter < 3) {\n            alert(\"This browser does not support synchronous requests, click OK while we're waiting for data\");\n            counter += 1;\n        }\n        if (!dataHash.async && !loaded) {\n            alert(\"No data\");\n        }\n    };\n\n    base.retrieve = function (agi, callback) {\n        var self = this;\n\n        MASCP.Service._current_reqs = MASCP.Service._current_reqs || 0;\n        MASCP.Service._waiting_reqs = MASCP.Service._waiting_reqs || 0;\n\n        if (MASCP.Service.MAX_REQUESTS) {\n            var my_func = arguments.callee;\n            if (MASCP.Service._current_reqs > MASCP.Service.MAX_REQUESTS) {\n                MASCP.Service._waiting_reqs += 1;\n                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(MASCP.Service, 'requestComplete', function () {\n                    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(this, 'requestComplete', arguments.callee);\n                    setTimeout(function () {\n                        MASCP.Service._waiting_reqs -= 1;\n                        my_func.call(self, agi, callback);\n                    }, 0);\n                });\n                return this;\n            }\n        }\n        if (agi) {\n            this.agi = agi;\n        }\n\n        if (agi && callback) {\n            this.agi = agi;\n\n            this.result = null;\n\n            var done_result = false;\n            var done_func = function done_func(err, obj) {\n                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(self, \"resultReceived\", done_func);\n                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(self, \"error\", done_func);\n                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(self, \"requestComplete\", done_func);\n                if (!done_result) {\n                    if (err) {\n                        callback.call(self, err);\n                    } else {\n                        callback.call(self);\n                    }\n                }\n                done_result = true;\n            };\n            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(self, \"resultReceived\", done_func);\n            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(self, \"error\", done_func);\n            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(self, \"requestComplete\", done_func);\n        }\n        var request_data = this.requestData();\n\n        if (request_data === false) {\n            return;\n        }\n\n        if (!request_data) {\n            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(self, \"error\", [\"No request data\"]);\n            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(MASCP.Service, \"requestComplete\", [self]);\n            this.requestComplete();\n            return this;\n        }\n\n        var default_params = {\n            async: this.async,\n            url: request_data.url || this._endpointURL,\n            timeout: 5000,\n            error: function error(response, req, status) {\n                MASCP.Service._current_reqs -= 1;\n                if (typeof status == 'string') {\n                    status = { 'error': status, 'request': req };\n                }\n                if (!isNaN(status)) {\n                    status = { \"error\": \"Reqeust error\", \"status\": status, 'request': req };\n                }\n                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(self, \"error\", [status]);\n                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(MASCP.Service, 'requestComplete');\n                self.requestComplete();\n                //throw \"Error occurred retrieving data for service \"+self._endpointURL;\n            },\n            success: function success(data, status, xhr) {\n                MASCP.Service._current_reqs -= 1;\n                if (xhr && xhr.status !== null && xhr.status === 0) {\n                    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(self, \"error\", [{ \"error\": \"Zero return status from request \" }]);\n                    self.requestComplete();\n                    return;\n                }\n                var received_flag = self._dataReceived(data, status);\n\n                if (received_flag) {\n                    self.gotResult();\n                }\n\n                if (received_flag !== null && typeof received_flag !== 'undefined') {\n                    self.requestComplete();\n                } else {\n                    self.requestIncomplete();\n                }\n            }\n        };\n        MASCP.extend(default_params, request_data);\n        if (MASCP.IE) {\n            do_request_ie(default_params);\n        } else {\n            do_request(default_params);\n        }\n\n        MASCP.Service._current_reqs += 1;\n\n        return this;\n    };\n})(MASCP.Service.prototype);\n\n(function (clazz) {\n\n    var get_db_data, store_db_data, search_service, clear_service, find_latest_data, data_timestamps, sweep_cache, cached_accessions, begin_transaction, end_transaction, first_accession;\n\n    var max_age = 0,\n        min_age = 0;\n\n    clazz.BeginCaching = function () {\n        clazz.CacheService(clazz.prototype);\n    };\n\n    // To do 7 days ago, you do\n    // var date = new Date();\n    // date.setDate(date.getDate() - 1);\n    // MASCP.Service.SetMinimumFreshnessAge(date);\n\n    // Set the minimum age if you want nothing OLDER than this date\n    clazz.SetMinimumAge = function (date) {\n        if (date === 0) {\n            min_age = 0;\n        } else {\n            min_age = date.getTime();\n        }\n    };\n\n    // Set the maximum age if you want nothing NEWER than this date\n    clazz.SetMaximumAge = function (date) {\n        if (date === 0) {\n            max_age = 0;\n        } else {\n            max_age = date.getTime();\n        }\n    };\n\n    clazz.SweepCache = function (date) {\n        if (!date) {\n            date = new Date();\n        }\n        sweep_cache(date.getTime());\n    };\n\n    clazz.CacheService = function (reader) {\n        if (reader.prototype && reader.prototype.retrieve.caching || reader.retrieve.caching) {\n            return;\n        }\n        var _oldRetrieve = reader.retrieve;\n        var has_avoid;\n        reader.retrieve = function (agi, cback) {\n            var self = this;\n            var id = agi ? agi : self.agi;\n            if (!id) {\n                _oldRetrieve.call(self, id, cback);\n                return self;\n            }\n\n            id = id.toLowerCase();\n            self.agi = id;\n\n            if (self.avoid_database) {\n                if (has_avoid) {\n                    return;\n                }\n                has_avoid = self._dataReceived;\n                self._dataReceived = function () {\n                    return function (dat) {\n                        var res = has_avoid.call(this, dat);\n                        var id = self.agi;\n                        if (res && this.result && this.result._raw_data !== null) {\n                            store_db_data(id, this.toString(), this.result._raw_data || {});\n                        }\n                        dat = {};\n                        return res;\n                    };\n                }();\n                cback.call(self);\n                return;\n            }\n            if (has_avoid && !self.avoid_database) {\n                self._dataReceived = has_avoid;\n                has_avoid = null;\n                cback.call(self);\n                return;\n            }\n\n            get_db_data(id, self.toString(), function (err, data) {\n                if (data) {\n                    if (cback) {\n                        self.result = null;\n                        var done_func = function done_func(err) {\n                            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(self, \"resultReceived\", arguments.callee);\n                            _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].remove(self, \"error\", arguments.callee);\n                            cback.call(self, err);\n                        };\n                        _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(self, \"resultReceived\", done_func);\n                        _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].add(self, \"error\", done_func);\n                    }\n\n                    var received_flag = self._dataReceived(data, \"db\");\n\n                    if (received_flag) {\n                        self.gotResult();\n                    }\n\n                    if (received_flag !== null) {\n                        self.requestComplete();\n                    } else {\n                        self.requestIncomplete();\n                    }\n                } else {\n                    var old_received = self._dataReceived;\n                    self._dataReceived = function () {\n                        return function (dat, source) {\n                            var res = old_received.call(this, dat, source);\n                            if (res && this.result && this.result._raw_data !== null) {\n                                store_db_data(id, this.toString(), this.result._raw_data || {});\n                            }\n                            this._dataReceived = null;\n                            this._dataReceived = old_received;\n                            dat = {};\n                            return res;\n                        };\n                    }();\n                    var old_url = self._endpointURL;\n                    // If we have a maximum age, i.e. we don't want anything newer than a date\n                    // we should not actually do a request that won't respect that.\n                    // We can set a minimum age, since the latest data will be, by definition be the latest!\n                    if (max_age !== 0) {\n                        self._endpointURL = null;\n                    }\n                    _oldRetrieve.call(self, id, cback);\n                    self._endpointURL = old_url;\n                }\n            });\n            return self;\n        };\n        reader.retrieve.caching = true;\n    };\n\n    clazz.FindCachedService = function (service, cback) {\n        var serviceString = service.toString();\n        search_service(serviceString, cback);\n        return true;\n    };\n\n    clazz.CachedAgis = function (service, cback) {\n        var serviceString = service.toString();\n        cached_accessions(serviceString, cback);\n        return true;\n    };\n\n    clazz.FirstAgi = function (service, cback) {\n        var serviceString = service.toString();\n        first_accession(serviceString, cback);\n        return true;\n    };\n\n    clazz.ClearCache = function (service, agi, callback) {\n        var serviceString = service.toString();\n        if (!callback) {\n            callback = function callback() {};\n        }\n        clear_service(serviceString, agi, callback);\n        return true;\n    };\n\n    clazz.HistoryForService = function (service, cback) {\n        var serviceString = service.toString();\n        data_timestamps(serviceString, null, cback);\n    };\n\n    clazz.Snapshot = function (service, date, wanted, cback) {\n        var serviceString = service.toString();\n        get_snapshot(serviceString, null, wanted, cback);\n    };\n\n    var transaction_ref_count = 0;\n    var waiting_callbacks = [];\n    clazz.BulkOperation = function (callback) {\n        transaction_ref_count++;\n        var trans = function trans(callback) {\n            if (!callback) {\n                callback = function callback() {};\n            }\n            transaction_ref_count--;\n            waiting_callbacks.push(callback);\n            if (transaction_ref_count == 0) {\n                end_transaction(function (err) {\n                    waiting_callbacks.forEach(function (cback) {\n                        cback(err);\n                    });\n                    waiting_callbacks = [];\n                });\n            }\n        };\n        begin_transaction(callback, trans);\n        return trans;\n    };\n\n    var setup_idb = function setup_idb(idb) {\n        var transaction_store_db;\n        var transaction_find_latest;\n        var transaction_data = [];\n        begin_transaction = function begin_transaction(callback, trans) {\n            if (transaction_store_db != null) {\n                setTimeout(function () {\n                    callback.call({ \"transaction\": trans });\n                }, 0);\n                return false;\n            }\n            transaction_store_db = store_db_data;\n            store_db_data = function store_db_data(acc, service, data) {\n                transaction_data.push([acc, service, data]);\n            };\n            setTimeout(function () {\n                callback.call({ \"transaction\": trans });\n            }, 0);\n            return true;\n        };\n\n        end_transaction = function end_transaction(callback) {\n            if (transaction_store_db === null) {\n                callback(null);\n                return;\n            }\n            store_db_data = transaction_store_db;\n            transaction_store_db = null;\n            var trans = idb.transaction([\"cached\"], \"readwrite\");\n            var store = trans.objectStore(\"cached\");\n            trans.oncomplete = function (event) {\n                callback(null);\n            };\n            trans.onerror = function (event) {\n                callback(event.target.errorCode);\n            };\n            while (transaction_data.length > 0) {\n                var row = transaction_data.shift();\n                var acc = row[0];\n                var service = row[1];\n                var data = row[2];\n                if (typeof data != 'object' || data.constructor.name !== 'Object' || typeof Document != 'undefined' && data instanceof Document) {\n                    continue;\n                }\n                var dateobj = data.retrieved ? data.retrieved : new Date();\n                if (typeof dateobj === 'string' || typeof dateobj === 'number') {\n                    dateobj = new Date(dateobj);\n                }\n                dateobj.setUTCHours(0);\n                dateobj.setUTCMinutes(0);\n                dateobj.setUTCSeconds(0);\n                dateobj.setUTCMilliseconds(0);\n                var reporter = insert_report_func(acc, service);\n                var datetime = dateobj.getTime();\n                data.id = [acc, service, datetime];\n                data.acc = acc;\n                data.service = service;\n                if (window.msIndexedDB) {\n                    data.serviceacc = service + acc;\n                }\n                data.retrieved = datetime;\n                var req = store.put(data);\n                req.onerror = reporter;\n            }\n        };\n\n        var insert_report_func = function insert_report_func(acc, service) {\n            return function (err, rows) {\n                if (!err && rows) {}\n            };\n        };\n\n        store_db_data = function store_db_data(acc, service, data) {\n            var trans = idb.transaction([\"cached\"], \"readwrite\");\n            var store = trans.objectStore(\"cached\");\n            if (typeof data != 'object' || typeof Document != 'undefined' && data instanceof Document) {\n                return;\n            }\n            var dateobj = data.retrieved ? data.retrieved : new Date();\n            if (typeof dateobj === 'string' || typeof dateobj === 'number') {\n                dateobj = new Date(dateobj);\n            }\n            dateobj.setUTCHours(0);\n            dateobj.setUTCMinutes(0);\n            dateobj.setUTCSeconds(0);\n            dateobj.setUTCMilliseconds(0);\n            var reporter = insert_report_func(acc, service);\n            var datetime = dateobj.getTime();\n            data.id = [acc, service, datetime];\n            data.acc = acc;\n            if (window.msIndexedDB) {\n                data.serviceacc = service + acc;\n            }\n            data.service = service;\n            data.retrieved = datetime;\n            var req = store.put(data);\n            // req.onsuccess = reporter;\n            req.onerror = reporter;\n        };\n\n        get_db_data = function get_db_data(acc, service, cback) {\n            var timestamps = max_age ? [min_age, max_age] : [min_age, new Date().getTime()];\n            return find_latest_data(acc, service, timestamps, cback);\n        };\n\n        find_latest_data = function find_latest_data(acc, service, timestamps, cback) {\n            if (!acc) {\n                cback.call();\n                return;\n            }\n            var trans = idb.transaction([\"cached\"], \"readonly\");\n            var store = trans.objectStore(\"cached\");\n            var idx = store.index(window.msIndexedDB ? \"entries-ms\" : \"entries\");\n            var max_stamp = -1;\n            var result = null;\n            var range = IDBKeyRange.only(window.msIndexedDB ? service + acc : [acc, service]);\n            idx.openCursor(range).onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    var ts = window.msIndexedDB ? cursor.value.retrieved : cursor.primaryKey[2];\n                    var c_acc = window.msIndexedDB ? cursor.value.acc : cursor.primaryKey[0];\n                    var serv = window.msIndexedDB ? cursor.value.service : cursor.primaryKey[1];\n                    if (ts >= timestamps[0] && ts <= timestamps[1]) {\n                        if (ts > max_stamp && c_acc == acc && serv == service) {\n                            result = cursor.value;\n                            max_stamp = ts;\n                            result.retrieved = new Date(ts);\n                        }\n                    }\n                    cursor.continue();\n                } else {\n                    if (result) {\n                        // result = result.data\n                    }\n                    cback.call(null, null, result);\n                }\n            };\n        };\n\n        sweep_cache = function sweep_cache(timestamp) {\n            var trans = idb.transaction([\"cached\"], \"readwrite\");\n            var store = trans.objectStore(\"cached\");\n            var idx = store.index(\"timestamps\");\n            var results = [];\n            idx.openKeyCursor(null, \"nextunique\").onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    if (timestamp >= cursor.key[1]) {\n                        store.delete(cursor.primaryKey);\n                    }\n                    cursor.continue();\n                }\n            };\n        };\n\n        data_timestamps = function data_timestamps(service, timestamps, cback) {\n\n            if (!timestamps || typeof timestamps != 'object' || !timestamps.length) {\n                timestamps = [0, new Date().getTime()];\n            }\n\n            var trans = idb.transaction([\"cached\"], \"readonly\");\n            var store = trans.objectStore(\"cached\");\n            var idx = store.index(\"timestamps\");\n            var results = [];\n            idx.openKeyCursor(null, \"nextunique\").onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    if (cursor.key[0] == service && timestamps[0] <= cursor.key[1] && timestamps[1] >= cursor.key[1]) {\n                        results.push(new Date(parseInt(cursor.key[1])));\n                    }\n                    cursor.continue();\n                } else {\n                    cback.call(null, results);\n                }\n            };\n        };\n\n        clear_service = function clear_service(service, acc, callback) {\n            var trans = idb.transaction([\"cached\"], \"readwrite\");\n            var store = trans.objectStore(\"cached\");\n            var idx = store.index(\"services\");\n            var range = IDBKeyRange.only(service);\n            idx.openCursor(range).onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    if (!acc || cursor.value.acc == acc) {\n                        if (window.msIndexedDB) {\n                            store.delete(cursor.value.serviceacc);\n                        } else {\n                            store.delete(cursor.value.id ? cursor.value.id : cursor.primaryKey);\n                        }\n                    }\n                    cursor.continue();\n                }\n            };\n            trans.oncomplete = function () {\n                callback.call(MASCP.Service);\n            };\n        };\n\n        search_service = function search_service(service, cback) {\n            var trans = idb.transaction([\"cached\"], \"readonly\");\n            var store = trans.objectStore(\"cached\");\n            var idx = store.index(\"services\");\n            var results = [];\n            var range = IDBKeyRange.only(service);\n            idx.openKeyCursor(range, \"nextunique\").onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    results.push(cursor.key);\n                    cursor.continue();\n                } else {\n                    cback.call(MASCP.Service, results);\n                }\n            };\n        };\n        first_accession = function first_accession(service, cback) {\n            var trans = idb.transaction([\"cached\"], \"readonly\");\n            var store = trans.objectStore(\"cached\");\n            var idx = store.index(\"services\");\n            var range = IDBKeyRange.only(service);\n            idx.openCursor(range, \"nextunique\").onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    cback.call(MASCP.Service, cursor.value.acc);\n                } else {\n                    cback.call(MASCP.Service, null);\n                }\n            };\n        };\n        cached_accessions = function cached_accessions(service, cback) {\n            var trans = idb.transaction([\"cached\"], \"readonly\");\n            var store = trans.objectStore(\"cached\");\n            var idx = store.index(\"services\");\n            var results = [];\n            var range = IDBKeyRange.only(service);\n            idx.openCursor(range).onsuccess = function (event) {\n                var cursor = event.target.result;\n                if (cursor) {\n                    results.push(cursor.value.acc);\n                    cursor.continue();\n                } else {\n                    cback.call(MASCP.Service, results);\n                }\n            };\n        };\n    };\n    var setup_websql = function setup_websql(db) {\n        db.all('SELECT version from versions where tablename = \"datacache\"', function (err, rows) {\n            var version = rows && rows.length > 0 ? rows[0].version : null;\n            if (version == 1.3) {\n                if (MASCP.events) {\n                    MASCP.events.emit('ready');\n                }\n                if (MASCP.ready) {\n                    MASCP.ready();\n                    MASCP.ready = true;\n                } else {\n                    MASCP.ready = true;\n                }\n                return;\n            }\n\n            if (!version || version == \"\" || version < 1.0) {\n                db.exec('CREATE TABLE if not exists versions (version REAL, tablename TEXT);');\n                db.exec('CREATE TABLE if not exists \"datacache\" (agi TEXT,service TEXT,retrieved REAL,data TEXT);', function (err) {\n                    if (err && err != \"Error: not an error\") {\n                        throw err;\n                    }\n                });\n                db.exec('DELETE FROM versions where tablename = \"datacache\"');\n                db.exec('INSERT INTO versions(version,tablename) VALUES(1.1,\"datacache\");', function (err, rows) {\n                    if (!err) {\n                        //                        console.log(\"Upgrade to 1.1 completed\");\n                    }\n                });\n                version = 1.1;\n            }\n            if (version < 1.2) {\n                db.exec('DROP TABLE if exists datacache_tmp;');\n                db.exec('CREATE TABLE if not exists datacache_tmp (acc TEXT,service TEXT,retrieved REAL,data TEXT);');\n                db.exec('INSERT INTO datacache_tmp(acc,service,retrieved,data) SELECT agi,service,retrieved,data FROM datacache;');\n                db.exec('DROP TABLE datacache;');\n                db.exec('ALTER TABLE datacache_tmp RENAME TO datacache;');\n                db.exec('CREATE INDEX accessions on datacache(acc);');\n                db.exec('CREATE INDEX accessions_service on datacache(acc,service);');\n                db.exec('DELETE FROM versions where tablename = \"datacache\"');\n                db.exec('INSERT INTO versions(version,tablename) VALUES(1.2,\"datacache\");', function (err, rows) {\n                    if (!err) {\n                        //                          console.log(\"Upgrade to 1.2 completed\");\n                    }\n                });\n                version = 1.2;\n            }\n            if (version < 1.3) {\n                db.exec('CREATE INDEX if not exists services on datacache(service);');\n                db.exec('DELETE FROM versions where tablename = \"datacache\"');\n                db.exec('INSERT INTO versions(version,tablename) VALUES(1.3,\"datacache\");', function (err, rows) {\n                    if (!err) {\n                        if (MASCP.events) {\n                            MASCP.events.emit('ready');\n                        }\n                        if (MASCP.ready) {\n                            MASCP.ready();\n                            MASCP.ready = true;\n                        } else {\n                            MASCP.ready = true;\n                        }\n                    }\n                });\n                version = 1.3;\n            }\n        });\n\n        begin_transaction = function begin_transaction(callback, trans) {\n            callback.call({ \"transaction\": trans });\n        };\n        end_transaction = function end_transaction(callback) {\n            callback();\n        };\n\n        sweep_cache = function sweep_cache(timestamp) {\n            db.all(\"DELETE from datacache where retrieved <= ? \", [timestamp], function () {});\n        };\n\n        clear_service = function clear_service(service, acc, callback) {\n            var servicename = service;\n            servicename += \"%\";\n            if (!acc) {\n                db.all(\"DELETE from datacache where service like ? \", [servicename], function () {\n                    callback.call(MASCP.Service);\n                });\n            } else {\n                db.all(\"DELETE from datacache where service like ? and acc = ?\", [servicename, acc.toLowerCase()], function () {\n                    callback.call(MASCP.Service);\n                });\n            }\n        };\n\n        search_service = function search_service(service, cback) {\n            db.all(\"SELECT distinct service from datacache where service like ? \", [service + \"%\"], function (err, records) {\n                var results = {};\n                if (records && records.length > 0) {\n                    records.forEach(function (record) {\n                        results[record.service] = true;\n                    });\n                }\n                var uniques = [];\n                for (var k in results) {\n                    if (results.hasOwnProperty(k)) {\n                        uniques.push(k);\n                    }\n                }\n                cback.call(MASCP.Service, uniques);\n                return uniques;\n            });\n        };\n\n        first_accession = function first_accession(service, cback) {\n            db.all(\"SELECT distinct acc from datacache where service = ? limit 1\", [service], function (err, records) {\n                if (!records || records.length < 1) {\n                    cback.call(MASCP.Service, null);\n                } else {\n                    cback.call(MASCP.Service, records[0].acc);\n                }\n            });\n        };\n\n        cached_accessions = function cached_accessions(service, cback) {\n            db.all(\"SELECT distinct acc from datacache where service = ?\", [service], function (err, records) {\n                var results = [];\n                for (var i = 0; i < records.length; i++) {\n                    results.push(records[i].acc);\n                }\n                cback.call(MASCP.Service, results);\n            });\n        };\n\n        get_snapshot = function get_snapshot(service, timestamps, wanted, cback) {\n            if (!timestamps || typeof timestamps != 'object' || !timestamps.length) {\n                timestamps = [0, new Date().getTime()];\n            }\n            var sql;\n            var args = [service, timestamps[0], timestamps[1]];\n            if (wanted && Array.isArray(wanted)) {\n                var question_marks = new Array(wanted.length + 1).join(',?').substring(1);\n                args = args.concat(wanted);\n                sql = \"SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? AND acc in (\" + question_marks + \") ORDER BY retrieved ASC\";\n            } else {\n                if (wanted && /^\\d+$/.test(wanted.toString())) {\n                    sql = \"SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? LIMIT ? ORDER BY retrieved ASC\";\n                    args = args.concat(parseInt(wanted.toString()));\n                } else {\n                    sql = \"SELECT * from datacache where service = ? AND retrieved >= ? AND retrieved <= ? ORDER BY retrieved ASC\";\n                }\n            }\n            db.all(sql, args, function (err, records) {\n                records = records || [];\n                var results = {};\n                records.forEach(function (record) {\n                    var data = typeof record.data === 'string' ? JSON.parse(record.data) : record.data;\n                    if (data) {\n                        data.retrieved = new Date(parseInt(record.retrieved));\n                    }\n                    if (results[record.acc] && results[record.acc].retrieved > record.retrieved) {\n                        return;\n                    }\n                    results[record.acc] = record;\n                });\n                cback.call(null, null, results);\n            });\n        };\n\n        get_db_data = function get_db_data(acc, service, cback) {\n            var timestamps = max_age ? [min_age, max_age] : [min_age, new Date().getTime()];\n            return find_latest_data(acc, service, timestamps, cback);\n        };\n\n        var insert_report_func = function insert_report_func(acc, service) {\n            return function (err, rows) {\n                if (!err && rows) {\n                    //                    console.log(\"Caching result for \"+acc+\" in \"+service);\n                }\n            };\n        };\n\n        store_db_data = function store_db_data(acc, service, data) {\n            if (typeof data != 'object' || typeof Document != 'undefined' && data instanceof Document) {\n                return;\n            }\n            var str_rep;\n            try {\n                str_rep = JSON.stringify(data);\n            } catch (err) {\n                return;\n            }\n            var dateobj = data.retrieved ? data.retrieved : new Date();\n            if (typeof dateobj == 'string') {\n                dateobj = new Date();\n            }\n            dateobj.setUTCHours(0);\n            dateobj.setUTCMinutes(0);\n            dateobj.setUTCSeconds(0);\n            dateobj.setUTCMilliseconds(0);\n            var datetime = dateobj.getTime();\n            data = {};\n            db.all(\"INSERT INTO datacache(acc,service,retrieved,data) VALUES(?,?,?,?)\", [acc, service, datetime, str_rep], insert_report_func(acc, service));\n        };\n\n        find_latest_data = function find_latest_data(acc, service, timestamps, cback) {\n            var sql = \"SELECT * from datacache where acc=? and service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved DESC LIMIT 1\";\n            var args = [acc, service, timestamps[0], timestamps[1]];\n            db.all(sql, args, function (err, records) {\n                if (records && records.length > 0 && typeof records[0] != \"undefined\") {\n                    var data = typeof records[0].data === 'string' ? JSON.parse(records[0].data) : records[0].data;\n                    if (data) {\n                        data.retrieved = new Date(parseInt(records[0].retrieved));\n                    }\n                    cback.call(null, null, data);\n                } else {\n                    cback.call(null, null, null);\n                }\n            });\n        };\n\n        data_timestamps = function data_timestamps(service, timestamps, cback) {\n            if (!timestamps || typeof timestamps != 'object' || !timestamps.length) {\n                timestamps = [0, new Date().getTime()];\n            }\n            var sql = \"SELECT distinct retrieved from datacache where service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved ASC\";\n            var args = [service, timestamps[0], timestamps[1]];\n            db.all(sql, args, function (err, records) {\n                var result = [];\n                if (records && records.length > 0 && typeof records[0] != \"undefined\") {\n                    for (var i = records.length - 1; i >= 0; i--) {\n                        result.push(new Date(parseInt(records[i].retrieved)));\n                    }\n                }\n                cback.call(null, result);\n            });\n        };\n    };\n    var setup_localstorage = function setup_localstorage() {\n        sweep_cache = function sweep_cache(timestamp) {\n            if (\"localStorage\" in window) {\n                var keys = [];\n                for (var i = 0, len = localStorage.length; i < len; i++) {\n                    keys.push(localStorage.key(i));\n                }\n                var key = keys.shift();\n                while (key) {\n                    if (new RegExp(\"^MASCP.*\").test(key)) {\n                        var data = localStorage[key];\n                        if (data && typeof data === 'string') {\n                            var datablock = JSON.parse(data);\n                            datablock.retrieved = timestamp;\n                            localStorage.removeItem(key);\n                        }\n                    }\n                    key = keys.shift();\n                }\n            }\n        };\n\n        clear_service = function clear_service(service, acc, callback) {\n            if (\"localStorage\" in window) {\n                var keys = [];\n                for (var i = 0, len = localStorage.length; i < len; i++) {\n                    keys.push(localStorage.key(i));\n                }\n                var key = keys.shift();\n                while (key) {\n                    if (new RegExp(\"^\" + service + \".*\" + (acc ? \"#\" + acc.toLowerCase() + \"$\" : \"\")).test(key)) {\n                        localStorage.removeItem(key);\n                        if (acc) {\n                            return;\n                        }\n                    }\n                    key = keys.shift();\n                }\n                callback.call(MASCP.Service);\n            }\n        };\n\n        search_service = function search_service(service, cback) {\n            var results = {};\n            if (\"localStorage\" in window) {\n                var key;\n                var re = new RegExp(\"^\" + service + \".*\");\n                for (var i = 0, len = localStorage.length; i < len; i++) {\n                    key = localStorage.key(i);\n                    if (re.test(key)) {\n                        results[key.replace(/\\.#.*$/g, '')] = true;\n                    }\n                }\n            }\n\n            var uniques = [];\n            for (var k in results) {\n                if (results.hasOwnProperty(k)) {\n                    uniques.push(k);\n                }\n            }\n\n            cback.call(clazz, uniques);\n\n            return uniques;\n        };\n\n        first_accession = function first_accession(service, cback) {\n            if (\"localStorage\" in window) {\n                var key;\n                var re = new RegExp(\"^\" + service);\n                for (var i = 0, len = localStorage.length; i < len; i++) {\n                    key = localStorage.key(i);\n                    if (re.test(key)) {\n                        key = key.replace(service, '');\n                        cback.call(clazz, key);\n                        return;\n                    }\n                }\n            }\n            cback.call(clazz, null);\n        };\n\n        cached_accessions = function cached_accessions(service, cback) {\n            if (\"localStorage\" in window) {\n                var key;\n                var re = new RegExp(\"^\" + service);\n                for (var i = 0, len = localStorage.length; i < len; i++) {\n                    key = localStorage.key(i);\n                    if (re.test(key)) {\n                        key = key.replace(service, '');\n                        results[key] = true;\n                    }\n                }\n            }\n\n            var uniques = [];\n            for (var k in results) {\n                if (results.hasOwnProperty(k)) {\n                    uniques.push(k);\n                }\n            }\n\n            cback.call(clazz, uniques);\n        };\n\n        get_db_data = function get_db_data(acc, service, cback) {\n            var data = localStorage[service.toString() + \".#\" + (acc || '').toLowerCase()];\n            if (data && typeof data === 'string') {\n                var datablock = JSON.parse(data);\n                datablock.retrieved = new Date(parseInt(datablock.retrieved));\n                cback.call(null, null, datablock);\n            } else {\n                cback.call(null, null, null);\n            }\n        };\n\n        store_db_data = function store_db_data(acc, service, data) {\n            if (data && (typeof data !== 'object' || data instanceof Document || data.nodeName)) {\n                return;\n            }\n            data.retrieved = new Date().getTime();\n            localStorage[service.toString() + \".#\" + (acc || '').toLowerCase()] = JSON.stringify(data);\n        };\n\n        find_latest_data = function find_latest_data(acc, service, timestamp, cback) {\n            // We don't actually retrieve historical data for this\n            return get_db_data(acc, service, cback);\n        };\n\n        data_timestamps = function data_timestamps(service, timestamp, cback) {\n            cback.call(null, []);\n        };\n\n        begin_transaction = function begin_transaction(callback) {\n            // No support for transactions here. Do nothing.\n            setTimeout(function () {\n                callback.call();\n            }, 0);\n        };\n        end_transaction = function end_transaction(callback) {\n            // No support for transactions here. Do nothing.\n            setTimeout(function () {\n                callback();\n            }, 0);\n        };\n\n        if (MASCP.events) {\n            MASCP.events.emit('ready');\n        }\n        setTimeout(function () {\n            if (MASCP.ready) {\n                MASCP.ready();\n                MASCP.ready = true;\n            } else {\n                MASCP.ready = true;\n            }\n        }, 100);\n    };\n\n    var db, idb;\n\n    if (\"openDatabase\" in window || \"indexedDB\" in window) {\n\n        if (\"indexedDB\" in window) {\n\n            /* Versioning of DB schema */\n\n            var change_func = function change_func(version, transaction) {\n                var db = transaction.db;\n                if (db.objectStoreNames && db.objectStoreNames.contains(\"cached\")) {\n                    db.deleteObjectStore(\"cached\");\n                }\n                var keypath = window.msIndexedDB ? \"serviceacc\" : \"id\";\n                var store = db.createObjectStore(\"cached\", { keyPath: keypath });\n                store.createIndex(\"entries\", [\"acc\", \"service\"], { unique: false });\n                if (window.msIndexedDB) {\n                    store.createIndex(\"entries-ms\", \"serviceacc\", { unique: false });\n                }\n                store.createIndex(\"timestamps\", [\"service\", \"retrieved\"], { unique: false });\n                store.createIndex(\"services\", \"service\", { unique: false });\n                transaction.oncomplete = function () {\n                    database_ready(db);\n                    database_ready = function database_ready() {};\n                };\n            };\n\n            idb = true;\n            var db_version = 2;\n            var req = indexedDB.open(\"datacache\", db_version);\n\n            req.onupgradeneeded = function (e) {\n                var transaction = req.transaction;\n                change_func(e.oldVersion, transaction);\n            };\n\n            var database_ready = function database_ready(db) {\n                if (db) {\n                    idb = db;\n                }\n                setup_idb(idb);\n\n                if (MASCP.events) {\n                    MASCP.events.emit(\"ready\");\n                }\n                if (MASCP.ready) {\n                    MASCP.ready();\n                    MASCP.ready = true;\n                } else {\n                    MASCP.ready = true;\n                }\n            };\n            req.onerror = function (e) {\n                console.log(\"Error loading Database\");\n                setup_localstorage();\n                // setTimeout(function() {\n                //     indexedDB.deleteDatabase(\"datacache\").onsuccess = function() {\n\n                //     }\n                // },0);\n            };\n            req.onsuccess = function (e) {\n                idb = e.target.result;\n                var version = db_version;\n                if (idb.version != Number(version)) {\n                    var versionRequest = db.setVersion(ver);\n                    versionRequest.onsuccess = function (e) {\n                        var transaction = versionRequest.result;\n                        change_func(oldVersion, transaction);\n                    };\n                } else {\n                    database_ready();\n                }\n            };\n        } else {\n            try {\n                db = openDatabase(\"cached\", \"\", \"MASCP Gator cache\", 1024 * 1024);\n            } catch (err) {\n                throw err;\n            }\n            db.all = function (sql, args, callback) {\n                this.exec(sql, args, callback);\n            };\n            db.exec = function (sql, args, callback) {\n                var self = this;\n                var sqlargs = args;\n                var cback = callback;\n                if (typeof cback == 'undefined' && sqlargs && Object.prototype.toString.call(sqlargs) != '[object Array]') {\n                    cback = args;\n                    sqlargs = null;\n                }\n                self.transaction(function (tx) {\n                    tx.executeSql(sql, sqlargs, function (tx, result) {\n                        var res = [];\n                        for (var i = 0; i < result.rows.length; i++) {\n                            res.push(result.rows.item(i));\n                        }\n                        if (cback) {\n                            cback.call(db, null, res);\n                        }\n                    }, function (tx, err) {\n                        if (cback) {\n                            cback.call(db, err);\n                        }\n                    });\n                });\n            };\n        }\n    }\n    if (typeof idb !== 'undefined') {\n        // Do nothing\n    } else if (typeof db != 'undefined') {\n        setup_websql(db);\n    } else if (\"localStorage\" in window) {\n        setup_localstorage();\n    } else {\n\n        sweep_cache = function sweep_cache(timestamp) {};\n\n        clear_service = function clear_service(service, acc) {};\n\n        search_service = function search_service(service, cback) {};\n\n        cached_accessions = function cached_accessions(service, cback) {\n            cback.call(clazz, []);\n        };\n\n        get_db_data = function get_db_data(acc, service, cback) {\n            cback.call(null, null, null);\n        };\n\n        store_db_data = function store_db_data(acc, service, data) {};\n\n        find_latest_data = function find_latest_data(acc, service, timestamp, cback) {\n            // We don't actually retrieve historical data for this\n            cback.call(null, []);\n        };\n\n        data_timestamps = function data_timestamps(service, timestamp, cback) {\n            cback.call(null, []);\n        };\n\n        begin_transaction = function begin_transaction(callback, trans) {\n            // No support for transactions here. Do nothing.\n            setTimeout(function () {\n                callback({ \"transaction\": trans });\n            }, 0);\n        };\n        end_transaction = function end_transaction(callback) {\n            // No support for transactions here. Do nothing.\n            setTimeout(function () {\n                callback();\n            }, 0);\n        };\n    }\n})(MASCP.Service);\n\n/**\n * Set the async parameter for this service.\n * @param {Boolean} asyncFlag   Asynchronous flag - true for asynchronous action, false for asynchronous\n * @returns Reference to self\n * @type MASCP.Service.prototype\n */\nMASCP.Service.prototype.setAsync = function (asyncFlag) {\n    this.async = asyncFlag;\n    return this;\n};\n\n/**\n *  Get the parameters that will be used to build this request. Implementations of services will\n *  override this method, returning the parameters to be used to build the XHR.\n */\n\nMASCP.Service.prototype.requestData = function () {};\n\nMASCP.Service.prototype.toString = function () {\n    for (var clazz in MASCP) {\n        if (this.__class__ == MASCP[clazz]) {\n            return \"MASCP.\" + clazz;\n        }\n    }\n};\n\n/**\n * For this service, register a sequence rendering view so that the results can be marked up directly\n * on to a sequence. This method will do nothing if the service does not know how to render the \n * results onto the sequence.\n * @param {MASCP.SequenceRenderer} sequenceRenderer Sequence renderer object to render results upon\n */\nMASCP.Service.prototype.registerSequenceRenderer = function (sequenceRenderer, options) {\n    if (this.setupSequenceRenderer) {\n        this.renderers = this.renderers || [];\n        this.setupSequenceRenderer(sequenceRenderer, options);\n        this.renderers.push(sequenceRenderer);\n    }\n    sequenceRenderer.trigger('readerRegistered', [this]);\n    return this;\n};\n\nMASCP.Service.prototype.resetOnResult = function (sequenceRenderer, rendered, track) {\n    var self = this;\n    var result_func = function result_func() {\n        self.unbind('resultReceived', result_func);\n        sequenceRenderer.bind('resultsRendered', clear_func);\n    };\n\n    var clear_func = function clear_func(reader) {\n        if (reader !== self) {\n            return;\n        }\n        sequenceRenderer.unbind('resultsRendered', clear_func);\n        rendered.forEach(function (obj) {\n            sequenceRenderer.remove(track, obj);\n        });\n    };\n    this.bind('resultReceived', result_func);\n};\n\n/**\n * For this service, set up a sequence renderer so that the events are connected up with receiving data.\n * This method should be overridden to wire up the sequence renderer to the service.\n * @param {MASCP.SequenceRenderer} sequenceRenderer Sequence renderer object to render results upon\n */\nMASCP.Service.prototype.setupSequenceRenderer = function (sequenceRenderer) {\n    return this;\n};\n\n/**\n *  Move a node from an externally retrieved document into this current document.\n *  @static\n *  @param  {Node}  externalNode    Node from XHR data source that is to be imported into the current document.\n */\nMASCP.Service.importNode = function (external_node) {\n    if (typeof document == 'undefined') {\n        return external_node;\n    }\n    var new_data;\n    if (typeof external_node == 'string') {\n        new_data = document.createElement('div');\n        new_data.innerHTML = external_node;\n        return new_data.firstChild;\n    }\n\n    if (document.importNode) {\n        return document.importNode(external_node, true);\n    } else {\n        new_data = document.createElement('div');\n        new_data.innerHTML = external_node.xml;\n        return new_data.firstChild;\n    }\n};\n\n/** Default constructor\n *  @class  Super-class for all results from MASCP services.\n */\nMASCP.Service.Result = function () {};\n\nMASCP.Service.Result.prototype = {\n    agi: null,\n    reader: null\n};\n\nMASCP.Service.Result.prototype.render = function () {};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (MASCP);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/MascpService.js\n");

/***/ }),

/***/ "./js/lib/SVGCanvas.js":
/*!*****************************!*\
  !*** ./js/lib/SVGCanvas.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n\n\nconst SVGCanvas = function () {\n\n    var extended_elements = [];\n    var DEFAULT_RS = 1;\n    var svgns = 'http://www.w3.org/2000/svg';\n\n    function extend_array(an_array, RS) {\n        var curr_x, curr_y, curr_transform, targ_disp, a_disp;\n\n        an_array.visibility = function () {\n            var curr_disp = 'hidden';\n\n            for (var i = 0; i < an_array.length; i++) {\n                if (Array.isArray(an_array[i])) {\n                    continue;\n                }\n\n                a_disp = an_array[i].getAttribute('visibility');\n                if (a_disp && a_disp != 'hidden') {\n                    curr_disp = a_disp;\n                    break;\n                }\n            }\n            return curr_disp;\n        };\n\n        an_array.currenty = function () {\n            var a_y;\n            var filtered = an_array.filter(function (el) {\n                return el && !Array.isArray(el);\n            });\n            if (filtered[0] && filtered[0].getAttribute('transform')) {\n                a_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(filtered[0].getAttribute('transform'));\n                if (a_y !== null && typeof a_y !== 'undefined') {\n                    a_y = a_y[2];\n                }\n            }\n            return filtered[0] ? parseInt(a_y || filtered[0].getAttribute('y') || 0, 10) : 0;\n        };\n\n        an_array.animate = function (hsh) {\n            if (typeof hsh.y == 'undefined') {\n                attr(hsh);\n                return;\n            }\n            if (an_array.length === 0) {\n                return;\n            }\n\n            var hash = {};\n            var key;\n\n            for (key in hsh) {\n                if (hsh.hasOwnProperty(key)) {\n                    hash[key] = hsh[key];\n                }\n            }\n\n            setup_anim_clocks();\n\n            if (an_array.animating) {\n                for (var i = 0; i < (anim_clock_funcs || []).length; i++) {\n                    if (anim_clock_funcs[i].target_set != an_array) {\n                        continue;\n                    }\n                    an_array.animating = false;\n                    anim_clock_funcs.splice(i, 1);\n                }\n            }\n\n            var curr_disp = an_array.visibility();\n\n            var target_disp = hash.visibility;\n            if (curr_disp == target_disp && target_disp == 'hidden') {\n                attr(hsh);\n                return;\n            }\n\n            var curr_y = an_array.currenty();\n\n            if (isNaN(parseInt(curr_y, 10))) {\n                console.log(\"Have a NaN y value, skipping\");\n                return;\n            }\n\n            var target_y = parseInt(hash.y, 10);\n\n            delete hash.y;\n\n            if (curr_disp == target_disp && target_disp == 'visible') {\n                delete hash.visibility;\n                target_disp = null;\n                attr({ 'visibility': 'visible' });\n            }\n\n            if (hash.visibility == 'hidden') {\n                delete hash.visibility;\n            }\n\n            attr(hash);\n            var counter = 0;\n\n            if (target_y != curr_y) {\n                var anim_steps = 1 * (Math.abs(parseInt((target_y - curr_y) / (50 * RS), 10) / rate) + 1);\n                var diff = (target_y - curr_y) / anim_steps;\n                hash.y = curr_y || 0;\n                var orig_func = arguments.callee;\n                an_array.animating = true;\n                hash.y = curr_y + diff * 1;\n\n                anim_clock_funcs.push(function (step) {\n                    if (diff < 0 && hash.y < target_y) {\n                        hash.y = target_y;\n                    }\n                    if (diff > 0 && hash.y > target_y) {\n                        hash.y = target_y;\n                    }\n                    attr(hash);\n                    counter += step || 1;\n                    if (hash.y != target_y) {\n                        hash.y = curr_y + diff * (counter + 1);\n                        return;\n                    }\n                    an_array.animating = false;\n                    if (target_disp) {\n                        attr({ 'visibility': target_disp });\n                    }\n                    anim_clock_funcs.splice(anim_clock_funcs.indexOf(arguments.callee), 1);\n                });\n                anim_clock_funcs[anim_clock_funcs.length - 1].target_set = an_array;\n            }\n            return;\n        };\n\n        an_array.attr = function (hsh) {\n            if (in_anim) {\n                return this.animate(hsh);\n            }\n            return attr(hsh);\n        };\n\n        var attr = function attr(hsh) {\n            var hash = {};\n            var key;\n            for (key in hsh) {\n                if (hsh.hasOwnProperty(key)) {\n                    hash[key] = hsh[key];\n                }\n            }\n\n            var curr_disp = an_array.visibility();\n\n            var targ_y = parseInt(hash.y, 10);\n            targ_disp = hash.visibility;\n\n            for (key in hash) {\n                if (hash.hasOwnProperty(key)) {\n                    for (var i = 0; i < an_array.length; i++) {\n                        if (!an_array[i]) {\n                            continue;\n                        }\n                        if (Array.isArray(an_array[i])) {\n                            continue;\n                        }\n                        if (an_array[i].style.display == 'none') {\n                            continue;\n                        }\n                        var value = hash[key];\n                        if (key == 'style' && an_array[i].hasAttribute('style')) {\n                            var curr_style = an_array[i].getAttribute('style');\n                            curr_style += '; ' + hash[key];\n                            value = curr_style;\n                        }\n                        var has_translate = an_array[i].hasAttribute('transform') && an_array[i].getAttribute('transform').indexOf('translate') >= 0;\n\n                        if (key == 'height' && an_array[i].setHeight) {\n                            //hasAttribute('transform') && ! an_array[i].no_scale) {\n                            an_array[i].setHeight(hash[key]);\n                        } else if (!(has_translate && (key == 'y' || key == 'x'))) {\n                            an_array[i].setAttribute(key, value);\n                        }\n                        if (key == 'y' && an_array[i].hasAttribute('d')) {\n                            var curr_path = an_array[i].getAttribute('d');\n                            var re = /M\\s*([\\d\\.]+) ([\\d\\.]+)/;\n                            curr_path = curr_path.replace(re, '');\n                            if (isNaN(parseInt(value, 10))) {\n                                throw \"Error \" + key + \" is \" + hash[key];\n                            }\n                            an_array[i].setAttribute('d', 'M0 ' + parseInt(value, 10) + ' ' + curr_path);\n                        }\n                        if (key == 'y' && an_array[i].hasAttribute('cy')) {\n                            an_array[i].setAttribute('cy', hash[key]);\n                        }\n\n                        if (key == 'y' && an_array[i].hasAttribute('transform')) {\n                            curr_transform = an_array[i].getAttribute('transform');\n\n                            curr_x = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)?\\)/.exec(an_array[i].getAttribute('transform'));\n                            if (curr_x === null) {\n                                continue;\n                            }\n                            curr_x = curr_x[1];\n                            curr_transform = curr_transform.replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)?\\)/, 'translate(' + curr_x + ',' + value + ')');\n                            an_array[i].setAttribute('transform', curr_transform);\n                        }\n                        if (key == 'x' && an_array[i].hasAttribute('transform')) {\n                            curr_transform = an_array[i].getAttribute('transform');\n\n                            curr_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(an_array[i].getAttribute('transform'));\n                            if (curr_y === null) {\n                                continue;\n                            }\n                            curr_y = curr_y[2];\n                            curr_transform = curr_transform.replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/, 'translate(' + value + ',' + curr_y + ')');\n                            an_array[i].setAttribute('transform', curr_transform);\n                        }\n                        if (key == 'text-anchor' && an_array[i].hasAttribute('style')) {\n                            an_array[i].style.textAnchor = hash[key];\n                        };\n                    }\n                }\n            }\n        };\n        an_array.hide = function () {\n            this.attr({ 'visibility': 'hidden' });\n        };\n        an_array.show = function () {\n            this.attr({ 'visibility': 'visible' });\n        };\n\n        an_array.refresh_zoom = function () {\n            for (var i = 0; i < an_array.length; i++) {\n                if (Array.isArray(an_array[i])) {\n                    continue;\n                }\n\n                if (an_array[i].zoom_level && an_array[i].zoom_level == 'text') {\n                    if (an_array[i].ownerSVGElement && an_array[i].ownerSVGElement.zoom > 3.5) {\n                        an_array[i].setAttribute('display', 'inline');\n                        an_array[i].setAttribute('opacity', 1);\n                    } else {\n                        an_array[i].setAttribute('display', 'none');\n                    }\n                }\n\n                if (an_array[i].zoom_level && an_array[i].zoom_level == 'summary') {\n                    if (an_array[i].ownerSVGElement && an_array[i].ownerSVGElement.zoom <= 3.5) {\n                        an_array[i].setAttribute('display', 'inline');\n                        an_array[i].setAttribute('opacity', 1);\n                    } else {\n                        an_array[i].setAttribute('display', 'none');\n                    }\n                }\n            }\n        };\n\n        return an_array;\n    }\n\n    var anim_clock_funcs = null,\n        in_anim = false;\n    var anim_clock = null;\n    var rate = 75;\n    var new_rate = null;\n\n    var setup_anim_clocks = function setup_anim_clocks() {\n        if (anim_clock_funcs === null) {\n            anim_clock_funcs = [];\n        } else {\n            anim_clock_funcs.forEach(function (func) {\n                func._last_step = null;\n            });\n            clearInterval(anim_clock);\n        }\n        if (!in_anim) {\n            extended_elements.forEach(function (canv) {\n                _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(canv, '_anim_begin');\n            });\n            in_anim = true;\n        }\n        var start = null;\n        anim_clock = setInterval(function () {\n            if (!anim_clock_funcs || anim_clock_funcs.length === 0) {\n                clearInterval(anim_clock);\n                anim_clock = null;\n                anim_clock_funcs = null;\n                in_anim = false;\n                extended_elements.forEach(function (canv) {\n                    _bean__WEBPACK_IMPORTED_MODULE_0__[\"default\"].fire(canv, '_anim_end');\n                });\n                return;\n            }\n\n            var suspended_ids = [];\n\n            extended_elements.forEach(function (canv) {\n                suspended_ids.push(canv.suspendRedraw(5000));\n            });\n            var tic = new Date().getTime();\n\n            if (!start) {\n                start = new Date().getTime();\n            }\n\n            for (var i = 0; i < (anim_clock_funcs || []).length; i++) {\n                var end = new Date().getTime();\n                var step_id = parseInt((end - start) / rate, 10);\n                if (new_rate === null && step_id - anim_clock_funcs[i]._last_step > 2) {\n                    new_rate = Math.round(1.6 * rate);\n                }\n                anim_clock_funcs[i].apply(null, [step_id - (anim_clock_funcs[i]._last_step || step_id)]);\n                if (anim_clock_funcs && anim_clock_funcs[i]) {\n                    anim_clock_funcs[i]._last_step = step_id;\n                }\n            }\n            var toc = new Date().getTime();\n\n            extended_elements.forEach(function (canv) {\n                canv.unsuspendRedraw(suspended_ids.shift());\n            });\n\n            var actual_speed = toc - tic;\n            if (actual_speed < rate && new_rate === null && actual_speed >= 1) {\n                rate = Math.round(1.5 * (toc - tic));\n                setup_anim_clocks();\n            } else if (new_rate !== null && new_rate != rate) {\n                rate = new_rate;\n                setup_anim_clocks();\n            }\n        }, rate);\n    };\n    var scale_re = /scale\\((-?\\d+\\.?\\d*)\\)/;\n    var setHeight = function setHeight(height) {\n        var curr_transform = this.getAttribute('transform').toString();\n\n        var curr_scale = scale_re.exec(curr_transform);\n\n        var curr_height = parseFloat(this.getAttribute('height') || 1);\n\n        var new_scale = 1;\n        if (curr_scale === null) {\n            curr_transform += ' scale(1) ';\n            curr_scale = 1;\n        } else {\n            curr_scale = parseFloat(curr_scale[1]);\n        }\n        new_scale = parseFloat(height) / curr_height * curr_scale;\n\n        curr_transform = curr_transform.replace(scale_re, 'scale(' + new_scale + ')');\n\n        this.setAttribute('transform', curr_transform);\n        this.setAttribute('height', height);\n        return new_scale;\n    };\n\n    return function (canvas) {\n\n        var RS = canvas.RS || DEFAULT_RS;\n        canvas.RS = RS;\n        canvas.font_order = 'Helvetica, Verdana, Arial, Sans-serif';\n        extended_elements.push(canvas);\n\n        canvas.makeEl = function (name, attributes) {\n            var result = canvas.ownerDocument.createElementNS(svgns, name);\n            for (var attribute in attributes) {\n                if (attributes.hasOwnProperty(attribute)) {\n                    result.setAttribute(attribute, attributes[attribute]);\n                }\n            }\n            return result;\n        };\n\n        canvas.make_gradient = function (id, x2, y2, stops, opacities) {\n            var gradient = this.makeEl('linearGradient', {\n                'id': id,\n                'x1': '0%',\n                'x2': x2,\n                'y1': '0%',\n                'y2': y2\n            });\n            var total_stops = stops.length;\n            while (stops.length > 0) {\n                var stop_id = Math.round((total_stops - stops.length) / total_stops * 100);\n                var stop = stops.shift();\n                var opacity = opacities.shift();\n                gradient.appendChild(this.makeEl('stop', {\n                    'offset': stop_id + '%',\n                    'style': 'stop-color:' + stop + ';stop-opacity:' + opacity\n                }));\n            }\n            return gradient;\n        };\n\n        canvas.path = function (pathdesc) {\n            var a_path = document.createElementNS(svgns, 'path');\n            a_path.setAttribute('d', pathdesc);\n            a_path.setAttribute('stroke', '#000000');\n            a_path.setAttribute('stroke-width', '1');\n            this.appendChild(a_path);\n            return a_path;\n        };\n\n        canvas.poly = function (points) {\n            var a_poly = document.createElementNS(svgns, 'polygon');\n            a_poly.setAttribute('points', points);\n            this.appendChild(a_poly);\n            return a_poly;\n        };\n\n        canvas.circle = function (x, y, radius) {\n            var a_circle = document.createElementNS(svgns, 'circle');\n            a_circle.setAttribute('cx', typeof x == 'string' ? x : x * RS);\n            a_circle.setAttribute('cy', typeof y == 'string' ? y : y * RS);\n            a_circle.setAttribute('r', typeof radius == 'string' ? radius : radius * RS);\n            a_circle.move = function (new_x) {\n                a_circle.setAttribute('cx', new_x * RS);\n            };\n            this.appendChild(a_circle);\n            return a_circle;\n        };\n\n        canvas.group = function () {\n            var a_g = document.createElementNS(svgns, 'g');\n            this.appendChild(a_g);\n            a_g.push = function (new_el) {\n                a_g.appendChild(new_el);\n            };\n\n            return a_g;\n        };\n\n        canvas.clipPath = function () {\n            var el = document.createElementNS(svgns, 'clipPath');\n            this.appendChild(el);\n            el.push = function (new_el) {\n                el.appendChild(new_el);\n            };\n            return el;\n        };\n\n        canvas.line = function (x, y, x2, y2) {\n            var a_line = document.createElementNS(svgns, 'line');\n            a_line.setAttribute('x1', typeof x == 'string' ? x : x * RS);\n            a_line.setAttribute('y1', typeof y == 'string' ? y : y * RS);\n            a_line.setAttribute('x2', typeof x2 == 'string' ? x2 : x2 * RS);\n            a_line.setAttribute('y2', typeof y2 == 'string' ? y2 : y2 * RS);\n            this.appendChild(a_line);\n            return a_line;\n        };\n\n        canvas.rect = function (x, y, width, height, opts) {\n            if (!opts) {\n                opts = {};\n            }\n            var a_rect = document.createElementNS(svgns, 'rect');\n            a_rect.setAttribute('x', typeof x == 'string' ? x : x * RS);\n            a_rect.setAttribute('y', typeof y == 'string' ? y : y * RS);\n            a_rect.setAttribute('width', typeof width == 'string' ? width : width * RS);\n            a_rect.setAttribute('height', typeof height == 'string' ? height : height * RS);\n            a_rect.setAttribute('stroke', '#000000');\n            this.appendChild(a_rect);\n            if (typeof opts.offset !== \"undefined\") {\n                a_rect.offset = opts.offset;\n                a_rect.setAttribute('transform', 'translate(' + a_rect.getAttribute('x') + ',' + a_rect.getAttribute('y') + ')');\n                a_rect.setAttribute('x', '0');\n                a_rect.setAttribute('y', a_rect.offset * RS);\n            }\n\n            a_rect.move = function (new_x, new_width) {\n                if (typeof this.offset !== \"undefined\" && this.getAttribute('transform')) {\n                    var transform_attr = this.getAttribute('transform');\n                    var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n                    if (matches[1]) {\n                        this.setAttribute('transform', 'translate(' + new_x * RS + ',' + matches[1] + ')');\n                    }\n                    this.setAttribute('width', new_width * RS);\n                } else {\n                    this.setAttribute('x', new_x * RS);\n                    this.setAttribute('width', new_width * RS);\n                }\n            };\n            return a_rect;\n        };\n\n        canvas.roundRect = function (x, y, width, height, r, opts) {\n            var a_rect = this.rect(x, y, width, height, opts);\n            if (typeof r != 'object' || !r.x) {\n                r = { 'x': r, 'y': r };\n            }\n            a_rect.setAttribute('rx', r.x * RS);\n            a_rect.setAttribute('ry', r.y * RS);\n            return a_rect;\n        };\n\n        canvas.ellipticalRect = function (x, y, width, height) {\n            return this.roundRect(x, y, width, height, { 'x': 0.25 * width, 'y': 0.5 * height });\n        };\n        canvas.pentagon = function (x, y, width, height, rotate) {\n            return this.nagon(x, y, width, height, 5, rotate);\n        };\n        canvas.hexagon = function (x, y, width, height, rotate) {\n            return this.nagon(x, y, width, height, 6, rotate);\n        };\n\n        var shape_set_attribute = function shape_set_attribute(attr, val) {\n            this.constructor.prototype.setAttribute.call(this, attr, val);\n            if (attr == 'height' || attr == 'width' || attr == 'x' || attr == 'y') {\n                this.redraw(Math.floor(parseFloat(this.getAttribute('height'))));\n            }\n        };\n\n        canvas.nagon = function (x, y, width, height, n, rotate) {\n            var shape = this.poly(\"\");\n            // shape.setAttribute('transform','translate('+(x*RS)+','+(RS*y)+')');\n            shape.setAttribute('x', x * RS);\n            shape.setAttribute('y', y * RS);\n            shape.setAttribute('width', width * RS);\n            shape.redraw = function (hght) {\n                if (hght) {\n                    this.last_height = hght;\n                } else {\n                    hght = this.last_height;\n                }\n                var a = 0.5 * Math.floor(parseFloat(shape.getAttribute('width')));\n                var b = 0.5 * hght;\n                var points = [];\n                var min_x = null;\n                var max_x = null;\n                for (var i = 0; i < n; i++) {\n                    var angle = rotate / 360 * 2 * Math.PI + 2 / n * Math.PI * i;\n                    var a_x = parseInt(a + a * Math.cos(angle));\n                    var a_y = parseInt(b + b * Math.sin(angle));\n                    points.push([a_x, a_y]);\n                    if (min_x === null || a_x < min_x) {\n                        min_x = a_x;\n                    }\n                    if (max_x === null || a_x > max_x) {\n                        max_x = a_x;\n                    }\n                }\n                var x_pos = Math.floor(parseFloat(shape.getAttribute('x')));\n                var y_pos = Math.floor(parseFloat(shape.getAttribute('y')));\n                points.map(function (points) {\n                    if (points[0] == min_x) {\n                        points[0] = 0;\n                    }\n                    if (points[0] == max_x) {\n                        points[0] = a * 2;\n                    }\n                    points[0] += x_pos;\n                    points[1] = y_pos + 0.5 * hght * (points[1] / b);\n                    return points.join(\",\");\n                });\n                this.setAttribute('points', points.join(\" \"));\n            };\n            shape.setHeight = shape.redraw;\n            shape.move = function (new_x, new_width) {\n                var curr_y = /translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/.exec(this.getAttribute('transform'));\n                if (curr_y === null) {\n                    return;\n                }\n                curr_y = curr_y[2];\n                var curr_transform = this.getAttribute('transform').replace(/translate\\((-?\\d+\\.?\\d*)\\s*,?\\s*(-?\\d+\\.?\\d*)\\)/, 'translate(' + new_x * RS + ',' + curr_y + ')');\n                this.setAttribute('transform', curr_transform);\n                a = 0.5 * new_width * RS;\n            };\n            shape.setAttribute = shape_set_attribute;\n            shape.redraw(height * RS);\n            return shape;\n        };\n\n        canvas.use = function (ref, x, y, width, height) {\n            var a_use = document.createElementNS(svgns, 'use');\n            a_use.setAttribute('x', typeof x == 'string' ? x : x * RS);\n            a_use.setAttribute('y', typeof y == 'string' ? y : y * RS);\n            a_use.setAttribute('width', typeof width == 'string' ? width : width * RS);\n            a_use.setAttribute('height', typeof height == 'string' ? height : height * RS);\n            a_use.setAttributeNS('http://www.w3.org/1999/xlink', 'href', ref);\n            this.appendChild(a_use);\n\n            return a_use;\n        };\n\n        canvas.a = function (href) {\n            var a_anchor = document.createElementNS(svgns, 'a');\n            a_anchor.setAttribute('target', '_new');\n            a_anchor.setAttributeNS('http://www.w3.org/1999/xlink', 'href', href);\n            this.appendChild(a_anchor);\n            return a_anchor;\n        };\n\n        canvas.button = function (x, y, width, height, text) {\n            var fo = document.createElementNS(svgns, 'foreignObject');\n            fo.setAttribute('x', x);\n            fo.setAttribute('y', y);\n            fo.setAttribute('width', x + width);\n            fo.setAttribute('height', y + height);\n            if (!fo.style) {\n                fo.setAttribute('style', 'position: absolute;');\n            } else {\n                fo.style.position = 'absolute';\n            }\n            this.appendChild(fo);\n            var button = document.createElement('button');\n            button.style.display = 'block';\n            button.textContent = text;\n            fo.appendChild(button);\n            return button;\n        };\n\n        canvas.svgbutton = function (x, y, width, height, txt) {\n            var button = this.group();\n            var back = this.rect(x, y, width, height);\n            back.setAttribute('rx', '10');\n            back.setAttribute('ry', '10');\n            back.setAttribute('stroke', '#ffffff');\n            back.setAttribute('stroke-width', '2');\n            back.setAttribute('fill', 'url(#simple_gradient)');\n            x = back.x.baseVal.value;\n            y = back.y.baseVal.value;\n            width = back.width.baseVal.value;\n            height = back.height.baseVal.value;\n\n            var text = this.text(x + width / 2, y + height / 3, txt);\n            text.setAttribute('text-anchor', 'middle');\n            text.firstChild.setAttribute('dy', '1.5ex');\n            text.setAttribute('font-size', 0.5 * height);\n            text.setAttribute('fill', '#ffffff');\n            button.push(back);\n            button.push(text);\n            button.background_element = back;\n            button.text_element = text;\n\n            button.setAttribute('cursor', 'pointer');\n            var button_trigger = function button_trigger() {\n                back.setAttribute('fill', '#999999');\n                back.setAttribute('stroke', '#000000');\n            };\n            button.addEventListener('mousedown', button_trigger, false);\n            button.addEventListener('touchstart', button_trigger, false);\n            var button_reset = function button_reset() {\n                back.setAttribute('stroke', '#ffffff');\n                back.setAttribute('fill', 'url(#simple_gradient)');\n            };\n            button.addEventListener('mouseup', button_reset, false);\n            button.addEventListener('mouseout', button_reset, false);\n            button.addEventListener('touchend', button_reset, false);\n            return button;\n        };\n\n        canvas.callout = function (x, y, content, opts) {\n            var callout = this.group();\n            var back = this.roundRect(-0.5 * (opts.width + 4), 20, opts.width + 4, opts.height + 4, 4);\n            back.setAttribute('fill', '#000000');\n            var pres_box = this.roundRect(-0.5 * (opts.width + 1), 22, opts.width + 1, opts.height, 4);\n            pres_box.setAttribute('fill', '#eeeeee');\n            callout.push(back);\n            callout.push(pres_box);\n            var poly = this.poly('0,500 500,1000 -500,1000');\n            poly.setAttribute('fill', '#000000');\n            callout.push(poly);\n            var fo = document.createElementNS(svgns, 'foreignObject');\n            fo.setAttribute('x', -0.5 * (opts.width + 1) * RS);\n            fo.setAttribute('y', 22 * RS);\n            fo.setAttribute('width', opts.width * RS);\n            fo.setAttribute('height', opts.height * RS);\n            callout.push(fo);\n            var html = document.createElementNS('http://www.w3.org/1999/xhtml', 'html');\n            html.setAttribute('xmlns', 'http://www.w3.org/1999/xhtml');\n            var body = document.createElementNS('http://www.w3.org/1999/xhtml', 'body');\n            body.style.fontSize = (opts['font-size'] || 15) * RS + 'px';\n            body.style.margin = 5 * RS + 'px';\n            body.style.height = opts.height * RS * 10 + 'px';\n            html.appendChild(body);\n            body.appendChild(content);\n            fo.appendChild(html);\n            var scale = opts.height / 15;\n            callout.setAttribute('transform', 'translate(' + x * RS + ',' + (y + 20) * RS + ') scale(' + scale + ')');\n            callout.setHeight = setHeight;\n            if (!opts.align) {\n                var currVbox = parseFloat(this.getAttribute('viewBox').split(/\\s+/)[2]);\n                if ((x + 10 + 0.5 * opts.width) * RS > currVbox) {\n                    opts.align = 'right';\n                }\n                if ((x - 0.5 * opts.width) * RS < 0) {\n                    opts.align = 'left';\n                }\n            }\n            if (opts.align) {\n                var shifter = opts.align == \"right\" ? -0.5 : 0.5;\n                back.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n                pres_box.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n                poly.setAttribute('transform', 'translate(' + 0 * shifter * opts.width * RS + ',0)');\n                poly.setAttribute('points', shifter > 0 ? \"0,500 500,1000 0,1000\" : \"0,500 0,1000 -500,1000\");\n                fo.setAttribute('transform', 'translate(' + shifter * opts.width * RS + ',0)');\n            }\n            callout.setAttribute('height', opts.height * RS);\n            return callout;\n        };\n\n        canvas.growingMarker = function (x, y, symbol, opts) {\n            var container = document.createElementNS(svgns, 'svg');\n            if (!opts.stretch && !(Array.isArray && Array.isArray(opts.content))) {\n                container.setAttribute('viewBox', '-50 -100 200 250');\n                container.setAttribute('preserveAspectRatio', 'xMinYMin meet');\n            } else {\n                container = this.group();\n            }\n            container.setAttribute('x', x);\n            container.setAttribute('y', y);\n            var the_marker = this.marker(50 / RS, 50 / RS, 50 / RS, symbol, opts);\n            container.appendChild(the_marker);\n            container.contentElement = the_marker.contentElement;\n            var result = this.group();\n            var positioning_group = this.group();\n            result.appendChild(positioning_group);\n            positioning_group.appendChild(container);\n            if (!opts.stretch && !(Array.isArray && Array.isArray(opts.content))) {\n                container.setAttribute('width', '200');\n                container.setAttribute('height', '250');\n            }\n            if (opts.angle) {\n                result.angle = opts.angle;\n            }\n            // var rect = document.createElementNS(svgns,'rect');\n            // rect.setAttribute('stroke','#f00');\n            // rect.setAttribute('stroke-width','10');\n            // rect.setAttribute('x','-50');\n            // rect.setAttribute('y','-100');\n            // rect.setAttribute('width','100%');\n            // rect.setAttribute('height','100%');\n            // rect.setAttribute('fill','none');\n            // container.appendChild(rect);\n\n            // var rect = document.createElementNS(svgns,'rect');\n            // rect.setAttribute('stroke','#0f0');\n            // rect.setAttribute('stroke-width','10');\n            // rect.setAttribute('x','50');\n            // rect.setAttribute('y','25');\n            // rect.setAttribute('width','50%');\n            // rect.setAttribute('height','50%');\n            // rect.setAttribute('fill','none');\n\n            // container.appendChild(rect);\n\n            result.setAttribute('height', '250');\n            result.setAttribute('transform', 'scale(1)');\n            result.setHeight = function (height) {\n                // this.setAttribute('height',height);\n                var scale_val = setHeight.call(this, height);\n                this.setAttribute('height', height);\n                var top_offset = this.offset || 0;\n                if (!this.angle) {\n                    this.angle = 0;\n                }\n                this.firstChild.setAttribute('transform', 'translate(-100,' + top_offset * RS + ') rotate(' + this.angle + ',100,0)');\n            };\n            result.container = container;\n            return result;\n        };\n\n        canvas.marker = function (cx, cy, r, symbol, opts) {\n            var units = 0;\n            if (typeof cx == 'string') {\n                var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n                units = parts[2];\n                cx = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n                cy = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n                r = parseFloat(parts[1]);\n            }\n\n            var dim = {\n                CX: cx + units,\n                CY: cy + units,\n                R: r + units,\n                MIN_X: cx - r + units,\n                MAX_X: cx + r + units,\n                MIN_Y: cy - r + units,\n                MAX_Y: cy + r + units,\n                MID_X1: cx - r / 2 + units,\n                MID_X2: cx + r / 2 + units,\n                MID_Y1: cy - r / 2 + units,\n                MID_Y2: cy + r / 2 + units\n            };\n\n            var marker = this.group();\n            if (!opts) {\n                opts = {};\n            }\n            var fill_color = opts && opts.border ? opts.border : 'rgb(0,0,0)';\n            if (!opts.bare_element) {\n                if (opts.width) {\n                    marker.push(this.roundRect(-0.5 * opts.width - 1, -0.5, opts.width + 2, 3, 1.5));\n                    marker.lastChild.setAttribute('fill', fill_color);\n                } else {\n                    marker.push(this.circle(0, -0.5 * r, r));\n\n                    marker.lastChild.setAttribute('fill', fill_color);\n                    marker.lastChild.setAttribute('border', 'true');\n\n                    marker.push(this.circle(0, 1.5 * r, r));\n\n                    marker.lastChild.setAttribute('fill', fill_color);\n                    marker.lastChild.setAttribute('border', 'true');\n                    var arrow = this.poly(-0.9 * r * RS + ',' + 0 * r * RS + ' 0,' + -2.5 * r * RS + ' ' + 0.9 * r * RS + ',' + 0 * r * RS);\n\n                    arrow.setAttribute('fill', fill_color);\n                    arrow.setAttribute('stroke-width', '0');\n\n                    marker.push(arrow);\n                    marker.lastChild.setAttribute('border', 'true');\n                }\n            }\n            marker.setAttribute('transform', 'translate(' + cx * RS + ',' + 0.5 * cy * RS + ') scale(1)');\n            marker.setHeight = setHeight;\n            marker.setAttribute('height', dim.R * RS);\n            if (typeof symbol == 'string') {\n                if (symbol.match(/^(:?https?:)?\\/?.*#/)) {\n                    marker.contentElement = this.use(symbol, -r, 0, 2 * r, 2 * r);\n                    marker.contentElement.setAttribute('content', 'true');\n                } else {\n                    marker.contentElement = this.text_circle(0, 0, 2 * r, symbol, opts);\n                    marker.contentElement.firstChild.setAttribute('content', 'true');\n                }\n                marker.push(marker.contentElement);\n            } else if (Array.isArray && Array.isArray(symbol)) {\n                marker.contentElement = this.group();\n                var phase = Math.PI / symbol.length;\n                // phase -= (Math.PI / 2);\n                var needs_stretch = opts.stretch;\n                var nrow = 2;\n                symbol.forEach(function (symb, i) {\n                    var x_pos = i % nrow;\n                    var y_pos = 2 + Math.floor(i / nrow);\n                    x_pos *= 2 * r;\n                    y_pos *= 2 * r;\n                    x_pos -= 0.5 * r;\n                    var rotate_amount = 180 * i / symbol.length;\n                    rotate_amount -= 0 * 90;\n                    rotate_amount = 0;\n                    if (needs_stretch) {\n                        if (rotate_amount >= -90 && rotate_amount <= 90) {\n                            opts.stretch = 'right';\n                        } else {\n                            opts.stretch = 'left';\n                        }\n                        if (rotate_amount % 90 == 0 && rotate_amount != 90 && rotate_amount != -90) {\n                            if (rotate_amount == 0) {\n                                opts.stretch = 'right';\n                            }\n                            if (symbol.length == 1) {\n                                opts.stretch = true;\n                            }\n                        }\n                    }\n\n                    if (rotate_amount > 90 && rotate_amount < 270) {\n                        rotate_amount = 180 + rotate_amount;\n                    }\n                    if (symb.match(/^(:?https?:)?\\/?.*#/)) {\n                        new_el = canvas.use(symb, (x_pos - 0.5) * r, (y_pos - 0.5) * r, 2 * r, 2 * r);\n                        new_el.setAttribute('pointer-events', 'none');\n                        new_el.setAttribute('content', 'true');\n                    } else {\n                        var opts_copy = JSON.parse(JSON.stringify(opts));\n                        opts_copy.no_tracer = true;\n                        delete opts_copy.offset;\n                        delete opts_copy.height;\n                        new_el = canvas.text_circle(x_pos * r, y_pos * r, 1.75 * r, symb, opts_copy);\n                        new_el.firstChild.setAttribute('content', 'true');\n                    }\n                    var curr_transform = new_el.getAttribute('transform') || '';\n                    curr_transform = curr_transform + ' rotate(' + rotate_amount + ',' + 0 * r * RS + ',' + y_pos * r * RS + ')';\n                    new_el.setAttribute('transform', curr_transform);\n                    marker.contentElement.push(new_el);\n                });\n                marker.push(marker.contentElement);\n            } else {\n                marker.contentElement = this.group();\n                if (!opts.bare_element) {\n                    marker.contentElement.push(this.text_circle(0, 0.5 * r, 1.75 * r, \"\", opts));\n                    marker.contentElement.lastChild.firstChild.setAttribute('content', 'true');\n                }\n                if (symbol) {\n                    if (!opts.bare_element) {\n                        symbol.setAttribute('transform', 'translate(0,' + 0.5 * r * RS + ')');\n                    }\n                    symbol.setAttribute('content', 'true');\n                    marker.contentElement.push(symbol);\n                }\n                marker.push(marker.contentElement);\n            }\n            marker.setAttribute('marker', 'true');\n            return marker;\n        };\n\n        canvas.text_circle = function (cx, cy, r, txt, opts) {\n\n            if (!opts) {\n                opts = {};\n            }\n\n            var units = 0;\n\n            if (typeof cx == 'string') {\n                var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n                units = parts[2];\n                cx = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n                cy = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n                r = parseFloat(parts[1]);\n            }\n            var dim = {\n                CX: cx + units,\n                CY: cy + units,\n                R: r + units,\n                MIN_X: cx - r + units,\n                MAX_X: cx + r + units,\n                MIN_Y: cy - r + units,\n                MAX_Y: cy + r + units,\n                MID_X1: cx - r / 2 + units,\n                MID_X2: cx + r / 2 + units,\n                MID_Y1: cy - r / 2 + units,\n                MID_Y2: cy + r / 2 + units\n            };\n\n            var marker_group = this.group();\n\n            var text = this.text(0, dim.CY, txt);\n            text.setAttribute('font-size', 10 * RS);\n            text.setAttribute('font-weight', opts.weight || 'bolder');\n            text.setAttribute('fill', opts.text_fill || '#ffffff');\n            text.setAttribute('style', 'font-family: sans-serif; text-anchor: middle;');\n            text.firstChild.setAttribute('dy', '0.35em');\n            text.setAttribute('text-anchor', 'middle');\n            var back;\n\n            if (!opts.stretch) {\n                back = this.circle(0, dim.CY, 9 / 10 * dim.R);\n            } else {\n                var text_width = 1.2 * (opts.font_size || r) * text.getBBox().width / (10 * RS);\n                var text_height = 3 / 2 * dim.R;\n                var left_pos = -0.5 * text_width;\n                if (text_width > 3 * dim.R) {\n                    left_pos = -0.5 * text_width;\n\n                    if (opts.stretch == 'right') {\n                        left_pos = -0.1 * text_width;\n                    }\n                    if (opts.stretch == 'left') {\n                        left_pos = -0.9 * text_width;\n                    }\n                } else {\n                    text_width = 3 * dim.R;\n                    left_pos = -0.5 * text_width;\n                }\n                text.setAttribute('x', (0.5 * text_width + left_pos) * RS);\n                back = this.roundRect(left_pos, dim.CY - 0.5 * text_height, text_width, text_height, { 'x': 0.5 * dim.R, 'y': 0.5 * text_height }, {});\n            }\n            text.setAttribute('font-size', (opts.font_size || r) * RS);\n\n            back.setAttribute('fill', opts.fill || 'url(#simple_gradient)');\n            window.matchMedia('print').addListener(function (match) {\n                back.setAttribute('fill', match.matches ? '#aaaaaa' : opts.fill || 'url(#simple_gradient)');\n            });\n            back.setAttribute('stroke', opts.border || '#000000');\n            back.setAttribute('stroke-width', r / 10 * RS);\n\n            marker_group.push(back);\n\n            marker_group.push(text);\n\n            marker_group.setAttribute('transform', 'translate(' + dim.CX * RS + ', 1) scale(1)');\n            marker_group.setAttribute('height', dim.R / 2 * RS);\n            marker_group.setHeight = setHeight;\n            return marker_group;\n        };\n\n        canvas.crossed_circle = function (cx, cy, r) {\n\n            var units = 0;\n\n            if (typeof cx == 'string') {\n                var parts = new RegExp(/(\\d+)(.*)/g).exec(cx);\n                units = parts[2];\n                cx = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(cy);\n                cy = parseFloat(parts[1]);\n\n                parts = new RegExp(/(\\d+)(.*)/g).exec(r);\n                r = parseFloat(parts[1]);\n            }\n            var dim = {\n                CX: cx + units,\n                CY: cy + units,\n                R: r + units,\n                MIN_X: cx - r + units,\n                MAX_X: cx + r + units,\n                MIN_Y: cy - r + units,\n                MAX_Y: cy + r + units,\n                MID_X1: cx - r / 2 + units,\n                MID_X2: cx + r / 2 + units,\n                MID_Y1: cy - r / 2 + units,\n                MID_Y2: cy + r / 2 + units\n            };\n\n            var close_group = this.group();\n\n            var close_button = this.circle(dim.CX, dim.CY, dim.R);\n            close_button.setAttribute('fill', '#000000');\n            close_button.setAttribute('stroke', '#ffffff');\n            close_button.setAttribute('stroke-width', '2');\n\n            close_group._button = close_button;\n\n            close_group.push(close_button);\n\n            var a_line = this.line(dim.MID_X1, dim.MID_Y1, dim.MID_X2, dim.MID_Y2);\n            a_line.setAttribute('stroke', '#ffffff');\n            a_line.setAttribute('stroke-width', '2');\n\n            close_group.push(a_line);\n\n            var first_line = a_line;\n\n            var a_line = this.line(dim.MID_X1, dim.MID_Y2, dim.MID_X2, dim.MID_Y1);\n            a_line.setAttribute('stroke', '#ffffff');\n            a_line.setAttribute('stroke-width', '2');\n\n            close_group.push(a_line);\n\n            close_group.move = function (cx, cy) {\n                close_button.setAttribute('cx', cx);\n                dim.MID_X1 = cx - r / 2;\n                dim.MID_X2 = cx + r / 2;\n                dim.MID_Y1 = cy - r / 2;\n                dim.MID_Y2 = cy + r / 2;\n                first_line.setAttribute('x1', dim.MID_X1);\n                first_line.setAttribute('y1', dim.MID_Y1);\n                first_line.setAttribute('x2', dim.MID_X2);\n                first_line.setAttribute('y2', dim.MID_Y2);\n                a_line.setAttribute('x1', dim.MID_X1);\n                a_line.setAttribute('y1', dim.MID_Y2);\n                a_line.setAttribute('x2', dim.MID_X2);\n                a_line.setAttribute('y2', dim.MID_Y1);\n            };\n            return close_group;\n        };\n        canvas.text = function (x, y, text) {\n            var a_text = document.createElementNS(svgns, 'text');\n            var a_tspan = document.createElementNS(svgns, 'tspan');\n            if (typeof text != 'string') {\n                a_text.appendChild(text);\n            } else {\n                a_text.appendChild(a_tspan);\n                a_tspan.textContent = text;\n                a_tspan.setAttribute('dy', '0');\n            }\n            a_text.style.fontFamily = this.font_order || 'Helvetica, Verdana, Arial, Sans-serif';\n            a_text.setAttribute('x', typeof x == 'string' ? x : x * RS);\n            a_text.setAttribute('y', typeof y == 'string' ? y : y * RS);\n            a_text.move = function (new_x, new_width) {\n                if (typeof this.offset !== \"undefined\" && this.getAttribute('transform')) {\n                    var transform_attr = this.getAttribute('transform');\n                    var matches = /translate\\(.*[,\\s](.*)\\)/.exec(transform_attr);\n                    if (matches[1]) {\n                        this.setAttribute('transform', 'translate(' + new_x * RS + ',' + matches[1] + ')');\n                    }\n                } else {\n                    this.setAttribute('x', new_x * RS);\n                }\n            };\n\n            this.appendChild(a_text);\n            return a_text;\n        };\n        canvas.plus = function (x, y, height) {\n            var g = this.group();\n            g.appendChild(this.makeEl('rect', {\n                'x': Math.round(0.4 * height * RS).toString(),\n                'y': Math.round(0.1 * height * RS).toString(),\n                'stroke-width': '1',\n                'width': Math.round(0.2 * height * RS).toString(),\n                'height': Math.round(0.8 * height * RS).toString(),\n                'stroke': '#ffffff',\n                'fill': '#ffffff'\n            }));\n\n            g.appendChild(this.makeEl('rect', {\n                'x': Math.round(0.1 * height * RS).toString(),\n                'y': Math.round(0.4 * height * RS).toString(),\n                'stroke-width': '1',\n                'width': Math.round(0.8 * height * RS).toString(),\n                'height': Math.round(0.2 * height * RS).toString(),\n                'stroke': '#ffffff',\n                'fill': '#ffffff'\n            }));\n            g.setAttribute('transform', 'translate(' + x * RS + ',' + y * RS + ')');\n            return g;\n        };\n        canvas.minus = function (x, y, height) {\n            var g = this.group();\n\n            g.appendChild(this.makeEl('rect', {\n                'x': Math.round(0.1 * height * RS).toString(),\n                'y': Math.round(0.4 * height * RS).toString(),\n                'stroke-width': '1',\n                'width': Math.round(0.8 * height * RS).toString(),\n                'height': Math.round(0.2 * height * RS).toString(),\n                'stroke': '#ffffff',\n                'fill': '#ffffff'\n            }));\n            g.setAttribute('transform', 'translate(' + x * RS + ',' + y * RS + ')');\n            return g;\n        };\n\n        // Calculate the bounding box of an element with respect to its parent element\n        // Thanks to http://stackoverflow.com/questions/10623809/get-bounding-box-of-element-accounting-for-its-transform\n        canvas.transformedBoundingBox = function (el) {\n            var bb = el.getBBox(),\n                svg = el.ownerSVGElement,\n                m = el.parentNode.getScreenCTM().inverse().multiply(el.getScreenCTM()).inverse();\n            // Create an array of all four points for the original bounding box\n            var pts = [svg.createSVGPoint(), svg.createSVGPoint(), svg.createSVGPoint(), svg.createSVGPoint()];\n            pts[0].x = bb.x;pts[0].y = bb.y;\n            pts[1].x = bb.x + bb.width;pts[1].y = bb.y;\n            pts[2].x = bb.x + bb.width;pts[2].y = bb.y + bb.height;\n            pts[3].x = bb.x;pts[3].y = bb.y + bb.height;\n\n            // Transform each into the space of the parent,\n            // and calculate the min/max points from that.\n            var xMin = Infinity,\n                xMax = -Infinity,\n                yMin = Infinity,\n                yMax = -Infinity;\n            pts.forEach(function (pt) {\n                pt = pt.matrixTransform(m);\n                xMin = Math.min(xMin, pt.x);\n                xMax = Math.max(xMax, pt.x);\n                yMin = Math.min(yMin, pt.y);\n                yMax = Math.max(yMax, pt.y);\n            });\n\n            // Update the bounding box with the new values\n            try {\n                bb.x = xMin;bb.width = xMax - xMin;\n                bb.y = yMin;bb.height = yMax - yMin;\n            } catch (e) {\n                bb = { 'x': xMin, 'y': yMin, 'width': xMax - xMin, 'height': yMax - yMin };\n            }\n            return bb;\n        };\n\n        canvas.set = function () {\n            var an_array = [];\n            extend_array(an_array, RS);\n            return an_array;\n        };\n        canvas.hide = function () {\n            this.setAttribute('display', 'none');\n        };\n        canvas.show = function () {\n            this.setAttribute('display', 'inline');\n        };\n    };\n}();\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SVGCanvas);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9saWIvU1ZHQ2FudmFzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL2pzL2xpYi9TVkdDYW52YXMuanM/YzIzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYmVhbiBmcm9tICcuLi9iZWFuJztcblxuY29uc3QgU1ZHQ2FudmFzID0gKGZ1bmN0aW9uKCkge1xuICAgIFxuICAgIHZhciBleHRlbmRlZF9lbGVtZW50cyA9IFtdO1xuICAgIHZhciBERUZBVUxUX1JTID0gMTtcbiAgICB2YXIgc3ZnbnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICAgIFxuICAgIGZ1bmN0aW9uIGV4dGVuZF9hcnJheShhbl9hcnJheSxSUykge1xuICAgICAgICB2YXIgY3Vycl94LCBjdXJyX3ksIGN1cnJfdHJhbnNmb3JtLCB0YXJnX2Rpc3AsIGFfZGlzcDtcbiAgICAgICAgXG4gICAgICAgIGFuX2FycmF5LnZpc2liaWxpdHkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBjdXJyX2Rpc3AgPSAnaGlkZGVuJztcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgYW5fYXJyYXkubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYW5fYXJyYXlbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFfZGlzcCA9IGFuX2FycmF5W2ldLmdldEF0dHJpYnV0ZSgndmlzaWJpbGl0eScpO1xuICAgICAgICAgICAgICAgIGlmIChhX2Rpc3AgJiYgYV9kaXNwICE9ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJfZGlzcCA9IGFfZGlzcDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJfZGlzcDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGFuX2FycmF5LmN1cnJlbnR5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYV95O1xuICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gYW5fYXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGVsKSB7IHJldHVybiBlbCAmJiAhIEFycmF5LmlzQXJyYXkoZWwpOyB9KTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJlZFswXSAmJiBmaWx0ZXJlZFswXS5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpKSB7XG4gICAgICAgICAgICAgICAgYV95ID0gL3RyYW5zbGF0ZVxcKCgtP1xcZCtcXC4/XFxkKilcXHMqLD9cXHMqKC0/XFxkK1xcLj9cXGQqKVxcKS8uZXhlYyhmaWx0ZXJlZFswXS5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpKTtcbiAgICAgICAgICAgICAgICBpZiAoYV95ICE9PSBudWxsICYmICh0eXBlb2YoYV95KSAhPT0gJ3VuZGVmaW5lZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFfeSA9IGFfeVsyXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyZWRbMF0gPyBwYXJzZUludCggYV95IHx8IGZpbHRlcmVkWzBdLmdldEF0dHJpYnV0ZSgneScpIHx8IDAsMTApIDogMDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGFuX2FycmF5LmFuaW1hdGUgPSBmdW5jdGlvbihoc2gpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHNoLnkgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBhdHRyKGhzaCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFuX2FycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGhhc2ggPSB7fTtcbiAgICAgICAgICAgIHZhciBrZXk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoa2V5IGluIGhzaCkge1xuICAgICAgICAgICAgICAgIGlmIChoc2guaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNoW2tleV0gPSBoc2hba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHNldHVwX2FuaW1fY2xvY2tzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChhbl9hcnJheS5hbmltYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IChhbmltX2Nsb2NrX2Z1bmNzIHx8IFtdKS5sZW5ndGg7IGkrKyApIHsgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbV9jbG9ja19mdW5jc1tpXS50YXJnZXRfc2V0ICE9IGFuX2FycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhbl9hcnJheS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYW5pbV9jbG9ja19mdW5jcy5zcGxpY2UoaSwxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY3Vycl9kaXNwID0gYW5fYXJyYXkudmlzaWJpbGl0eSgpO1xuXG4gICAgICAgICAgICB2YXIgdGFyZ2V0X2Rpc3AgPSBoYXNoLnZpc2liaWxpdHk7XG4gICAgICAgICAgICBpZiAoY3Vycl9kaXNwID09IHRhcmdldF9kaXNwICYmIHRhcmdldF9kaXNwID09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICAgICAgYXR0cihoc2gpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGN1cnJfeSA9IGFuX2FycmF5LmN1cnJlbnR5KCk7XG5cbiAgICAgICAgICAgIGlmIChpc05hTihwYXJzZUludChjdXJyX3ksMTApKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSGF2ZSBhIE5hTiB5IHZhbHVlLCBza2lwcGluZ1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0YXJnZXRfeSA9IHBhcnNlSW50KGhhc2gueSwxMCk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSBoYXNoLnk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyX2Rpc3AgPT0gdGFyZ2V0X2Rpc3AgJiYgdGFyZ2V0X2Rpc3AgPT0gJ3Zpc2libGUnICkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoYXNoLnZpc2liaWxpdHk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0X2Rpc3AgPSBudWxsOyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYXR0cih7J3Zpc2liaWxpdHknIDogJ3Zpc2libGUnfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNoLnZpc2liaWxpdHkgPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgaGFzaC52aXNpYmlsaXR5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRyKGhhc2gpO1xuICAgICAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuXG4gICAgICAgICAgICBpZiAodGFyZ2V0X3kgIT0gY3Vycl95KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1fc3RlcHMgPSAxICogKE1hdGguYWJzKHBhcnNlSW50KCgodGFyZ2V0X3kgLSBjdXJyX3kpLyg1MCpSUykpLDEwKS9yYXRlKSArIDEpO1xuICAgICAgICAgICAgICAgIHZhciBkaWZmID0gKHRhcmdldF95IC0gY3Vycl95KSAvIGFuaW1fc3RlcHM7XG4gICAgICAgICAgICAgICAgaGFzaC55ID0gY3Vycl95IHx8IDA7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdfZnVuYyA9IGFyZ3VtZW50cy5jYWxsZWU7XG4gICAgICAgICAgICAgICAgYW5fYXJyYXkuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBoYXNoLnkgPSBjdXJyX3kgKyBkaWZmKjE7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYW5pbV9jbG9ja19mdW5jcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihzdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlmZiA8IDAgJiYgKGhhc2gueSA8IHRhcmdldF95KSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNoLnkgPSB0YXJnZXRfeTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWZmID4gMCAmJiAoaGFzaC55ID4gdGFyZ2V0X3kpICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc2gueSA9IHRhcmdldF95O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cihoYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gKHN0ZXAgfHwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzaC55ICE9IHRhcmdldF95KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzaC55ID0gY3Vycl95ICsgZGlmZiooY291bnRlcisxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbl9hcnJheS5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRfZGlzcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIoeyd2aXNpYmlsaXR5JyA6IHRhcmdldF9kaXNwfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltX2Nsb2NrX2Z1bmNzLnNwbGljZShhbmltX2Nsb2NrX2Z1bmNzLmluZGV4T2YoYXJndW1lbnRzLmNhbGxlZSksMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGFuaW1fY2xvY2tfZnVuY3NbYW5pbV9jbG9ja19mdW5jcy5sZW5ndGggLSAxXS50YXJnZXRfc2V0ID0gYW5fYXJyYXk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBhbl9hcnJheS5hdHRyID0gZnVuY3Rpb24oaHNoKSB7XG4gICAgICAgICAgICBpZiAoaW5fYW5pbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGUoaHNoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhdHRyKGhzaCk7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB2YXIgYXR0ciA9IGZ1bmN0aW9uKGhzaCkge1xuICAgICAgICAgICAgdmFyIGhhc2ggPSB7fTtcbiAgICAgICAgICAgIHZhciBrZXk7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBoc2gpIHtcbiAgICAgICAgICAgICAgICBpZiAoaHNoLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFzaFtrZXldID0gaHNoW2tleV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY3Vycl9kaXNwID0gYW5fYXJyYXkudmlzaWJpbGl0eSgpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgdGFyZ195ID0gcGFyc2VJbnQoaGFzaC55LDEwKTtcbiAgICAgICAgICAgIHRhcmdfZGlzcCA9IGhhc2gudmlzaWJpbGl0eTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yIChrZXkgaW4gaGFzaCkge1xuICAgICAgICAgICAgICAgIGlmIChoYXNoLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbl9hcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhIGFuX2FycmF5W2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShhbl9hcnJheVtpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICggYW5fYXJyYXlbaV0uc3R5bGUuZGlzcGxheSA9PSAnbm9uZScgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGhhc2hba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gJ3N0eWxlJyAmJiBhbl9hcnJheVtpXS5oYXNBdHRyaWJ1dGUoJ3N0eWxlJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3Vycl9zdHlsZSA9IGFuX2FycmF5W2ldLmdldEF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3N0eWxlICs9ICc7ICcraGFzaFtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gY3Vycl9zdHlsZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNfdHJhbnNsYXRlID0gYW5fYXJyYXlbaV0uaGFzQXR0cmlidXRlKCd0cmFuc2Zvcm0nKSAmJiAoYW5fYXJyYXlbaV0uZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKS5pbmRleE9mKCd0cmFuc2xhdGUnKSA+PSAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PSAnaGVpZ2h0JyAmJiBhbl9hcnJheVtpXS5zZXRIZWlnaHQgKSB7IC8vaGFzQXR0cmlidXRlKCd0cmFuc2Zvcm0nKSAmJiAhIGFuX2FycmF5W2ldLm5vX3NjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5fYXJyYXlbaV0uc2V0SGVpZ2h0KGhhc2hba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgICghIChoYXNfdHJhbnNsYXRlICYmIChrZXkgPT0gJ3knIHx8IGtleSA9PSAneCcpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuX2FycmF5W2ldLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gJ3knICYmIGFuX2FycmF5W2ldLmhhc0F0dHJpYnV0ZSgnZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJfcGF0aCA9IGFuX2FycmF5W2ldLmdldEF0dHJpYnV0ZSgnZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZSA9IC9NXFxzKihbXFxkXFwuXSspIChbXFxkXFwuXSspLztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3BhdGggPSBjdXJyX3BhdGgucmVwbGFjZShyZSwnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKHBhcnNlSW50KHZhbHVlLDEwKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJFcnJvciBcIitrZXkrXCIgaXMgXCIraGFzaFtrZXldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbl9hcnJheVtpXS5zZXRBdHRyaWJ1dGUoJ2QnLCAnTTAgJytwYXJzZUludCh2YWx1ZSwxMCkrJyAnK2N1cnJfcGF0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09ICd5JyAmJiBhbl9hcnJheVtpXS5oYXNBdHRyaWJ1dGUoJ2N5JykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbl9hcnJheVtpXS5zZXRBdHRyaWJ1dGUoJ2N5JywgaGFzaFtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PSAneScgJiYgYW5fYXJyYXlbaV0uaGFzQXR0cmlidXRlKCd0cmFuc2Zvcm0nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJfdHJhbnNmb3JtID0gYW5fYXJyYXlbaV0uZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJfeCA9IC90cmFuc2xhdGVcXCgoLT9cXGQrXFwuP1xcZCopXFxzKiw/XFxzKigtP1xcZCtcXC4/XFxkKik/XFwpLy5leGVjKGFuX2FycmF5W2ldLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyX3ggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJfeCA9IGN1cnJfeFsxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3RyYW5zZm9ybSA9IGN1cnJfdHJhbnNmb3JtLnJlcGxhY2UoL3RyYW5zbGF0ZVxcKCgtP1xcZCtcXC4/XFxkKilcXHMqLD9cXHMqKC0/XFxkK1xcLj9cXGQqKT9cXCkvLCd0cmFuc2xhdGUoJytjdXJyX3grJywnK3ZhbHVlKycpJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5fYXJyYXlbaV0uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLGN1cnJfdHJhbnNmb3JtKTsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gJ3gnICYmIGFuX2FycmF5W2ldLmhhc0F0dHJpYnV0ZSgndHJhbnNmb3JtJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3RyYW5zZm9ybSA9IGFuX2FycmF5W2ldLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3kgPSAvdHJhbnNsYXRlXFwoKC0/XFxkK1xcLj9cXGQqKVxccyosP1xccyooLT9cXGQrXFwuP1xcZCopXFwpLy5leGVjKGFuX2FycmF5W2ldLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyX3kgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJfeSA9IGN1cnJfeVsyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyX3RyYW5zZm9ybSA9IGN1cnJfdHJhbnNmb3JtLnJlcGxhY2UoL3RyYW5zbGF0ZVxcKCgtP1xcZCtcXC4/XFxkKilcXHMqLD9cXHMqKC0/XFxkK1xcLj9cXGQqKVxcKS8sJ3RyYW5zbGF0ZSgnK3ZhbHVlKycsJytjdXJyX3krJyknKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbl9hcnJheVtpXS5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsY3Vycl90cmFuc2Zvcm0pOyAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PSAndGV4dC1hbmNob3InICYmIGFuX2FycmF5W2ldLmhhc0F0dHJpYnV0ZSgnc3R5bGUnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuX2FycmF5W2ldLnN0eWxlLnRleHRBbmNob3IgPSBoYXNoW2tleV07XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBhbl9hcnJheS5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHIoeyAndmlzaWJpbGl0eScgOiAnaGlkZGVuJ30pO1xuICAgICAgICB9O1xuICAgICAgICBhbl9hcnJheS5zaG93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmF0dHIoeyAndmlzaWJpbGl0eScgOiAndmlzaWJsZSd9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBhbl9hcnJheS5yZWZyZXNoX3pvb20gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5fYXJyYXkubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYW5fYXJyYXlbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhbl9hcnJheVtpXS56b29tX2xldmVsICYmIGFuX2FycmF5W2ldLnpvb21fbGV2ZWwgPT0gJ3RleHQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbl9hcnJheVtpXS5vd25lclNWR0VsZW1lbnQgJiYgYW5fYXJyYXlbaV0ub3duZXJTVkdFbGVtZW50Lnpvb20gPiAzLjUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuX2FycmF5W2ldLnNldEF0dHJpYnV0ZSgnZGlzcGxheScsICdpbmxpbmUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuX2FycmF5W2ldLnNldEF0dHJpYnV0ZSgnb3BhY2l0eScsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5fYXJyYXlbaV0uc2V0QXR0cmlidXRlKCdkaXNwbGF5JywgJ25vbmUnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoYW5fYXJyYXlbaV0uem9vbV9sZXZlbCAmJiBhbl9hcnJheVtpXS56b29tX2xldmVsID09ICdzdW1tYXJ5Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYW5fYXJyYXlbaV0ub3duZXJTVkdFbGVtZW50ICYmIGFuX2FycmF5W2ldLm93bmVyU1ZHRWxlbWVudC56b29tIDw9IDMuNSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5fYXJyYXlbaV0uc2V0QXR0cmlidXRlKCdkaXNwbGF5JywgJ2lubGluZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5fYXJyYXlbaV0uc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgMSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbl9hcnJheVtpXS5zZXRBdHRyaWJ1dGUoJ2Rpc3BsYXknLCAnbm9uZScpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhbl9hcnJheTtcbiAgICB9XG5cbiAgICB2YXIgYW5pbV9jbG9ja19mdW5jcyA9IG51bGwsIGluX2FuaW0gPSBmYWxzZTtcbiAgICB2YXIgYW5pbV9jbG9jayA9IG51bGw7XG4gICAgdmFyIHJhdGUgPSA3NTtcbiAgICB2YXIgbmV3X3JhdGUgPSBudWxsO1xuICAgIFxuICAgIHZhciBzZXR1cF9hbmltX2Nsb2NrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYW5pbV9jbG9ja19mdW5jcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgYW5pbV9jbG9ja19mdW5jcyA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbV9jbG9ja19mdW5jcy5mb3JFYWNoKGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAgICAgICAgICAgICBmdW5jLl9sYXN0X3N0ZXAgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGFuaW1fY2xvY2spO1xuICAgICAgICB9XG4gICAgICAgIGlmICggISBpbl9hbmltICkge1xuICAgICAgICAgICAgZXh0ZW5kZWRfZWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihjYW52KSB7XG4gICAgICAgICAgICAgICAgYmVhbi5maXJlKGNhbnYsJ19hbmltX2JlZ2luJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGluX2FuaW0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFydCA9IG51bGw7XG4gICAgICAgIGFuaW1fY2xvY2sgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICggISBhbmltX2Nsb2NrX2Z1bmNzIHx8IGFuaW1fY2xvY2tfZnVuY3MubGVuZ3RoID09PSAwICkge1xuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoYW5pbV9jbG9jayk7XG4gICAgICAgICAgICAgICAgYW5pbV9jbG9jayA9IG51bGw7XG4gICAgICAgICAgICAgICAgYW5pbV9jbG9ja19mdW5jcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgaW5fYW5pbSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGV4dGVuZGVkX2VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oY2Fudikge1xuICAgICAgICAgICAgICAgICAgICBiZWFuLmZpcmUoY2FudiwnX2FuaW1fZW5kJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc3VzcGVuZGVkX2lkcyA9IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBleHRlbmRlZF9lbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKGNhbnYpIHtcbiAgICAgICAgICAgICAgICBzdXNwZW5kZWRfaWRzLnB1c2goY2Fudi5zdXNwZW5kUmVkcmF3KDUwMDApKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIHRpYyA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghIHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IChhbmltX2Nsb2NrX2Z1bmNzIHx8IFtdKS5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcF9pZCA9IHBhcnNlSW50KChlbmQgLSBzdGFydCkvcmF0ZSwxMCk7XG4gICAgICAgICAgICAgICAgaWYgKCBuZXdfcmF0ZSA9PT0gbnVsbCAmJiAoc3RlcF9pZCAtIGFuaW1fY2xvY2tfZnVuY3NbaV0uX2xhc3Rfc3RlcCkgPiAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld19yYXRlID0gTWF0aC5yb3VuZCgxLjYqcmF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFuaW1fY2xvY2tfZnVuY3NbaV0uYXBwbHkobnVsbCxbc3RlcF9pZCAtIChhbmltX2Nsb2NrX2Z1bmNzW2ldLl9sYXN0X3N0ZXAgfHwgc3RlcF9pZCldKTtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbV9jbG9ja19mdW5jcyAmJiBhbmltX2Nsb2NrX2Z1bmNzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1fY2xvY2tfZnVuY3NbaV0uX2xhc3Rfc3RlcCA9IHN0ZXBfaWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHRvYyA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgIGV4dGVuZGVkX2VsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24oY2Fudikge1xuICAgICAgICAgICAgICAgIGNhbnYudW5zdXNwZW5kUmVkcmF3KHN1c3BlbmRlZF9pZHMuc2hpZnQoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGFjdHVhbF9zcGVlZCA9ICh0b2MgLSB0aWMpO1xuICAgICAgICAgICAgaWYgKCggYWN0dWFsX3NwZWVkIDwgcmF0ZSkgJiYgKG5ld19yYXRlID09PSBudWxsKSAmJiBhY3R1YWxfc3BlZWQgPj0gMSApIHtcbiAgICAgICAgICAgICAgICByYXRlID0gTWF0aC5yb3VuZCgxLjUqKHRvYyAtIHRpYykpO1xuICAgICAgICAgICAgICAgIHNldHVwX2FuaW1fY2xvY2tzKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5ld19yYXRlICE9PSBudWxsICYmIG5ld19yYXRlICE9IHJhdGUpIHtcbiAgICAgICAgICAgICAgICByYXRlID0gbmV3X3JhdGU7XG4gICAgICAgICAgICAgICAgc2V0dXBfYW5pbV9jbG9ja3MoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgXG4gICAgICAgIH0scmF0ZSk7XG4gICAgfTtcbiAgICB2YXIgc2NhbGVfcmUgPSAvc2NhbGVcXCgoLT9cXGQrXFwuP1xcZCopXFwpLztcbiAgICB2YXIgc2V0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0KSB7XG4gICAgICAgIHZhciBjdXJyX3RyYW5zZm9ybSA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKS50b1N0cmluZygpO1xuXG4gICAgICAgIHZhciBjdXJyX3NjYWxlID0gc2NhbGVfcmUuZXhlYyhjdXJyX3RyYW5zZm9ybSk7XG4gICAgXG4gICAgICAgIHZhciBjdXJyX2hlaWdodCA9IHBhcnNlRmxvYXQodGhpcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpIHx8IDEpO1xuXG4gICAgICAgIHZhciBuZXdfc2NhbGUgPSAxO1xuICAgICAgICBpZiAoY3Vycl9zY2FsZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgY3Vycl90cmFuc2Zvcm0gKz0gJyBzY2FsZSgxKSAnO1xuICAgICAgICAgICAgY3Vycl9zY2FsZSA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyX3NjYWxlID0gcGFyc2VGbG9hdChjdXJyX3NjYWxlWzFdKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfc2NhbGUgPSAoIHBhcnNlRmxvYXQoaGVpZ2h0KSAvIGN1cnJfaGVpZ2h0ICkgKiBjdXJyX3NjYWxlO1xuXG4gICAgICAgIGN1cnJfdHJhbnNmb3JtID0gY3Vycl90cmFuc2Zvcm0ucmVwbGFjZShzY2FsZV9yZSwnc2NhbGUoJytuZXdfc2NhbGUrJyknKTtcblxuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJyxjdXJyX3RyYW5zZm9ybSk7XG4gICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLGhlaWdodCk7XG4gICAgICAgIHJldHVybiBuZXdfc2NhbGU7XG4gICAgfTtcblxuICAgIHJldHVybiAoZnVuY3Rpb24oY2FudmFzKSB7XG4gICAgICAgIFxuICAgICAgICB2YXIgUlMgPSBjYW52YXMuUlMgfHwgREVGQVVMVF9SUztcbiAgICAgICAgY2FudmFzLlJTID0gUlM7XG4gICAgICAgIGNhbnZhcy5mb250X29yZGVyID0gJ0hlbHZldGljYSwgVmVyZGFuYSwgQXJpYWwsIFNhbnMtc2VyaWYnXG4gICAgICAgIGV4dGVuZGVkX2VsZW1lbnRzLnB1c2goY2FudmFzKTtcbiAgICAgICAgXG4gICAgICAgIGNhbnZhcy5tYWtlRWwgPSBmdW5jdGlvbihuYW1lLGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjYW52YXMub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsbmFtZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBhdHRyaWJ1dGUgaW4gYXR0cmlidXRlcykge1xuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcblxuICAgICAgICBjYW52YXMubWFrZV9ncmFkaWVudCA9IGZ1bmN0aW9uKGlkLHgyLHkyLHN0b3BzLG9wYWNpdGllcykge1xuICAgICAgICAgICAgdmFyIGdyYWRpZW50ID0gdGhpcy5tYWtlRWwoJ2xpbmVhckdyYWRpZW50Jyx7XG4gICAgICAgICAgICAgICAgJ2lkJzogaWQsXG4gICAgICAgICAgICAgICAgJ3gxJzonMCUnLFxuICAgICAgICAgICAgICAgICd4Mic6IHgyLFxuICAgICAgICAgICAgICAgICd5MSc6JzAlJyxcbiAgICAgICAgICAgICAgICAneTInOiB5MlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgdG90YWxfc3RvcHMgPSBzdG9wcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZShzdG9wcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFyIHN0b3BfaWQgPSBNYXRoLnJvdW5kKCAoKHRvdGFsX3N0b3BzIC0gc3RvcHMubGVuZ3RoKSAvIHRvdGFsX3N0b3BzKSAqIDEwMCApO1xuICAgICAgICAgICAgICAgIHZhciBzdG9wID0gc3RvcHMuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICB2YXIgb3BhY2l0eSA9IG9wYWNpdGllcy5zaGlmdCgpO1xuICAgICAgICAgICAgICAgIGdyYWRpZW50LmFwcGVuZENoaWxkKHRoaXMubWFrZUVsKCdzdG9wJyx7XG4gICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiBzdG9wX2lkKyclJyxcbiAgICAgICAgICAgICAgICAgICAgJ3N0eWxlJzonc3RvcC1jb2xvcjonK3N0b3ArJztzdG9wLW9wYWNpdHk6JytvcGFjaXR5XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGdyYWRpZW50O1xuICAgICAgICB9O1xuXG5cbiAgICAgICAgY2FudmFzLnBhdGggPSBmdW5jdGlvbihwYXRoZGVzYykge1xuICAgICAgICAgICAgdmFyIGFfcGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywncGF0aCcpO1xuICAgICAgICAgICAgYV9wYXRoLnNldEF0dHJpYnV0ZSgnZCcsIHBhdGhkZXNjKTtcbiAgICAgICAgICAgIGFfcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJyMwMDAwMDAnKTtcbiAgICAgICAgICAgIGFfcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsJzEnKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYV9wYXRoKTtcbiAgICAgICAgICAgIHJldHVybiBhX3BhdGg7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FudmFzLnBvbHkgPSBmdW5jdGlvbihwb2ludHMpIHtcbiAgICAgICAgICAgIHZhciBhX3BvbHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsJ3BvbHlnb24nKTtcbiAgICAgICAgICAgIGFfcG9seS5zZXRBdHRyaWJ1dGUoJ3BvaW50cycscG9pbnRzKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYV9wb2x5KTtcbiAgICAgICAgICAgIHJldHVybiBhX3BvbHk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FudmFzLmNpcmNsZSA9IGZ1bmN0aW9uKHgseSxyYWRpdXMpIHtcbiAgICAgICAgICAgIHZhciBhX2NpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywnY2lyY2xlJyk7XG4gICAgICAgICAgICBhX2NpcmNsZS5zZXRBdHRyaWJ1dGUoJ2N4JywgdHlwZW9mIHggPT0gJ3N0cmluZycgPyB4IDogeCAqIFJTKTtcbiAgICAgICAgICAgIGFfY2lyY2xlLnNldEF0dHJpYnV0ZSgnY3knLCB0eXBlb2YgeSA9PSAnc3RyaW5nJyA/IHkgOiB5ICogUlMpO1xuICAgICAgICAgICAgYV9jaXJjbGUuc2V0QXR0cmlidXRlKCdyJywgdHlwZW9mIHJhZGl1cyA9PSAnc3RyaW5nJyA/IHJhZGl1cyA6IHJhZGl1cyAqIFJTKTtcbiAgICAgICAgICAgIGFfY2lyY2xlLm1vdmUgPSBmdW5jdGlvbihuZXdfeCkge1xuICAgICAgICAgICAgICAgIGFfY2lyY2xlLnNldEF0dHJpYnV0ZSgnY3gnLG5ld194KlJTKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGFfY2lyY2xlKTtcbiAgICAgICAgICAgIHJldHVybiBhX2NpcmNsZTtcbiAgICAgICAgfTtcblxuICAgICAgICBjYW52YXMuZ3JvdXAgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhX2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsJ2cnKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYV9nKTtcbiAgICAgICAgICAgIGFfZy5wdXNoID0gZnVuY3Rpb24obmV3X2VsKSB7XG4gICAgICAgICAgICAgICAgYV9nLmFwcGVuZENoaWxkKG5ld19lbCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gYV9nO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNhbnZhcy5jbGlwUGF0aCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCdjbGlwUGF0aCcpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChlbCk7XG4gICAgICAgICAgICBlbC5wdXNoID0gZnVuY3Rpb24obmV3X2VsKSB7XG4gICAgICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQobmV3X2VsKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH07XG5cblxuICAgICAgICBjYW52YXMubGluZSA9IGZ1bmN0aW9uKHgseSx4Mix5Mikge1xuICAgICAgICAgICAgdmFyIGFfbGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywnbGluZScpO1xuICAgICAgICAgICAgYV9saW5lLnNldEF0dHJpYnV0ZSgneDEnLCB0eXBlb2YgeCA9PSAnc3RyaW5nJyA/IHggOiB4ICogUlMpO1xuICAgICAgICAgICAgYV9saW5lLnNldEF0dHJpYnV0ZSgneTEnLCB0eXBlb2YgeSA9PSAnc3RyaW5nJyA/IHkgOiB5ICogUlMpO1xuICAgICAgICAgICAgYV9saW5lLnNldEF0dHJpYnV0ZSgneDInLCB0eXBlb2YgeDIgPT0gJ3N0cmluZycgPyB4MiA6IHgyICogUlMpO1xuICAgICAgICAgICAgYV9saW5lLnNldEF0dHJpYnV0ZSgneTInLCB0eXBlb2YgeTIgPT0gJ3N0cmluZycgPyB5MiA6IHkyICogUlMpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChhX2xpbmUpO1xuICAgICAgICAgICAgcmV0dXJuIGFfbGluZTsgICAgICAgIFxuICAgICAgICB9O1xuXG4gICAgICAgIGNhbnZhcy5yZWN0ID0gZnVuY3Rpb24oeCx5LHdpZHRoLGhlaWdodCxvcHRzKSB7XG4gICAgICAgICAgICBpZiAoICEgb3B0cyApIHtcbiAgICAgICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYV9yZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCdyZWN0Jyk7XG4gICAgICAgICAgICBhX3JlY3Quc2V0QXR0cmlidXRlKCd4JywgdHlwZW9mIHggPT0gJ3N0cmluZycgPyB4IDogeCAqIFJTKTtcbiAgICAgICAgICAgIGFfcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCB0eXBlb2YgeSA9PSAnc3RyaW5nJyA/IHkgOiB5ICogUlMpO1xuICAgICAgICAgICAgYV9yZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0eXBlb2Ygd2lkdGggPT0gJ3N0cmluZycgPyB3aWR0aCA6IHdpZHRoICogUlMpO1xuICAgICAgICAgICAgYV9yZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdHlwZW9mIGhlaWdodCA9PSAnc3RyaW5nJyA/IGhlaWdodCA6IGhlaWdodCAqIFJTKTtcbiAgICAgICAgICAgIGFfcmVjdC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJyMwMDAwMDAnKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYV9yZWN0KTtcbiAgICAgICAgICAgIGlmICggdHlwZW9mKG9wdHMub2Zmc2V0KSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcbiAgICAgICAgICAgICAgICBhX3JlY3Qub2Zmc2V0ID0gb3B0cy5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgYV9yZWN0LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKCcrYV9yZWN0LmdldEF0dHJpYnV0ZSgneCcpKycsJythX3JlY3QuZ2V0QXR0cmlidXRlKCd5JykrJyknKTtcbiAgICAgICAgICAgICAgICBhX3JlY3Quc2V0QXR0cmlidXRlKCd4JywnMCcpO1xuICAgICAgICAgICAgICAgIGFfcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLGFfcmVjdC5vZmZzZXQqUlMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhX3JlY3QubW92ZSA9IGZ1bmN0aW9uKG5ld194LG5ld193aWR0aCkge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mKHRoaXMub2Zmc2V0KSAhPT0gXCJ1bmRlZmluZWRcIikgJiYgdGhpcy5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1fYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAvdHJhbnNsYXRlXFwoLipbLFxcc10oLiopXFwpLy5leGVjKHRyYW5zZm9ybV9hdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXNbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKCcrKG5ld194KlJTKSsnLCcrbWF0Y2hlc1sxXSsnKScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd3aWR0aCcsbmV3X3dpZHRoKlJTKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgneCcsbmV3X3gqUlMpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLG5ld193aWR0aCpSUyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiBhX3JlY3Q7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FudmFzLnJvdW5kUmVjdCA9IGZ1bmN0aW9uKHgseSx3aWR0aCxoZWlnaHQscixvcHRzKSB7XG4gICAgICAgICAgICB2YXIgYV9yZWN0ID0gdGhpcy5yZWN0KHgseSx3aWR0aCxoZWlnaHQsb3B0cyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHIgIT0gJ29iamVjdCcgfHwgISByLnggKSB7XG4gICAgICAgICAgICAgICAgciA9IHsgJ3gnIDogciwgJ3knIDogciB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYV9yZWN0LnNldEF0dHJpYnV0ZSgncngnLHIueCpSUyk7XG4gICAgICAgICAgICBhX3JlY3Quc2V0QXR0cmlidXRlKCdyeScsci55KlJTKTtcbiAgICAgICAgICAgIHJldHVybiBhX3JlY3Q7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FudmFzLmVsbGlwdGljYWxSZWN0ID0gZnVuY3Rpb24oeCx5LHdpZHRoLGhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm91bmRSZWN0KHgseSx3aWR0aCxoZWlnaHQseyd4JyA6IDAuMjUqd2lkdGgsICd5JyA6IDAuNSpoZWlnaHR9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FudmFzLnBlbnRhZ29uID0gZnVuY3Rpb24oeCx5LHdpZHRoLGhlaWdodCxyb3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hZ29uKHgseSx3aWR0aCxoZWlnaHQsNSxyb3RhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGNhbnZhcy5oZXhhZ29uID0gZnVuY3Rpb24oeCx5LHdpZHRoLGhlaWdodCxyb3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hZ29uKHgseSx3aWR0aCxoZWlnaHQsNixyb3RhdGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBzaGFwZV9zZXRfYXR0cmlidXRlID0gZnVuY3Rpb24oYXR0cix2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLnNldEF0dHJpYnV0ZS5jYWxsKHRoaXMsYXR0cix2YWwpO1xuICAgICAgICAgICAgaWYgKGF0dHIgPT0gJ2hlaWdodCcgfHwgYXR0ciA9PSAnd2lkdGgnIHx8IGF0dHIgPT0gJ3gnIHx8IGF0dHIgPT0gJ3knKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWRyYXcoTWF0aC5mbG9vcihwYXJzZUZsb2F0KHRoaXMuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjYW52YXMubmFnb24gPSBmdW5jdGlvbih4LHksd2lkdGgsaGVpZ2h0LG4scm90YXRlKSB7XG4gICAgICAgICAgICB2YXIgc2hhcGUgPSB0aGlzLnBvbHkoXCJcIik7XG4gICAgICAgICAgICAvLyBzaGFwZS5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsJ3RyYW5zbGF0ZSgnKyh4KlJTKSsnLCcrKFJTKnkpKycpJyk7XG4gICAgICAgICAgICBzaGFwZS5zZXRBdHRyaWJ1dGUoJ3gnLHgqUlMpO1xuICAgICAgICAgICAgc2hhcGUuc2V0QXR0cmlidXRlKCd5Jyx5KlJTKTtcbiAgICAgICAgICAgIHNoYXBlLnNldEF0dHJpYnV0ZSgnd2lkdGgnLHdpZHRoKlJTKTtcbiAgICAgICAgICAgIHNoYXBlLnJlZHJhdyA9IGZ1bmN0aW9uKGhnaHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGdodCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxhc3RfaGVpZ2h0ID0gaGdodDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoZ2h0ID0gdGhpcy5sYXN0X2hlaWdodDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGEgPSAwLjUqTWF0aC5mbG9vcihwYXJzZUZsb2F0KHNoYXBlLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSkpO1xuICAgICAgICAgICAgICAgIHZhciBiID0gMC41KmhnaHQ7XG4gICAgICAgICAgICAgICAgdmFyIHBvaW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBtaW5feCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIG1heF94ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuZ2xlID0gKHJvdGF0ZS8zNjAgKiAyKk1hdGguUEkpICsgMi9uKk1hdGguUEkqaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFfeCA9IHBhcnNlSW50KGErYSpNYXRoLmNvcyhhbmdsZSkpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYV95ID0gcGFyc2VJbnQoYitiKk1hdGguc2luKGFuZ2xlKSk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKCBbYV94LCBhX3ldICk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtaW5feCA9PT0gbnVsbCB8fCBhX3ggPCBtaW5feCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbl94ID0gYV94O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXhfeCA9PT0gbnVsbCB8fCBhX3ggPiBtYXhfeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF4X3ggPSBhX3g7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIHhfcG9zID0gTWF0aC5mbG9vcihwYXJzZUZsb2F0KHNoYXBlLmdldEF0dHJpYnV0ZSgneCcpKSk7XG4gICAgICAgICAgICAgICAgdmFyIHlfcG9zID0gTWF0aC5mbG9vcihwYXJzZUZsb2F0KHNoYXBlLmdldEF0dHJpYnV0ZSgneScpKSk7XG4gICAgICAgICAgICAgICAgcG9pbnRzLm1hcChmdW5jdGlvbihwb2ludHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50c1swXSA9PSBtaW5feCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnRzWzBdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnRzWzBdID09IG1heF94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb2ludHNbMF0gPSBhKjI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzWzBdICs9IHhfcG9zO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHNbMV0gPSB5X3BvcyArIDAuNSpoZ2h0Kihwb2ludHNbMV0gLyBiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cy5qb2luKFwiLFwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgncG9pbnRzJyxwb2ludHMuam9pbihcIiBcIikpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHNoYXBlLnNldEhlaWdodCA9IHNoYXBlLnJlZHJhdztcbiAgICAgICAgICAgIHNoYXBlLm1vdmUgPSBmdW5jdGlvbihuZXdfeCxuZXdfd2lkdGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3Vycl95ID0gL3RyYW5zbGF0ZVxcKCgtP1xcZCtcXC4/XFxkKilcXHMqLD9cXHMqKC0/XFxkK1xcLj9cXGQqKVxcKS8uZXhlYyh0aGlzLmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJykpO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyX3kgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyX3kgPSBjdXJyX3lbMl07XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJfdHJhbnNmb3JtID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoL3RyYW5zbGF0ZVxcKCgtP1xcZCtcXC4/XFxkKilcXHMqLD9cXHMqKC0/XFxkK1xcLj9cXGQqKVxcKS8sJ3RyYW5zbGF0ZSgnKyhuZXdfeCpSUykrJywnK2N1cnJfeSsnKScpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLGN1cnJfdHJhbnNmb3JtKTtcbiAgICAgICAgICAgICAgICBhID0gMC41Km5ld193aWR0aCpSUztcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzaGFwZS5zZXRBdHRyaWJ1dGUgPSBzaGFwZV9zZXRfYXR0cmlidXRlO1xuICAgICAgICAgICAgc2hhcGUucmVkcmF3KGhlaWdodCpSUyk7XG4gICAgICAgICAgICByZXR1cm4gc2hhcGU7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FudmFzLnVzZSA9IGZ1bmN0aW9uKHJlZix4LHksd2lkdGgsaGVpZ2h0KSB7XG4gICAgICAgICAgICB2YXIgYV91c2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsJ3VzZScpO1xuICAgICAgICAgICAgYV91c2Uuc2V0QXR0cmlidXRlKCd4JywgdHlwZW9mIHggPT0gJ3N0cmluZycgPyB4IDogeCAqIFJTKTtcbiAgICAgICAgICAgIGFfdXNlLnNldEF0dHJpYnV0ZSgneScsIHR5cGVvZiB5ID09ICdzdHJpbmcnID8geSA6IHkgKiBSUyk7XG4gICAgICAgICAgICBhX3VzZS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdHlwZW9mIHdpZHRoID09ICdzdHJpbmcnID8gd2lkdGggOiB3aWR0aCAqIFJTKTtcbiAgICAgICAgICAgIGFfdXNlLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdHlwZW9mIGhlaWdodCA9PSAnc3RyaW5nJyA/IGhlaWdodCA6IGhlaWdodCAqIFJTKTtcbiAgICAgICAgICAgIGFfdXNlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywnaHJlZicscmVmKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoYV91c2UpO1xuXG4gICAgICAgICAgICByZXR1cm4gYV91c2U7ICAgICAgICBcbiAgICAgICAgfTtcblxuICAgICAgICBjYW52YXMuYSA9IGZ1bmN0aW9uKGhyZWYpIHtcbiAgICAgICAgICAgIHZhciBhX2FuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywnYScpO1xuICAgICAgICAgICAgYV9hbmNob3Iuc2V0QXR0cmlidXRlKCd0YXJnZXQnLCdfbmV3Jyk7ICAgICAgICBcbiAgICAgICAgICAgIGFfYW5jaG9yLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywnaHJlZicsaHJlZik7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGFfYW5jaG9yKTtcbiAgICAgICAgICAgIHJldHVybiBhX2FuY2hvcjtcbiAgICAgICAgfTtcblxuICAgICAgICBjYW52YXMuYnV0dG9uID0gZnVuY3Rpb24oeCx5LHdpZHRoLGhlaWdodCx0ZXh0KSB7XG4gICAgICAgICAgICB2YXIgZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsJ2ZvcmVpZ25PYmplY3QnKTtcbiAgICAgICAgICAgIGZvLnNldEF0dHJpYnV0ZSgneCcseCk7XG4gICAgICAgICAgICBmby5zZXRBdHRyaWJ1dGUoJ3knLHkpO1xuICAgICAgICAgICAgZm8uc2V0QXR0cmlidXRlKCd3aWR0aCcseCt3aWR0aCk7XG4gICAgICAgICAgICBmby5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcseStoZWlnaHQpO1xuICAgICAgICAgICAgaWYgKCAhIGZvLnN0eWxlICkge1xuICAgICAgICAgICAgICAgIGZvLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCdwb3NpdGlvbjogYWJzb2x1dGU7Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYXBwZW5kQ2hpbGQoZm8pO1xuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICAgICAgICAgICAgYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgICAgYnV0dG9uLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgIGZvLmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgICAgICB9O1xuXG4gICAgICAgIGNhbnZhcy5zdmdidXR0b24gPSBmdW5jdGlvbih4LHksd2lkdGgsaGVpZ2h0LHR4dCkge1xuICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IHRoaXMuZ3JvdXAoKTtcbiAgICAgICAgICAgIHZhciBiYWNrID0gdGhpcy5yZWN0KHgseSx3aWR0aCxoZWlnaHQpO1xuICAgICAgICAgICAgYmFjay5zZXRBdHRyaWJ1dGUoJ3J4JywnMTAnKTtcbiAgICAgICAgICAgIGJhY2suc2V0QXR0cmlidXRlKCdyeScsJzEwJyk7XG4gICAgICAgICAgICBiYWNrLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywnI2ZmZmZmZicpO1xuICAgICAgICAgICAgYmFjay5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsJzInKTtcbiAgICAgICAgICAgIGJhY2suc2V0QXR0cmlidXRlKCdmaWxsJywndXJsKCNzaW1wbGVfZ3JhZGllbnQpJyk7XG4gICAgICAgICAgICB4ID0gYmFjay54LmJhc2VWYWwudmFsdWU7XG4gICAgICAgICAgICB5ID0gYmFjay55LmJhc2VWYWwudmFsdWU7XG4gICAgICAgICAgICB3aWR0aCA9IGJhY2sud2lkdGguYmFzZVZhbC52YWx1ZTtcbiAgICAgICAgICAgIGhlaWdodCA9IGJhY2suaGVpZ2h0LmJhc2VWYWwudmFsdWU7XG5cbiAgICAgICAgICAgIHZhciB0ZXh0ID0gdGhpcy50ZXh0KHgrd2lkdGgvMix5KyhoZWlnaHQvMyksdHh0KTsgICAgICAgIFxuICAgICAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpO1xuICAgICAgICAgICAgdGV4dC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSgnZHknLCAnMS41ZXgnKTtcbiAgICAgICAgICAgIHRleHQuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLDAuNSpoZWlnaHQpO1xuICAgICAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCcjZmZmZmZmJyk7XG4gICAgICAgICAgICBidXR0b24ucHVzaChiYWNrKTtcbiAgICAgICAgICAgIGJ1dHRvbi5wdXNoKHRleHQpO1xuICAgICAgICAgICAgYnV0dG9uLmJhY2tncm91bmRfZWxlbWVudCA9IGJhY2s7XG4gICAgICAgICAgICBidXR0b24udGV4dF9lbGVtZW50ID0gdGV4dDtcblxuICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnY3Vyc29yJywncG9pbnRlcicpO1xuICAgICAgICAgICAgdmFyIGJ1dHRvbl90cmlnZ2VyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgYmFjay5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCcjOTk5OTk5Jyk7XG4gICAgICAgICAgICAgICAgYmFjay5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJyMwMDAwMDAnKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJyxidXR0b25fdHJpZ2dlcixmYWxzZSk7XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsYnV0dG9uX3RyaWdnZXIsZmFsc2UpO1xuICAgICAgICAgICAgdmFyIGJ1dHRvbl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGJhY2suc2V0QXR0cmlidXRlKCdzdHJva2UnLCcjZmZmZmZmJyk7XG4gICAgICAgICAgICAgICAgYmFjay5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCd1cmwoI3NpbXBsZV9ncmFkaWVudCknKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsYnV0dG9uX3Jlc2V0LGZhbHNlKTtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsYnV0dG9uX3Jlc2V0LGZhbHNlKTtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsYnV0dG9uX3Jlc2V0LGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybiBidXR0b247XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FudmFzLmNhbGxvdXQgPSBmdW5jdGlvbih4LHksY29udGVudCxvcHRzKSB7XG4gICAgICAgICAgICB2YXIgY2FsbG91dCA9IHRoaXMuZ3JvdXAoKTtcbiAgICAgICAgICAgIHZhciBiYWNrID0gdGhpcy5yb3VuZFJlY3QoLTAuNSoob3B0cy53aWR0aCs0KSwyMCxvcHRzLndpZHRoKzQsb3B0cy5oZWlnaHQrNCw0KTtcbiAgICAgICAgICAgIGJhY2suc2V0QXR0cmlidXRlKCdmaWxsJywnIzAwMDAwMCcpO1xuICAgICAgICAgICAgdmFyIHByZXNfYm94ID0gdGhpcy5yb3VuZFJlY3QoLTAuNSoob3B0cy53aWR0aCsxKSwyMixvcHRzLndpZHRoKzEsb3B0cy5oZWlnaHQsNCk7XG4gICAgICAgICAgICBwcmVzX2JveC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCcjZWVlZWVlJyk7XG4gICAgICAgICAgICBjYWxsb3V0LnB1c2goYmFjayk7XG4gICAgICAgICAgICBjYWxsb3V0LnB1c2gocHJlc19ib3gpO1xuICAgICAgICAgICAgdmFyIHBvbHkgPSB0aGlzLnBvbHkoJzAsNTAwIDUwMCwxMDAwIC01MDAsMTAwMCcpO1xuICAgICAgICAgICAgcG9seS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCcjMDAwMDAwJyk7XG4gICAgICAgICAgICBjYWxsb3V0LnB1c2gocG9seSk7XG4gICAgICAgICAgICB2YXIgZm8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsJ2ZvcmVpZ25PYmplY3QnKTtcbiAgICAgICAgICAgIGZvLnNldEF0dHJpYnV0ZSgneCcsLTAuNSoob3B0cy53aWR0aCsxKSpSUyk7XG4gICAgICAgICAgICBmby5zZXRBdHRyaWJ1dGUoJ3knLDIyKlJTKTtcbiAgICAgICAgICAgIGZvLnNldEF0dHJpYnV0ZSgnd2lkdGgnLG9wdHMud2lkdGgqUlMpO1xuICAgICAgICAgICAgZm8uc2V0QXR0cmlidXRlKCdoZWlnaHQnLG9wdHMuaGVpZ2h0KlJTKTtcbiAgICAgICAgICAgIGNhbGxvdXQucHVzaChmbyk7XG4gICAgICAgICAgICB2YXIgaHRtbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsJ2h0bWwnKTtcbiAgICAgICAgICAgIGh0bWwuc2V0QXR0cmlidXRlKCd4bWxucycsJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnKTtcbiAgICAgICAgICAgIHZhciBib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sJywnYm9keScpO1xuICAgICAgICAgICAgYm9keS5zdHlsZS5mb250U2l6ZSA9ICgob3B0c1snZm9udC1zaXplJ10gfHwgMTUpKlJTKSArJ3B4JztcbiAgICAgICAgICAgIGJvZHkuc3R5bGUubWFyZ2luID0gKDUqUlMpKydweCc7XG4gICAgICAgICAgICBib2R5LnN0eWxlLmhlaWdodCA9IG9wdHMuaGVpZ2h0KlJTKjEwKydweCc7XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKGJvZHkpO1xuICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChjb250ZW50KTtcbiAgICAgICAgICAgIGZvLmFwcGVuZENoaWxkKGh0bWwpO1xuICAgICAgICAgICAgdmFyIHNjYWxlID0gb3B0cy5oZWlnaHQvMTU7XG4gICAgICAgICAgICBjYWxsb3V0LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKCcrKHgqUlMpKycsJysoKHkrMjApKlJTKSsnKSBzY2FsZSgnK3NjYWxlKycpJyk7XG4gICAgICAgICAgICBjYWxsb3V0LnNldEhlaWdodCA9IHNldEhlaWdodDtcbiAgICAgICAgICAgIGlmICggISBvcHRzLmFsaWduICkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyVmJveCA9IHBhcnNlRmxvYXQodGhpcy5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKS5zcGxpdCgvXFxzKy8pWzJdKTtcbiAgICAgICAgICAgICAgICBpZiAoKCh4ICsgMTApICsgMC41Km9wdHMud2lkdGgpKlJTID4gY3VyclZib3ggKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuYWxpZ24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoKHggLSAwLjUqb3B0cy53aWR0aCkqUlMgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdHMuYWxpZ24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdHMuYWxpZ24pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2hpZnRlciA9IG9wdHMuYWxpZ24gPT0gXCJyaWdodFwiID8gLTAuNSA6IDAuNTtcbiAgICAgICAgICAgICAgICBiYWNrLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnKyhzaGlmdGVyKm9wdHMud2lkdGgqUlMpKycsMCknKTtcbiAgICAgICAgICAgICAgICBwcmVzX2JveC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJysoc2hpZnRlcipvcHRzLndpZHRoKlJTKSsnLDApJyk7XG4gICAgICAgICAgICAgICAgcG9seS5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJysoMCpzaGlmdGVyKm9wdHMud2lkdGgqUlMpKycsMCknKTtcbiAgICAgICAgICAgICAgICBwb2x5LnNldEF0dHJpYnV0ZSgncG9pbnRzJywgc2hpZnRlciA+IDAgPyBcIjAsNTAwIDUwMCwxMDAwIDAsMTAwMFwiIDogXCIwLDUwMCAwLDEwMDAgLTUwMCwxMDAwXCIpO1xuICAgICAgICAgICAgICAgIGZvLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnKyhzaGlmdGVyKm9wdHMud2lkdGgqUlMpKycsMCknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxvdXQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLChvcHRzLmhlaWdodCkqUlMpO1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxvdXQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgY2FudmFzLmdyb3dpbmdNYXJrZXIgPSBmdW5jdGlvbih4LHksc3ltYm9sLG9wdHMpIHtcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsJ3N2ZycpO1xuICAgICAgICAgICAgaWYgKCAhIG9wdHMuc3RyZXRjaCAmJiAhIChBcnJheS5pc0FycmF5ICYmIEFycmF5LmlzQXJyYXkob3B0cy5jb250ZW50KSkgKSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgndmlld0JveCcsICctNTAgLTEwMCAyMDAgMjUwJyk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWluWU1pbiBtZWV0Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IHRoaXMuZ3JvdXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3gnLHgpO1xuICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgneScseSk7XG4gICAgICAgICAgICB2YXIgdGhlX21hcmtlciA9IHRoaXMubWFya2VyKDUwL1JTLCg1MCkvUlMsNTAvUlMsc3ltYm9sLG9wdHMpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRoZV9tYXJrZXIpO1xuICAgICAgICAgICAgY29udGFpbmVyLmNvbnRlbnRFbGVtZW50ID0gdGhlX21hcmtlci5jb250ZW50RWxlbWVudDtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0aGlzLmdyb3VwKCk7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb25pbmdfZ3JvdXAgPSB0aGlzLmdyb3VwKCk7XG4gICAgICAgICAgICByZXN1bHQuYXBwZW5kQ2hpbGQocG9zaXRpb25pbmdfZ3JvdXApO1xuICAgICAgICAgICAgcG9zaXRpb25pbmdfZ3JvdXAuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgICAgIGlmICggISBvcHRzLnN0cmV0Y2ggJiYgISAoQXJyYXkuaXNBcnJheSAmJiBBcnJheS5pc0FycmF5KG9wdHMuY29udGVudCkpICkge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywnMjAwJyk7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywnMjUwJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0cy5hbmdsZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5hbmdsZSA9IG9wdHMuYW5nbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB2YXIgcmVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywncmVjdCcpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJyNmMDAnKTtcbiAgICAgICAgICAgIC8vIHJlY3Quc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCcxMCcpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCctNTAnKTtcbiAgICAgICAgICAgIC8vIHJlY3Quc2V0QXR0cmlidXRlKCd5JywnLTEwMCcpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywnMTAwJScpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsJzEwMCUnKTtcbiAgICAgICAgICAgIC8vIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywnbm9uZScpO1xuICAgICAgICAgICAgLy8gY29udGFpbmVyLmFwcGVuZENoaWxkKHJlY3QpO1xuXG4gICAgICAgICAgICAvLyB2YXIgcmVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmducywncmVjdCcpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsJyMwZjAnKTtcbiAgICAgICAgICAgIC8vIHJlY3Quc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCcxMCcpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCc1MCcpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCcyNScpO1xuICAgICAgICAgICAgLy8gcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywnNTAlJyk7XG4gICAgICAgICAgICAvLyByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywnNTAlJyk7XG4gICAgICAgICAgICAvLyByZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsJ25vbmUnKTtcblxuICAgICAgICAgICAgLy8gY29udGFpbmVyLmFwcGVuZENoaWxkKHJlY3QpO1xuXG4gICAgICAgICAgICByZXN1bHQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCcyNTAnKTtcbiAgICAgICAgICAgIHJlc3VsdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsJ3NjYWxlKDEpJyk7XG4gICAgICAgICAgICByZXN1bHQuc2V0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGVfdmFsID0gc2V0SGVpZ2h0LmNhbGwodGhpcyxoZWlnaHQpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLGhlaWdodCk7XG4gICAgICAgICAgICAgICAgdmFyIHRvcF9vZmZzZXQgPSB0aGlzLm9mZnNldCB8fCAwO1xuICAgICAgICAgICAgICAgIGlmICggISB0aGlzLmFuZ2xlICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuZ2xlID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKC0xMDAsJysodG9wX29mZnNldCpSUykrJykgcm90YXRlKCcrdGhpcy5hbmdsZSsnLDEwMCwwKScpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJlc3VsdC5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGNhbnZhcy5tYXJrZXIgPSBmdW5jdGlvbihjeCxjeSxyLHN5bWJvbCxvcHRzKSB7XG4gICAgICAgICAgICB2YXIgdW5pdHMgPSAwO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjeCA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IG5ldyBSZWdFeHAoLyhcXGQrKSguKikvZykuZXhlYyhjeCk7XG4gICAgICAgICAgICAgICAgdW5pdHMgPSBwYXJ0c1syXTtcbiAgICAgICAgICAgICAgICBjeCA9IHBhcnNlRmxvYXQocGFydHNbMV0pO1xuXG4gICAgICAgICAgICAgICAgcGFydHMgPSBuZXcgUmVnRXhwKC8oXFxkKykoLiopL2cpLmV4ZWMoY3kpO1xuICAgICAgICAgICAgICAgIGN5ID0gcGFyc2VGbG9hdChwYXJ0c1sxXSk7XG5cbiAgICAgICAgICAgICAgICBwYXJ0cyA9IG5ldyBSZWdFeHAoLyhcXGQrKSguKikvZykuZXhlYyhyKTtcbiAgICAgICAgICAgICAgICByID0gcGFyc2VGbG9hdChwYXJ0c1sxXSk7ICAgICAgICBcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgZGltID0ge1xuICAgICAgICAgICAgICAgIENYICAgICAgOiBjeCt1bml0cyxcbiAgICAgICAgICAgICAgICBDWSAgICAgIDogY3krdW5pdHMsXG4gICAgICAgICAgICAgICAgUiAgICAgICA6IHIrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUlOX1ggICA6IChjeC1yKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNQVhfWCAgIDogKGN4K3IpK3VuaXRzLFxuICAgICAgICAgICAgICAgIE1JTl9ZICAgOiAoY3ktcikrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUFYX1kgICA6IChjeStyKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWDEgIDogKGN4LShyLzIpKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWDIgIDogKGN4KyhyLzIpKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWTEgIDogKGN5LShyLzIpKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWTIgIDogKGN5KyhyLzIpKSt1bml0c1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG1hcmtlciA9IHRoaXMuZ3JvdXAoKTtcbiAgICAgICAgICAgIGlmICghIG9wdHMgKSB7XG4gICAgICAgICAgICAgICAgb3B0cyA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGZpbGxfY29sb3IgPSAob3B0cyAmJiBvcHRzLmJvcmRlcikgPyBvcHRzLmJvcmRlciA6ICdyZ2IoMCwwLDApJztcbiAgICAgICAgICAgIGlmICggISBvcHRzLmJhcmVfZWxlbWVudCApIHtcbiAgICAgICAgICAgICAgICBpZiAoIG9wdHMud2lkdGggKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5wdXNoKHRoaXMucm91bmRSZWN0KC0wLjUqb3B0cy53aWR0aC0xLC0wLjUsb3B0cy53aWR0aCsyLDMsMS41KSk7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5sYXN0Q2hpbGQuc2V0QXR0cmlidXRlKCdmaWxsJyxmaWxsX2NvbG9yKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIucHVzaCh0aGlzLmNpcmNsZSgwLC0wLjUqcixyKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmxhc3RDaGlsZC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLGZpbGxfY29sb3IpO1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIubGFzdENoaWxkLnNldEF0dHJpYnV0ZSgnYm9yZGVyJywndHJ1ZScpO1xuXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5wdXNoKHRoaXMuY2lyY2xlKDAsMS41KnIscikpO1xuXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5sYXN0Q2hpbGQuc2V0QXR0cmlidXRlKCdmaWxsJyxmaWxsX2NvbG9yKTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmxhc3RDaGlsZC5zZXRBdHRyaWJ1dGUoJ2JvcmRlcicsJ3RydWUnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFycm93ID0gdGhpcy5wb2x5KCgtMC45KnIqUlMpKycsJysoMCpyKlJTKSsnIDAsJysoLTIuNSpyKlJTKSsnICcrKDAuOSkqcipSUysnLCcrKDAqcipSUykpO1xuXG4gICAgICAgICAgICAgICAgICAgIGFycm93LnNldEF0dHJpYnV0ZSgnZmlsbCcsZmlsbF9jb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIGFycm93LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywnMCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5wdXNoKGFycm93KTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmxhc3RDaGlsZC5zZXRBdHRyaWJ1dGUoJ2JvcmRlcicsJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXJrZXIuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCd0cmFuc2xhdGUoJysoKGN4KSpSUykrJywnKzAuNSpjeSpSUysnKSBzY2FsZSgxKScpO1xuICAgICAgICAgICAgbWFya2VyLnNldEhlaWdodCA9IHNldEhlaWdodDtcbiAgICAgICAgICAgIG1hcmtlci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGRpbS5SKlJTKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3ltYm9sID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN5bWJvbC5tYXRjaCgvXig6P2h0dHBzPzopP1xcLz8uKiMvKSkge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIuY29udGVudEVsZW1lbnQgPSB0aGlzLnVzZShzeW1ib2wsLXIsMCwyKnIsMipyKTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmNvbnRlbnRFbGVtZW50LnNldEF0dHJpYnV0ZSgnY29udGVudCcsJ3RydWUnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5jb250ZW50RWxlbWVudCA9IHRoaXMudGV4dF9jaXJjbGUoMCwwLDIqcixzeW1ib2wsb3B0cyk7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlci5jb250ZW50RWxlbWVudC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSgnY29udGVudCcsJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbWFya2VyLnB1c2gobWFya2VyLmNvbnRlbnRFbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSAmJiBBcnJheS5pc0FycmF5KHN5bWJvbCkpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuY29udGVudEVsZW1lbnQgPSB0aGlzLmdyb3VwKCk7XG4gICAgICAgICAgICAgICAgdmFyIHBoYXNlID0gKCBNYXRoLlBJIC8gc3ltYm9sLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgLy8gcGhhc2UgLT0gKE1hdGguUEkgLyAyKTtcbiAgICAgICAgICAgICAgICB2YXIgbmVlZHNfc3RyZXRjaCA9IG9wdHMuc3RyZXRjaDtcbiAgICAgICAgICAgICAgICB2YXIgbnJvdyA9IDI7XG4gICAgICAgICAgICAgICAgc3ltYm9sLmZvckVhY2goZnVuY3Rpb24oc3ltYixpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB4X3BvcyA9IGkgJSBucm93O1xuICAgICAgICAgICAgICAgICAgICB2YXIgeV9wb3MgPSAyK01hdGguZmxvb3IoaSAvIG5yb3cpO1xuICAgICAgICAgICAgICAgICAgICB4X3BvcyAqPSAyKnI7XG4gICAgICAgICAgICAgICAgICAgIHlfcG9zICo9IDIqcjtcbiAgICAgICAgICAgICAgICAgICAgeF9wb3MgLT0gMC41KnI7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3RhdGVfYW1vdW50ID0gMTgwKmkvc3ltYm9sLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgcm90YXRlX2Ftb3VudCAtPSAwKjkwO1xuICAgICAgICAgICAgICAgICAgICByb3RhdGVfYW1vdW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRzX3N0cmV0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3RhdGVfYW1vdW50ID49IC05MCAmJiByb3RhdGVfYW1vdW50IDw9IDkwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuc3RyZXRjaCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuc3RyZXRjaCA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocm90YXRlX2Ftb3VudCAlIDkwKSA9PSAwICYmIHJvdGF0ZV9hbW91bnQgIT0gOTAgJiYgcm90YXRlX2Ftb3VudCAhPSAtOTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocm90YXRlX2Ftb3VudCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMuc3RyZXRjaCA9ICdyaWdodCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzeW1ib2wubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5zdHJldGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3RhdGVfYW1vdW50ID4gOTAgJiYgcm90YXRlX2Ftb3VudCA8IDI3MCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlX2Ftb3VudCA9IDE4MCArIHJvdGF0ZV9hbW91bnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHN5bWIubWF0Y2goL14oOj9odHRwcz86KT9cXC8/LiojLykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19lbCA9IGNhbnZhcy51c2Uoc3ltYiwoeF9wb3MgLSAwLjUpKnIsKHlfcG9zIC0gMC41KSpyLDIqciwyKnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2VsLnNldEF0dHJpYnV0ZSgncG9pbnRlci1ldmVudHMnLCdub25lJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdfZWwuc2V0QXR0cmlidXRlKCdjb250ZW50JywndHJ1ZScpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdHNfY29weSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkob3B0cykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0c19jb3B5Lm5vX3RyYWNlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3B0c19jb3B5Lm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRzX2NvcHkuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2VsID0gY2FudmFzLnRleHRfY2lyY2xlKHhfcG9zKnIseV9wb3MqciwxLjc1KnIsc3ltYixvcHRzX2NvcHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3X2VsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCdjb250ZW50JywndHJ1ZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyX3RyYW5zZm9ybSA9IG5ld19lbC5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpIHx8ICcnO1xuICAgICAgICAgICAgICAgICAgICBjdXJyX3RyYW5zZm9ybSA9IGN1cnJfdHJhbnNmb3JtICsgJyByb3RhdGUoJysocm90YXRlX2Ftb3VudCkrJywnKzAqcipSUysnLCcreV9wb3MqcipSUysnKSc7XG4gICAgICAgICAgICAgICAgICAgIG5ld19lbC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsY3Vycl90cmFuc2Zvcm0pO1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIuY29udGVudEVsZW1lbnQucHVzaChuZXdfZWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG1hcmtlci5wdXNoKG1hcmtlci5jb250ZW50RWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hcmtlci5jb250ZW50RWxlbWVudCA9IHRoaXMuZ3JvdXAoKTtcbiAgICAgICAgICAgICAgICBpZiAoISBvcHRzLmJhcmVfZWxlbWVudCApIHtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmNvbnRlbnRFbGVtZW50LnB1c2godGhpcy50ZXh0X2NpcmNsZSgwLDAuNSpyLDEuNzUqcixcIlwiLG9wdHMpKTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLmNvbnRlbnRFbGVtZW50Lmxhc3RDaGlsZC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSgnY29udGVudCcsJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN5bWJvbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoICEgb3B0cy5iYXJlX2VsZW1lbnQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2wuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCd0cmFuc2xhdGUoMCwnKygwLjUqcipSUykrJyknKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzeW1ib2wuc2V0QXR0cmlidXRlKCdjb250ZW50JywndHJ1ZScpO1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIuY29udGVudEVsZW1lbnQucHVzaChzeW1ib2wpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBtYXJrZXIucHVzaChtYXJrZXIuY29udGVudEVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWFya2VyLnNldEF0dHJpYnV0ZSgnbWFya2VyJywndHJ1ZScpO1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICAgICAgfTtcblxuICAgICAgICBjYW52YXMudGV4dF9jaXJjbGUgPSBmdW5jdGlvbihjeCxjeSxyLHR4dCxvcHRzKSB7XG5cbiAgICAgICAgICAgIGlmICggISBvcHRzICkge1xuICAgICAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgICAgICB2YXIgdW5pdHMgPSAwO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGN4ID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gbmV3IFJlZ0V4cCgvKFxcZCspKC4qKS9nKS5leGVjKGN4KTtcbiAgICAgICAgICAgICAgICB1bml0cyA9IHBhcnRzWzJdO1xuICAgICAgICAgICAgICAgIGN4ID0gcGFyc2VGbG9hdChwYXJ0c1sxXSk7XG5cbiAgICAgICAgICAgICAgICBwYXJ0cyA9IG5ldyBSZWdFeHAoLyhcXGQrKSguKikvZykuZXhlYyhjeSk7XG4gICAgICAgICAgICAgICAgY3kgPSBwYXJzZUZsb2F0KHBhcnRzWzFdKTtcblxuICAgICAgICAgICAgICAgIHBhcnRzID0gbmV3IFJlZ0V4cCgvKFxcZCspKC4qKS9nKS5leGVjKHIpO1xuICAgICAgICAgICAgICAgIHIgPSBwYXJzZUZsb2F0KHBhcnRzWzFdKTsgICAgICAgIFxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGltID0ge1xuICAgICAgICAgICAgICAgIENYICAgICAgOiBjeCt1bml0cyxcbiAgICAgICAgICAgICAgICBDWSAgICAgIDogY3krdW5pdHMsXG4gICAgICAgICAgICAgICAgUiAgICAgICA6IHIrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUlOX1ggICA6IChjeC1yKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNQVhfWCAgIDogKGN4K3IpK3VuaXRzLFxuICAgICAgICAgICAgICAgIE1JTl9ZICAgOiAoY3ktcikrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUFYX1kgICA6IChjeStyKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWDEgIDogKGN4LShyLzIpKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWDIgIDogKGN4KyhyLzIpKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWTEgIDogKGN5LShyLzIpKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSURfWTIgIDogKGN5KyhyLzIpKSt1bml0c1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG1hcmtlcl9ncm91cCA9IHRoaXMuZ3JvdXAoKTtcblxuXG4gICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMudGV4dCgwLGRpbS5DWSx0eHQpO1xuICAgICAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsMTAqUlMpO1xuICAgICAgICAgICAgdGV4dC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JyxvcHRzLndlaWdodCB8fCAnYm9sZGVyJyk7XG4gICAgICAgICAgICB0ZXh0LnNldEF0dHJpYnV0ZSgnZmlsbCcsb3B0cy50ZXh0X2ZpbGwgfHwgJyNmZmZmZmYnKTtcbiAgICAgICAgICAgIHRleHQuc2V0QXR0cmlidXRlKCdzdHlsZScsJ2ZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmOyB0ZXh0LWFuY2hvcjogbWlkZGxlOycpO1xuICAgICAgICAgICAgdGV4dC5maXJzdENoaWxkLnNldEF0dHJpYnV0ZSgnZHknLCcwLjM1ZW0nKTtcbiAgICAgICAgICAgIHRleHQuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsJ21pZGRsZScpO1xuICAgICAgICAgICAgdmFyIGJhY2s7XG5cbiAgICAgICAgICAgIGlmICggISBvcHRzLnN0cmV0Y2ggKSB7XG4gICAgICAgICAgICAgICAgYmFjayA9IHRoaXMuY2lyY2xlKDAsZGltLkNZLDkvMTAqZGltLlIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dF93aWR0aCA9IDEuMiAqIChvcHRzLmZvbnRfc2l6ZSB8fCByKSAqIHRleHQuZ2V0QkJveCgpLndpZHRoIC8gKDEwICogUlMpO1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0X2hlaWdodCA9IDMvMiAqIGRpbS5SO1xuICAgICAgICAgICAgICAgIHZhciBsZWZ0X3BvcyA9IC0wLjUqdGV4dF93aWR0aDtcbiAgICAgICAgICAgICAgICBpZiAodGV4dF93aWR0aCA+ICgzKmRpbS5SKSkge1xuICAgICAgICAgICAgICAgICAgICBsZWZ0X3BvcyA9IC0wLjUqdGV4dF93aWR0aDtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5zdHJldGNoID09ICdyaWdodCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRfcG9zID0gLTAuMSp0ZXh0X3dpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLnN0cmV0Y2ggPT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0X3BvcyA9IC0wLjkqdGV4dF93aWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRfd2lkdGggPSAzICogZGltLlI7XG4gICAgICAgICAgICAgICAgICAgIGxlZnRfcG9zID0gLTAuNSp0ZXh0X3dpZHRoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0ZXh0LnNldEF0dHJpYnV0ZSgneCcsKDAuNSp0ZXh0X3dpZHRoICsgbGVmdF9wb3MpKlJTKTtcbiAgICAgICAgICAgICAgICBiYWNrID0gdGhpcy5yb3VuZFJlY3QobGVmdF9wb3MsZGltLkNZLTAuNSp0ZXh0X2hlaWdodCx0ZXh0X3dpZHRoLHRleHRfaGVpZ2h0LHsneCcgOiAwLjUqZGltLlIsICd5JyA6IDAuNSp0ZXh0X2hlaWdodCB9LHt9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHQuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLChvcHRzLmZvbnRfc2l6ZSB8fCByKSpSUyk7XG5cbiAgICAgICAgICAgIGJhY2suc2V0QXR0cmlidXRlKCdmaWxsJyxvcHRzLmZpbGwgfHwgJ3VybCgjc2ltcGxlX2dyYWRpZW50KScpO1xuICAgICAgICAgICAgd2luZG93Lm1hdGNoTWVkaWEoJ3ByaW50JykuYWRkTGlzdGVuZXIoZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBiYWNrLnNldEF0dHJpYnV0ZSgnZmlsbCcsbWF0Y2gubWF0Y2hlcyA/ICcjYWFhYWFhJzogKG9wdHMuZmlsbCB8fCAndXJsKCNzaW1wbGVfZ3JhZGllbnQpJykpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBiYWNrLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgb3B0cy5ib3JkZXIgfHwgJyMwMDAwMDAnKTtcbiAgICAgICAgICAgIGJhY2suc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAoci8xMCkqUlMpO1xuXG4gICAgICAgICAgICBtYXJrZXJfZ3JvdXAucHVzaChiYWNrKTtcblxuICAgICAgICAgICAgbWFya2VyX2dyb3VwLnB1c2godGV4dCk7XG5cbiAgICAgICAgICAgIG1hcmtlcl9ncm91cC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsJ3RyYW5zbGF0ZSgnK2RpbS5DWCpSUysnLCAxKSBzY2FsZSgxKScpO1xuICAgICAgICAgICAgbWFya2VyX2dyb3VwLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgKGRpbS5SLzIpKlJTICk7XG4gICAgICAgICAgICBtYXJrZXJfZ3JvdXAuc2V0SGVpZ2h0ID0gc2V0SGVpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuIG1hcmtlcl9ncm91cDtcbiAgICAgICAgfTtcblxuICAgICAgICBjYW52YXMuY3Jvc3NlZF9jaXJjbGUgPSBmdW5jdGlvbihjeCxjeSxyKSB7XG5cbiAgICAgICAgICAgIHZhciB1bml0cyA9IDA7XG5cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjeCA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IG5ldyBSZWdFeHAoLyhcXGQrKSguKikvZykuZXhlYyhjeCk7XG4gICAgICAgICAgICAgICAgdW5pdHMgPSBwYXJ0c1syXTtcbiAgICAgICAgICAgICAgICBjeCA9IHBhcnNlRmxvYXQocGFydHNbMV0pO1xuXG4gICAgICAgICAgICAgICAgcGFydHMgPSBuZXcgUmVnRXhwKC8oXFxkKykoLiopL2cpLmV4ZWMoY3kpO1xuICAgICAgICAgICAgICAgIGN5ID0gcGFyc2VGbG9hdChwYXJ0c1sxXSk7XG5cbiAgICAgICAgICAgICAgICBwYXJ0cyA9IG5ldyBSZWdFeHAoLyhcXGQrKSguKikvZykuZXhlYyhyKTtcbiAgICAgICAgICAgICAgICByID0gcGFyc2VGbG9hdChwYXJ0c1sxXSk7ICAgICAgICBcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRpbSA9IHtcbiAgICAgICAgICAgICAgICBDWCAgICAgIDogY3grdW5pdHMsXG4gICAgICAgICAgICAgICAgQ1kgICAgICA6IGN5K3VuaXRzLFxuICAgICAgICAgICAgICAgIFIgICAgICAgOiByK3VuaXRzLFxuICAgICAgICAgICAgICAgIE1JTl9YICAgOiAoY3gtcikrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUFYX1ggICA6IChjeCtyKSt1bml0cyxcbiAgICAgICAgICAgICAgICBNSU5fWSAgIDogKGN5LXIpK3VuaXRzLFxuICAgICAgICAgICAgICAgIE1BWF9ZICAgOiAoY3krcikrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUlEX1gxICA6IChjeC0oci8yKSkrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUlEX1gyICA6IChjeCsoci8yKSkrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUlEX1kxICA6IChjeS0oci8yKSkrdW5pdHMsXG4gICAgICAgICAgICAgICAgTUlEX1kyICA6IChjeSsoci8yKSkrdW5pdHNcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBjbG9zZV9ncm91cCA9IHRoaXMuZ3JvdXAoKTtcblxuICAgICAgICAgICAgdmFyIGNsb3NlX2J1dHRvbiA9IHRoaXMuY2lyY2xlKGRpbS5DWCxkaW0uQ1ksZGltLlIpO1xuICAgICAgICAgICAgY2xvc2VfYnV0dG9uLnNldEF0dHJpYnV0ZSgnZmlsbCcsJyMwMDAwMDAnKTtcbiAgICAgICAgICAgIGNsb3NlX2J1dHRvbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjZmZmZmZmJyk7XG4gICAgICAgICAgICBjbG9zZV9idXR0b24uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMicpO1xuXG4gICAgICAgICAgICBjbG9zZV9ncm91cC5fYnV0dG9uID0gY2xvc2VfYnV0dG9uO1xuXG4gICAgICAgICAgICBjbG9zZV9ncm91cC5wdXNoKGNsb3NlX2J1dHRvbik7XG5cbiAgICAgICAgICAgIHZhciBhX2xpbmUgPSB0aGlzLmxpbmUoZGltLk1JRF9YMSxkaW0uTUlEX1kxLGRpbS5NSURfWDIsZGltLk1JRF9ZMik7XG4gICAgICAgICAgICBhX2xpbmUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnI2ZmZmZmZicpO1xuICAgICAgICAgICAgYV9saW5lLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzInKTtcblxuICAgICAgICAgICAgY2xvc2VfZ3JvdXAucHVzaChhX2xpbmUpO1xuXG4gICAgICAgICAgICB2YXIgZmlyc3RfbGluZSA9IGFfbGluZTtcblxuICAgICAgICAgICAgdmFyIGFfbGluZSA9IHRoaXMubGluZShkaW0uTUlEX1gxLGRpbS5NSURfWTIsZGltLk1JRF9YMixkaW0uTUlEX1kxKTtcbiAgICAgICAgICAgIGFfbGluZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjZmZmZmZmJyk7XG4gICAgICAgICAgICBhX2xpbmUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMicpO1xuXG4gICAgICAgICAgICBjbG9zZV9ncm91cC5wdXNoKGFfbGluZSk7XG5cbiAgICAgICAgICAgIGNsb3NlX2dyb3VwLm1vdmUgPSBmdW5jdGlvbihjeCxjeSkge1xuICAgICAgICAgICAgICAgIGNsb3NlX2J1dHRvbi5zZXRBdHRyaWJ1dGUoJ2N4JyxjeCk7XG4gICAgICAgICAgICAgICAgZGltLk1JRF9YMSA9IChjeC0oci8yKSk7XG4gICAgICAgICAgICAgICAgZGltLk1JRF9YMiA9IChjeCsoci8yKSk7XG4gICAgICAgICAgICAgICAgZGltLk1JRF9ZMSA9IChjeS0oci8yKSk7XG4gICAgICAgICAgICAgICAgZGltLk1JRF9ZMiA9IChjeSsoci8yKSk7XG4gICAgICAgICAgICAgICAgZmlyc3RfbGluZS5zZXRBdHRyaWJ1dGUoJ3gxJyxkaW0uTUlEX1gxKTtcbiAgICAgICAgICAgICAgICBmaXJzdF9saW5lLnNldEF0dHJpYnV0ZSgneTEnLGRpbS5NSURfWTEpO1xuICAgICAgICAgICAgICAgIGZpcnN0X2xpbmUuc2V0QXR0cmlidXRlKCd4MicsZGltLk1JRF9YMik7XG4gICAgICAgICAgICAgICAgZmlyc3RfbGluZS5zZXRBdHRyaWJ1dGUoJ3kyJyxkaW0uTUlEX1kyKTtcbiAgICAgICAgICAgICAgICBhX2xpbmUuc2V0QXR0cmlidXRlKCd4MScsZGltLk1JRF9YMSk7XG4gICAgICAgICAgICAgICAgYV9saW5lLnNldEF0dHJpYnV0ZSgneTEnLGRpbS5NSURfWTIpO1xuICAgICAgICAgICAgICAgIGFfbGluZS5zZXRBdHRyaWJ1dGUoJ3gyJyxkaW0uTUlEX1gyKTtcbiAgICAgICAgICAgICAgICBhX2xpbmUuc2V0QXR0cmlidXRlKCd5MicsZGltLk1JRF9ZMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGNsb3NlX2dyb3VwOyAgICAgICAgXG4gICAgICAgIH07XG4gICAgICAgIGNhbnZhcy50ZXh0ID0gZnVuY3Rpb24oeCx5LHRleHQpIHtcbiAgICAgICAgICAgIHZhciBhX3RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnbnMsJ3RleHQnKTtcbiAgICAgICAgICAgIHZhciBhX3RzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHN2Z25zLCAndHNwYW4nKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGV4dCAhPSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGFfdGV4dC5hcHBlbmRDaGlsZCh0ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYV90ZXh0LmFwcGVuZENoaWxkKGFfdHNwYW4pO1xuICAgICAgICAgICAgICAgIGFfdHNwYW4udGV4dENvbnRlbnQgPSB0ZXh0O1xuICAgICAgICAgICAgICAgIGFfdHNwYW4uc2V0QXR0cmlidXRlKCdkeScsJzAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFfdGV4dC5zdHlsZS5mb250RmFtaWx5ID0gdGhpcy5mb250X29yZGVyIHx8ICdIZWx2ZXRpY2EsIFZlcmRhbmEsIEFyaWFsLCBTYW5zLXNlcmlmJztcbiAgICAgICAgICAgIGFfdGV4dC5zZXRBdHRyaWJ1dGUoJ3gnLHR5cGVvZiB4ID09ICdzdHJpbmcnID8geCA6IHggKiBSUyk7XG4gICAgICAgICAgICBhX3RleHQuc2V0QXR0cmlidXRlKCd5Jyx0eXBlb2YgeSA9PSAnc3RyaW5nJyA/IHkgOiB5ICogUlMpOyAgICAgICAgXG4gICAgICAgICAgICBhX3RleHQubW92ZSA9IGZ1bmN0aW9uKG5ld194LG5ld193aWR0aCkge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mKHRoaXMub2Zmc2V0KSAhPT0gXCJ1bmRlZmluZWRcIikgJiYgdGhpcy5nZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1fYXR0ciA9IHRoaXMuZ2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAvdHJhbnNsYXRlXFwoLipbLFxcc10oLiopXFwpLy5leGVjKHRyYW5zZm9ybV9hdHRyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXNbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKCcrKG5ld194KlJTKSsnLCcrbWF0Y2hlc1sxXSsnKScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoJ3gnLG5ld194KlJTKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKGFfdGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gYV90ZXh0O1xuICAgICAgICB9O1xuICAgICAgICBjYW52YXMucGx1cyA9IGZ1bmN0aW9uKHgseSxoZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBnID0gdGhpcy5ncm91cCgpO1xuICAgICAgICAgICAgZy5hcHBlbmRDaGlsZCh0aGlzLm1ha2VFbCgncmVjdCcsIHtcbiAgICAgICAgICAgICAgICAneCcgOiBNYXRoLnJvdW5kKCgwLjQpKmhlaWdodCpSUykudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAneScgOiBNYXRoLnJvdW5kKCgwLjEpKmhlaWdodCpSUykudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAnc3Ryb2tlLXdpZHRoJyA6ICcxJyxcbiAgICAgICAgICAgICAgICAnd2lkdGgnIDogTWF0aC5yb3VuZCgoMC4yKSpoZWlnaHQqUlMpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgJ2hlaWdodCc6IE1hdGgucm91bmQoKDAuOCkqaGVpZ2h0KlJTKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICdzdHJva2UnOiAnI2ZmZmZmZicsXG4gICAgICAgICAgICAgICAgJ2ZpbGwnICA6ICcjZmZmZmZmJyAgICAgICAgICAgIFxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBnLmFwcGVuZENoaWxkKHRoaXMubWFrZUVsKCdyZWN0Jywge1xuICAgICAgICAgICAgICAgICd4JyA6IE1hdGgucm91bmQoKDAuMSkqaGVpZ2h0KlJTKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICd5JyA6IE1hdGgucm91bmQoKDAuNCkqaGVpZ2h0KlJTKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICdzdHJva2Utd2lkdGgnIDogJzEnLFxuICAgICAgICAgICAgICAgICd3aWR0aCcgOiBNYXRoLnJvdW5kKCgwLjgpKmhlaWdodCpSUykudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogTWF0aC5yb3VuZCgoMC4yKSpoZWlnaHQqUlMpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgJ3N0cm9rZSc6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgICAgICAnZmlsbCcgIDogJyNmZmZmZmYnICAgICAgICAgICAgXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBnLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKCcreCpSUysnLCcreSpSUysnKScpO1xuICAgICAgICAgICAgcmV0dXJuIGc7XG4gICAgICAgIH07XG4gICAgICAgIGNhbnZhcy5taW51cyA9IGZ1bmN0aW9uKHgseSxoZWlnaHQpIHtcbiAgICAgICAgICAgIHZhciBnID0gdGhpcy5ncm91cCgpO1xuXG4gICAgICAgICAgICBnLmFwcGVuZENoaWxkKHRoaXMubWFrZUVsKCdyZWN0Jywge1xuICAgICAgICAgICAgICAgICd4JyA6IE1hdGgucm91bmQoKDAuMSkqaGVpZ2h0KlJTKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICd5JyA6IE1hdGgucm91bmQoKDAuNCkqaGVpZ2h0KlJTKS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICdzdHJva2Utd2lkdGgnIDogJzEnLFxuICAgICAgICAgICAgICAgICd3aWR0aCcgOiBNYXRoLnJvdW5kKCgwLjgpKmhlaWdodCpSUykudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogTWF0aC5yb3VuZCgoMC4yKSpoZWlnaHQqUlMpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgJ3N0cm9rZSc6ICcjZmZmZmZmJyxcbiAgICAgICAgICAgICAgICAnZmlsbCcgIDogJyNmZmZmZmYnICAgICAgICAgICAgXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBnLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywndHJhbnNsYXRlKCcreCpSUysnLCcreSpSUysnKScpO1xuICAgICAgICAgICAgcmV0dXJuIGc7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBib3VuZGluZyBib3ggb2YgYW4gZWxlbWVudCB3aXRoIHJlc3BlY3QgdG8gaXRzIHBhcmVudCBlbGVtZW50XG4gICAgICAgIC8vIFRoYW5rcyB0byBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzEwNjIzODA5L2dldC1ib3VuZGluZy1ib3gtb2YtZWxlbWVudC1hY2NvdW50aW5nLWZvci1pdHMtdHJhbnNmb3JtXG4gICAgICAgIGNhbnZhcy50cmFuc2Zvcm1lZEJvdW5kaW5nQm94ID0gZnVuY3Rpb24oZWwpe1xuICAgICAgICAgICAgdmFyIGJiICA9IGVsLmdldEJCb3goKSxcbiAgICAgICAgICAgICAgICBzdmcgPSBlbC5vd25lclNWR0VsZW1lbnQsXG4gICAgICAgICAgICAgICAgbSAgID0gZWwucGFyZW50Tm9kZS5nZXRTY3JlZW5DVE0oKS5pbnZlcnNlKCkubXVsdGlwbHkoZWwuZ2V0U2NyZWVuQ1RNKCkpLmludmVyc2UoKTtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhbiBhcnJheSBvZiBhbGwgZm91ciBwb2ludHMgZm9yIHRoZSBvcmlnaW5hbCBib3VuZGluZyBib3hcbiAgICAgICAgICAgIHZhciBwdHMgPSBbXG4gICAgICAgICAgICAgICAgc3ZnLmNyZWF0ZVNWR1BvaW50KCksIHN2Zy5jcmVhdGVTVkdQb2ludCgpLFxuICAgICAgICAgICAgICAgIHN2Zy5jcmVhdGVTVkdQb2ludCgpLCBzdmcuY3JlYXRlU1ZHUG9pbnQoKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHB0c1swXS54PWJiLng7ICAgICAgICAgIHB0c1swXS55PWJiLnk7XG4gICAgICAgICAgICBwdHNbMV0ueD1iYi54K2JiLndpZHRoOyBwdHNbMV0ueT1iYi55O1xuICAgICAgICAgICAgcHRzWzJdLng9YmIueCtiYi53aWR0aDsgcHRzWzJdLnk9YmIueStiYi5oZWlnaHQ7XG4gICAgICAgICAgICBwdHNbM10ueD1iYi54OyAgICAgICAgICBwdHNbM10ueT1iYi55K2JiLmhlaWdodDtcblxuICAgICAgICAgICAgLy8gVHJhbnNmb3JtIGVhY2ggaW50byB0aGUgc3BhY2Ugb2YgdGhlIHBhcmVudCxcbiAgICAgICAgICAgIC8vIGFuZCBjYWxjdWxhdGUgdGhlIG1pbi9tYXggcG9pbnRzIGZyb20gdGhhdC5cbiAgICAgICAgICAgIHZhciB4TWluPUluZmluaXR5LHhNYXg9LUluZmluaXR5LHlNaW49SW5maW5pdHkseU1heD0tSW5maW5pdHk7XG4gICAgICAgICAgICBwdHMuZm9yRWFjaChmdW5jdGlvbihwdCl7XG4gICAgICAgICAgICAgICAgcHQgPSBwdC5tYXRyaXhUcmFuc2Zvcm0obSk7XG4gICAgICAgICAgICAgICAgeE1pbiA9IE1hdGgubWluKHhNaW4scHQueCk7XG4gICAgICAgICAgICAgICAgeE1heCA9IE1hdGgubWF4KHhNYXgscHQueCk7XG4gICAgICAgICAgICAgICAgeU1pbiA9IE1hdGgubWluKHlNaW4scHQueSk7XG4gICAgICAgICAgICAgICAgeU1heCA9IE1hdGgubWF4KHlNYXgscHQueSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBib3VuZGluZyBib3ggd2l0aCB0aGUgbmV3IHZhbHVlc1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBiYi54ID0geE1pbjsgYmIud2lkdGggID0geE1heC14TWluO1xuICAgICAgICAgICAgICAgIGJiLnkgPSB5TWluOyBiYi5oZWlnaHQgPSB5TWF4LXlNaW47XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgYmIgPSB7ICd4JyA6IHhNaW4sICd5JyA6IHlNaW4sICd3aWR0aCcgOiB4TWF4LXhNaW4sICdoZWlnaHQnIDogeU1heC15TWluIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYmI7XG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICBjYW52YXMuc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYW5fYXJyYXkgPSBbXTtcbiAgICAgICAgICAgIGV4dGVuZF9hcnJheShhbl9hcnJheSxSUyk7XG4gICAgICAgICAgICByZXR1cm4gYW5fYXJyYXk7XG4gICAgICAgIH07XG4gICAgICAgIGNhbnZhcy5oaWRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnZGlzcGxheScsJ25vbmUnKTtcbiAgICAgICAgfTtcbiAgICAgICAgY2FudmFzLnNob3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdkaXNwbGF5JywnaW5saW5lJyk7XG4gICAgICAgIH07XG4gICAgfSk7XG5cbn0pKCk7XG5cblxuZXhwb3J0IGRlZmF1bHQgU1ZHQ2FudmFzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUxBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBQ0E7QUFhQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBQ0E7QUFhQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUFDQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBR0E7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/lib/SVGCanvas.js\n");

/***/ }),

/***/ "./js/lib/SequenceRenderer.js":
/*!************************************!*\
  !*** ./js/lib/SequenceRenderer.js ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MascpService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/**\n * @fileOverview    Read in sequences to be re-rendered in a block that can be easily annotated.\n */\n\n\n\n\n/**\n *  @lends MASCP.Group.prototype\n *  @property   {String}        name                        Name for this group to be used as an identifier\n *  @property   {String}        fullname                    The full (long) name for this group, that can be used in UI widgets for labelling\n *  @property   {String}        color                       Color string to apply to this group\n *  @property   {Boolean}       hide_member_controllers     For controllers for this group, do not show the layer controllers for this group\n *  @property   {Boolean}       hide_group_controller       For controllers for this group do not show the parent group controller\n */\n\n/**\n * Register a group with metadata for all sequence renderers.\n * @static\n * @param {String} groupName    Name to give to this group\n * @param {Hash} options        Options to apply to this group - see MASCP.Group for all the fields\n * @returns New group object\n * @type MASCP.Group\n * @see MASCP.event:groupRegistered\n * @see MASCP.Group\n */\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerGroup = function (groupName, options) {\n    if (!this.groups) {\n        this.groups = {};\n    }\n    if (this.groups[groupName]) {\n        return;\n    }\n\n    var group = new _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Group();\n\n    group.name = groupName;\n\n    options = options || {};\n\n    if (options.hide_member_controllers) {\n        group.hide_member_controllers = true;\n    }\n\n    if (options.hide_group_controller) {\n        group.hide_group_controller = true;\n    }\n\n    if (options.fullname) {\n        group.fullname = options.fullname;\n    }\n\n    if (options.color) {\n        group.color = options.color;\n    }\n\n    if (options.group) {\n        group.group = this.getGroup(options.group);\n        if (!group.group) {\n            throw \"Cannot register this layer with the given group - the group has not been registered yet\";\n        }\n        group.group._layers.push(group);\n    }\n\n    group._layers = [];\n\n    group.group_id = new Date().getMilliseconds();\n\n    this.groups[groupName] = group;\n\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"], 'groupRegistered', [group]);\n\n    return group;\n};\n\n/**\n *  @lends MASCP.Layer.prototype\n *  @property   {String}        name        Name for this layer to be used as an identifier\n *  @property   {String}        fullname    The full (long) name for this layer, that can be used in UI widgets for labelling\n *  @property   {String}        color       Color string to apply to this layer\n *  @property   {MASCP.Group}   group       Group that this layer is part of. Either a group object, or the name for the group.\n *  @property   {String}        css         CSS block for this layer. Active and inactive layers are children of the .active and .inactive classes respectively. To target a track-based rendering, use the .tracks class first, and to target overlays, use the .overlay class last\n *  @property   {Object}        data        Data for this layer\n */\n\n/**\n * Register a layer with metadata for all sequence renderers.\n * @static\n * @param {String} layerName    Name to give to this layer\n * @param {Hash} options        Options to set field values for this layer - see the fields for MASCP.Layer.\n * @returns New layer object\n * @type MASCP.Layer\n * @see MASCP.Layer\n * @see MASCP.event:layerRegistered\n */\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer = function (layerName, options, renderers) {\n    if (!this.layers) {\n        this.layers = {};\n    }\n    if (!renderers) {\n        renderers = [];\n    }\n    var layer;\n    if (this.layers[layerName]) {\n        if (this.layers[layerName].disabled || renderers.length > 0) {\n            this.layers[layerName].disabled = false;\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"], 'layerRegistered', [this.layers[layerName]].concat(renderers));\n        }\n        layer = this.layers[layerName];\n    }\n\n    if (layer && options.group) {\n        if (layer.group !== this.getGroup(options.group)) {\n            layer.group = this.getGroup(options.group);\n            layer.group._layers.push(layer);\n        }\n        if (!layer.group) {\n            throw \"Cannot register this layer with the given group - the group has not been registered yet\";\n        }\n    }\n\n    if (layer) {\n        return layer;\n    }\n\n    layer = new _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Layer();\n\n    layer.name = layerName;\n\n    options = options || {};\n\n    if (options.fullname) {\n        layer.fullname = options.fullname;\n    }\n\n    if (options.color) {\n        layer.color = options.color;\n    }\n\n    if (options.data) {\n        layer.data = options.data;\n    }\n\n    if (layer && options.group) {\n        layer.group = this.getGroup(options.group);\n        if (!layer.group) {\n            throw \"Cannot register this layer with the given group - the group has not been registered yet\";\n        }\n        layer.group._layers.push(layer);\n    }\n\n    this.layers[layerName] = layer;\n\n    if (options.css) {\n        console.log(\"options.css is deprecated\");\n    }\n    layer.layer_id = new Date().getMilliseconds();\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"], 'layerRegistered', [layer].concat(renderers));\n\n    return layer;\n};\n\n/**\n * @class\n * Metadata for a group of layers to be rendered\n */\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Group = function () {\n    return;\n};\n\n/**\n * Describe what this method does\n * @private\n * @param {String|Object|Array|Boolean|Number} paramName Describe this parameter\n * @returns Describe what it returns\n * @type String|Object|Array|Boolean|Number\n */\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Group.prototype.size = function () {\n    var counter = 0;\n    for (var i = 0; i < this._layers.length; i++) {\n        if (!this._layers[i].disabled) {\n            counter += 1;\n        }\n    }\n    return counter;\n};\n\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Group.prototype.eachLayer = function (func) {\n    for (var i = 0; i < this._layers.length; i++) {\n        if (!this._layers[i].disabled) {\n            func.call(this._layers[i], this._layers[i]);\n        }\n    }\n};\n\n/**\n * @class\n * Metadata for a single layer to be rendered\n */\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Layer = function () {\n    return;\n};\n\n/**\n * @class   Reformatter for sequences in html pages. The object retrieves the amino acid sequence from the \n *          given element, and then reformats the display of the sequence so that rendering layers can be\n *          applied to it. \n * @author  hjjoshi\n * @param   {Element} sequenceContainer Container element that the sequence currently is found in, and also \n *                                      the container that data will be re-inserted into.\n */\nconst SequenceRenderer = function () {\n\n    /**\n     *  @lends SequenceRenderer.prototype\n     *  @property   {Array}     trackOrder  The order of tracks on the renderer, an array of layer/group names.\n     */\n    var setupTrackOrder = function setupTrackOrder(renderer) {\n        var renderer_track_order = [];\n\n        var accessors = {\n\n            getTrackOrder: function getTrackOrder() {\n                return renderer_track_order;\n            },\n\n            setTrackOrder: function setTrackOrder(in_order) {\n                var track_order = [];\n                var order = in_order;\n                if (!order instanceof Array) {\n                    order = [in_order];\n                }\n\n                for (var i = 0; i < order.length; i++) {\n                    var a_track = order[i];\n                    if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(a_track)) {\n                        while (track_order.indexOf(a_track) >= 0) {\n                            track_order.splice(track_order.indexOf(a_track), 1);\n                        }\n                        track_order.push(a_track);\n                    }\n                    if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(a_track)) {\n                        _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(order[i]).eachLayer(function (grp_lay) {\n                            while (track_order.indexOf(grp_lay.name) >= 0) {\n                                track_order.splice(track_order.indexOf(grp_lay.name), 1);\n                            }\n                            order.splice(i + 1, 0, grp_lay.name);\n                        });\n                    }\n                }\n                for (i = (renderer_track_order || []).length - 1; i >= 0; i--) {\n                    if (track_order.indexOf(renderer_track_order[i]) < 0) {\n                        this.hideLayer(renderer_track_order[i]);\n                        this.hideGroup(renderer_track_order[i]);\n                        if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(renderer_track_order[i])) {\n                            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(renderer_track_order[i]), 'removed', [renderer]);\n                        }\n                        if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(renderer_track_order[i])) {\n                            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(renderer_track_order[i]), 'removed', [renderer]);\n                        }\n                    }\n                }\n                renderer_track_order = track_order;\n\n                if (this.refresh) {\n                    this.refresh(true);\n                }\n                _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(renderer, 'orderChanged', [track_order]);\n            }\n        };\n\n        if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE) {\n            renderer.setTrackOrder = accessors.setTrackOrder;\n        }\n\n        if (typeof Object.defineProperty == 'function' && !_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE8) {\n            Object.defineProperty(renderer, \"trackOrder\", {\n                get: accessors.getTrackOrder,\n                set: accessors.setTrackOrder\n            });\n        }\n    };\n\n    return function (sequenceContainer) {\n        if (!sequenceContainer) {\n            return this;\n        }\n        if (typeof sequenceContainer !== 'undefined') {\n            this._container = sequenceContainer;\n            if (!this._container.style.position) {\n                this._container.style.position = 'relative';\n            }\n            //        this._container.style.width = '100%';\n\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this, 'sequenceChange', function (e) {\n                while (sequenceContainer.firstChild) {\n                    sequenceContainer.removeChild(sequenceContainer.firstChild);\n                }\n                this._sequence_els.forEach(function (el) {\n                    sequenceContainer.appendChild(el);\n                });\n                var float_clear = document.createElement('div');\n                float_clear.setAttribute('style', 'clear: both; float: none; height: 0px; width: 100%;');\n                sequenceContainer.appendChild(float_clear);\n                sequenceContainer.style.width = this._sequence_els.length + 'em';\n                //            this.showRowNumbers();            \n            });\n\n            this.setSequence(sequenceContainer.textContent || '');\n        }\n\n        setupTrackOrder(this);\n\n        return this;\n    };\n}();\n\n/**\n * Event fired when a layer is registered with the global layer registry\n * @name    MASCP.layerRegistered\n * @event\n * @param   {Object}    e\n * @param   {Object}    layer Layer just registered\n */\n\n/**\n * Event fired when a group is registered with the global group registry\n * @name    MASCP.groupRegistered\n * @event\n * @param   {Object}    e\n * @param   {Object}    group Group just registered\n */\n\n/**\n * Event fired when the sequence is changed in a sequence renderer\n * @name    SequenceRenderer#sequenceChange\n * @event\n * @param   {Object}    e\n */\n\n/**\n * Event fired when a result is rendered on this renderer\n * @name    SequenceRenderer#resultsRendered\n * @event\n * @param   {Object}    e\n * @param   {MASCP.Service} reader  Reader that rendered the result.\n */\n\n/**\n * @name    MASCP.Group#visibilityChange\n * @event\n * @param   {Object}    e\n * @param   {Object}    renderer\n * @param   {Boolean}   visibility\n */\n\n/**\n * @name    MASCP.Layer#visibilityChange\n * @event\n * @param   {Object}    e\n * @param   {Object}    renderer\n * @param   {Boolean}   visibility\n */\n\n/**\n *  @lends SequenceRenderer.prototype\n *  @property   {String}  sequence  Sequence to mark up.\n */\nSequenceRenderer.prototype = {\n    sequence: null\n};\n\nif (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].IE) {\n    SequenceRenderer.prototype.prototype = document.createElement('div');\n}\n\n/**\n * Set the sequence for this renderer. Fires the sequenceChange event when the sequence is set.\n * @param {String} sequence Sequence to render\n * @see SequenceRenderer#event:sequenceChange\n */\nSequenceRenderer.prototype.setSequence = function (sequence) {\n    this.sequence = this._cleanSequence(sequence);\n    var sequence_els = [];\n    var renderer = this;\n    if (!this.sequence) {\n        return;\n    }\n    var seq_chars = this.sequence.split('');\n    for (var i = 0; i < seq_chars.length; i++) {\n        var aa = seq_chars[i];\n        if (aa.match(/[A-Za-z]/)) {\n            var span_el = document.createElement('span');\n            span_el.textContent = aa;\n            sequence_els.push(span_el);\n        }\n    }\n\n    sequence_els.forEach(function (el, i) {\n        // if ( (i % 10) == 0 && i > 0 && ((i % 50) != 0)) {\n        //     this.style.margin = '0px 0px 0px 1em';\n        // }\n        // if ( (i % 50) == 0 && i > 0 ) {\n        //     if (MASCP.IE7) {\n        //         sequence_els[i-1].style.styleFloat = 'none';\n        //         sequence_els[i-1].style.width = '1em';\n        //     }\n        //     this.style.clear = 'both';\n        // }\n\n        el._index = i;\n\n        el.style.display = 'block';\n        el.style.cssFloat = 'left';\n        el.style.styleFloat = 'left';\n        el.style.height = '1.1em';\n        el.style.position = 'relative';\n\n        el.addToLayer = SequenceRenderer.addElementToLayer;\n        el.addBoxOverlay = SequenceRenderer.addBoxOverlayToElement;\n        el.addToLayerWithLink = SequenceRenderer.addElementToLayerWithLink;\n        el._renderer = renderer;\n    });\n    this._sequence_els = sequence_els;\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(this, 'sequenceChange');\n};\n\n/**\n * Color some residues on this residue\n * @param {Array} indexes Indexes to apply the given color to\n * @param {String} color Color to use to highlight the residues\n * @returns ID for the layer that is created\n * @type String\n */\nSequenceRenderer.prototype.colorResidues = function (indexes, color) {\n    var layer_id = Math.floor(Math.random() * 1000).toString();\n    _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer(layer_id, { 'color': color || '#ff0000' });\n    var aas = this.getAminoAcidsByPosition(indexes);\n    for (var i = 0; i < aas.length; i++) {\n        aas[i].addToLayer(layer_id);\n    }\n    return _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layer_id);\n};\n\nSequenceRenderer.prototype._cleanSequence = function (sequence) {\n    if (!sequence) {\n        return sequence;\n    }\n    var cleaned_sequence = sequence;\n    cleaned_sequence = cleaned_sequence.replace(new RegExp(String.fromCharCode(160), \"g\"), '');\n    cleaned_sequence = cleaned_sequence.replace(/[\\n\\t\\s\\d]+/mgi, '');\n    cleaned_sequence = cleaned_sequence.replace(/\\(.*\\)/g, '');\n    return cleaned_sequence;\n};\n\n/**\n * Retrieve the HTML Elements that contain the amino acids at the given positions. The first amino acid is found at position 1.\n * @param {Array} indexes Indexes to retrieve elements for\n * @returns Elements representing each amino acid at the given positions\n * @type Array\n */\nSequenceRenderer.prototype.getAminoAcidsByPosition = function (indexes) {\n    var sequence_els = this._sequence_els;\n    return indexes.map(function (index) {\n        if (index < 0) {\n            return null;\n        }\n        return sequence_els[index - 1];\n    });\n};\n\nSequenceRenderer.prototype.getAA = function (index) {\n    return this.getAminoAcidsByPosition([index]).shift();\n};\n\n/**\n * Retrieve the HTML Elements that contain the amino acids contained in the given peptide sequence.\n * @param {String} peptideSequence Peptide sequence used to look up the amino acids\n * @returns Elements representing each amino acid at the given positions\n * @type Array\n */\nSequenceRenderer.prototype.getAminoAcidsByPeptide = function (peptideSequence) {\n    var start = this.sequence.indexOf(peptideSequence);\n    var results = [];\n\n    if (start < 0) {\n        results.addToLayer = function () {};\n        return results;\n    }\n    results = results.concat(this._sequence_els.slice(start, start + peptideSequence.length));\n    if (results.length) {\n        results.addToLayer = function (layername, fraction, options) {\n            return results[0].addBoxOverlay(layername, results.length, fraction, options);\n        };\n    } else {\n        results.addToLayer = function () {};\n    }\n\n    return results;\n};\n\n/**\n * Toggle the display of the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\nSequenceRenderer.prototype.toggleLayer = function (layer, consumeChange) {\n    var layerName = layer;\n    if (typeof layer != 'string') {\n        layerName = layer.name;\n    } else {\n        layer = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layer];\n    }\n    this._container.classList.toggle(layerName + '_active');\n    this._container.classList.toggle(layerName + '_inactive');\n    if (!consumeChange) {\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(layer, 'visibilityChange', [this, this.isLayerActive(layer)]);\n    }\n    return this;\n};\n\n/**\n * Show the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\nSequenceRenderer.prototype.showLayer = function (lay, consumeChange) {\n    var layer = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(lay);\n\n    if (!layer || layer.disabled) {\n        return;\n    }\n    this._container.classList.add(layer.name + '_active');\n    this._container.classList.add('active_layer');\n    this._container.classList.remove(layer.name + '_inactive');\n    if (!consumeChange) {\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(layer, 'visibilityChange', [this, true]);\n    }\n    return this;\n};\n\n/**\n * Hide the given layer\n * @param {String|Object} layer Layer name, or layer object\n * @see MASCP.Layer#event:visibilityChange\n */\nSequenceRenderer.prototype.hideLayer = function (lay, consumeChange) {\n    var layer = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(lay);\n\n    if (!layer || layer.disabled) {\n        return;\n    }\n\n    this._container.classList.remove(layer.name + '_active');\n    this._container.classList.remove('active_layer');\n    this._container.classList.add(layer.name + '_inactive');\n    if (!consumeChange) {\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(layer, 'visibilityChange', [this, false]);\n    }\n    return this;\n};\n\n/**\n * Register a layer with this renderer. Actually is a proxy on to the global registry method\n * @see MASCP#registerLayer\n */\nSequenceRenderer.prototype.registerLayer = function (layer, options) {\n    return _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].registerLayer(layer, options);\n};\n\n/**\n * Hide or show a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @param {Boolean} visibility True for visible, false for hidden\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.setGroupVisibility = function (grp, visibility, consumeChange) {\n    var group = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(grp);\n    if (!group) {\n        return;\n    }\n    var groupName = group.name;\n\n    var renderer = this;\n\n    group.eachLayer(function (layer) {\n        if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(layer) === layer) {\n            // We can skip explicitly setting the visibility of groups here, since\n            // any sub-groups should have a controller.\n            return;\n        }\n        if (this.disabled && visibility) {\n            renderer.hideLayer(layer.name);\n            return;\n        }\n        if (visibility === true) {\n            renderer.showLayer(layer.name);\n        } else if (visibility === false) {\n            renderer.hideLayer(layer.name);\n        } else {\n            renderer.toggleLayer(layer.name);\n        }\n    });\n    if (visibility !== null && !consumeChange) {\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(group, 'visibilityChange', [renderer, visibility]);\n    }\n};\n\n/**\n * Hide a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.hideGroup = function (group, consumeChange) {\n    this.setGroupVisibility(group, false, consumeChange);\n};\n\n/**\n * Show a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.showGroup = function (group, consumeChange) {\n    this.setGroupVisibility(group, true, consumeChange);\n};\n\n/**\n * Toggle the visibility for a group. Fires an event when this method is called.\n * @param {Object} grp Group to set the visibility for\n * @see MASCP.Group#event:visibilityChange\n */\nSequenceRenderer.prototype.toggleGroup = function (group, consumeChange) {\n    this.setGroupVisibility(group, consumeChange);\n};\n\n/**\n * Check if the given layer is active\n * @param {String|Object} layer Layer name, or layer object\n * @returns Whether this layer is active on this renderer\n * @type Boolean\n */\nSequenceRenderer.prototype.isLayerActive = function (layer) {\n    var layerName = layer;\n    if (typeof layer != 'string') {\n        layerName = layer.name;\n    }\n    return !layer.disabled && this._container.classList.contains(layerName + '_active');\n};\n\n/**\n * Deprecated until there's a better implementation for the CondensedSequenceRenderer\n * @private\n */\n\nSequenceRenderer.prototype._setHighlight = function (layer, isHighlighted) {\n    return;\n};\n\n/**\n * Create a layer controller for this sequence renderer. Attach the controller to the containing box, and shift the box across 20px.\n */\nSequenceRenderer.prototype.createLayerController = function () {\n    console.log(\"createLayerController is deprected\");\n    return;\n};\n\n/**\n * Create a checkbox that is used to control the given layer\n * @param {String|Object} layer Layer name or layer object that a controller should be generated for\n * @param {Object} inputElement Optional input element to bind events to. If no element is given, a new one is created.\n * @returns Checkbox element that when checked will toggle on the layer, and toggle it off when unchecked\n * @type Object\n */\nSequenceRenderer.prototype.createLayerCheckbox = function (layer, inputElement, exclusive) {\n    console.log(\"createLayerCheckbox is deprecated\");\n    return;\n};\n\n/**\n * Retrieve a layer object from the layer registry. If a layer object is passed to this method, the same layer is returned.\n * @param {String} layer    Layer name\n * @returns Layer object\n * @type Object\n * @see MASCP.Layer\n */\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer = function (layer) {\n    if (!_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n        return;\n    }\n    return typeof layer == 'string' ? _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layer] : layer;\n};\n\n/**\n * Retrieve a group object from the group registry. If a grop object is passed to this method, the same group is returned.\n * @param {String} group    Group name\n * @returns Group object\n * @type Object\n * @see MASCP.Group\n */\n_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup = function (group) {\n    if (typeof group == 'undefined') {\n        return;\n    }\n    if (!_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].groups) {\n        return;\n    }\n    if (typeof group == 'string') {\n        return _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].groups[group];\n    }\n    return group == _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].groups[group.name] ? group : null;\n};\n\nSequenceRenderer.prototype._removeOtherBindings = function (object, inputElement) {\n    var renderer = this;\n\n    for (var i = 0; i < inputElement._current_bindings.length; i++) {\n        if (inputElement._current_bindings[i].renderer != renderer) {\n            continue;\n        }\n        var cb = inputElement._current_bindings[i];\n\n        if (cb.layer && cb.layer != object.name) {\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(cb.layer), 'visibilityChange', cb.object_function);\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(inputElement, 'change', cb.input_function);\n        }\n\n        if (cb.group && cb.group != object.name) {\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(cb.group), 'visibilityChange', cb.object_function);\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(inputElement, 'change', cb.input_function);\n        }\n        cb.group = null;\n        cb.layer = null;\n    }\n};\n\n/**\n * Create a layer based controller for a group. This layer can act as a proxy for the other layers\n * @param {Object} lay Layer to turn into a group controller\n * @param {Object} grp Group to be controlled by this layer.\n */\n\nSequenceRenderer.prototype.createGroupController = function (lay, grp) {\n    var layer = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(lay);\n    var group = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getGroup(grp);\n\n    var self = this;\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(layer, 'visibilityChange', function (rend, visible) {\n        if (rend == self) {\n            self.setGroupVisibility(group, visible);\n            self.refresh();\n        }\n    });\n};\n\n/**\n * Function to be added to Amino acid elements to facilitate adding elements to layers\n * @private\n * @param {String} layerName The layer that this amino acid should be added to\n * @returns Itself\n * @type Element\n */\nSequenceRenderer.addElementToLayer = function (layerName) {\n    this.addBoxOverlay(layerName, 1);\n    return this;\n};\n\n/**\n * Function to be added to Amino acid elements to facilitate adding elements to layers with a link\n * @private\n * @param {String} layerName The layer that this amino acid should be added to\n * @param {String} url URL to link to\n * @returns Itself\n * @type Element\n */\nSequenceRenderer.addElementToLayerWithLink = function (layerName, url, width) {\n    this.classList.add(layerName);\n    var anchor = document.createElement('a');\n    anchor.setAttribute('href', url);\n    anchor.classList.add(layerName + '_overlay');\n    anchor.setAttribute('style', 'display: box; left: 0px; top: 0px; width: 100%; position: absolute; height: 100%;');\n    anchor.textContent = '&nbsp;';\n    this.appendChild(anchor);\n    while (width && width > 0) {\n        this._renderer._sequence_els[this._index + width].addToLayerWithLink(layerName, url);\n        width -= 1;\n    }\n    if (this._z_indexes && this._z_indexes[layerName]) {\n        anchor.style.zIndex = this._z_indexes[layerName];\n    }\n    return this;\n};\n\n/**\n * Function to be added to Amino acid elements to facilitate adding box overlays to elements\n * @private\n * @param {String} layerName The layer that this amino acid should be added to, as well as the fraction opacity to use for this overlay\n * @returns Itself\n * @type Element\n */\nSequenceRenderer.addBoxOverlayToElement = function (layerName, width, fraction) {\n    if (typeof fraction == 'undefined') {\n        fraction = 1;\n    }\n\n    this.classList.add(layerName);\n    var new_el = document.createElement('div');\n    new_el.classList.add(layerName + '_overlay');\n    new_el.setAttribute('style', 'top: 0px; width: 100%; position: absolute; height: 100%; opacity:' + fraction + ';');\n    this.appendChild(new_el);\n    while (width && width > 1) {\n        this._renderer._sequence_els[this._index + width - 1].addBoxOverlay(layerName, 0, fraction);\n        width -= 1;\n    }\n    if (this._z_indexes && this._z_indexes[layerName]) {\n        new_el.style.zIndex = this._z_indexes[layerName];\n    }\n    var event_names = ['mouseover', 'mousedown', 'mousemove', 'mouseout', 'click', 'dblclick', 'mouseup', 'mouseenter', 'mouseleave'];\n    for (var i = 0; i < event_names.length; i++) {\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(new_el, event_names[i], function () {\n            return function (e) {\n                _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getLayer(layerName), e.type, [e, 'SequenceRenderer']);\n            };\n        }(i));\n    }\n    return this;\n};\n\n/**\n * Reset this renderer. Hide all groups and layers, disabling them in the registry.\n */\nSequenceRenderer.prototype.reset = function () {\n    while (this._container.classList.length > 0) {\n        this._container.classList.remove(this._container.classList.item(0));\n    }\n    for (var group in _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].groups) {\n        if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].groups.hasOwnProperty(group)) {\n            this.hideGroup(group);\n        }\n    }\n    for (var layer in _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers) {\n        if (_MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers.hasOwnProperty(layer)) {\n            this.hideLayer(layer, true);\n            _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].layers[layer].disabled = true;\n        }\n    }\n    delete this._scalers;\n    delete this.forceTrackAccs;\n\n    if (this.resetAnnotations) {\n        this.resetAnnotations();\n    }\n};\n\n/**\n * Execute the given block of code (in the renderer context) moving the refresh method away so that it is not called\n * @param {Function} func Function that contains operations to run without refreshing the renderer\n */\nSequenceRenderer.prototype.withoutRefresh = function (func) {\n    var curr_refresh = this.refresh;\n    this.refresh = function () {};\n    this.refresh.suspended = true;\n    func.apply(this);\n    this.refresh = curr_refresh;\n};\n\n/**\n * Refresh the display for this sequence renderer\n */\nSequenceRenderer.prototype.refresh = function () {\n    var z_index = -2;\n    if (!this._z_indexes) {\n        this._z_indexes = {};\n    }\n    for (var i = 0; i < (this.trackOrder || []).length; i++) {\n        if (!this.isLayerActive(this.trackOrder[i])) {\n            continue;\n        }\n        Array.prototype.slice.call(document.querySelectorAll('.' + this.trackOrder[i] + '_overlay')).forEach(function (el) {\n            el.style.zIndex = z_index;\n        });\n        this._z_indexes[this.trackOrder[i]] = z_index;\n        z_index -= 1;\n    }\n};\n\n/**\n * Bind a function to execute on a particular event for this object\n * @param {String} ev Event name\n * @param {Function} func Function to execute\n */\n\nSequenceRenderer.prototype.bind = function (ev, func) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(this, ev, func);\n};\n\nSequenceRenderer.prototype.unbind = function (ev, func) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(this, ev, func);\n};\n\nSequenceRenderer.prototype.trigger = function (ev, args) {\n    _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(this, ev, args);\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (SequenceRenderer);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9saWIvU2VxdWVuY2VSZW5kZXJlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9saWIvU2VxdWVuY2VSZW5kZXJlci5qcz9lN2ZmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVPdmVydmlldyAgICBSZWFkIGluIHNlcXVlbmNlcyB0byBiZSByZS1yZW5kZXJlZCBpbiBhIGJsb2NrIHRoYXQgY2FuIGJlIGVhc2lseSBhbm5vdGF0ZWQuXG4gKi9cblxuaW1wb3J0IE1BU0NQIGZyb20gJy4vTWFzY3BTZXJ2aWNlJztcbmltcG9ydCBiZWFuIGZyb20gJy4uL2JlYW4nO1xuXG5cbi8qKlxuICogIEBsZW5kcyBNQVNDUC5Hcm91cC5wcm90b3R5cGVcbiAqICBAcHJvcGVydHkgICB7U3RyaW5nfSAgICAgICAgbmFtZSAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgZm9yIHRoaXMgZ3JvdXAgdG8gYmUgdXNlZCBhcyBhbiBpZGVudGlmaWVyXG4gKiAgQHByb3BlcnR5ICAge1N0cmluZ30gICAgICAgIGZ1bGxuYW1lICAgICAgICAgICAgICAgICAgICBUaGUgZnVsbCAobG9uZykgbmFtZSBmb3IgdGhpcyBncm91cCwgdGhhdCBjYW4gYmUgdXNlZCBpbiBVSSB3aWRnZXRzIGZvciBsYWJlbGxpbmdcbiAqICBAcHJvcGVydHkgICB7U3RyaW5nfSAgICAgICAgY29sb3IgICAgICAgICAgICAgICAgICAgICAgIENvbG9yIHN0cmluZyB0byBhcHBseSB0byB0aGlzIGdyb3VwXG4gKiAgQHByb3BlcnR5ICAge0Jvb2xlYW59ICAgICAgIGhpZGVfbWVtYmVyX2NvbnRyb2xsZXJzICAgICBGb3IgY29udHJvbGxlcnMgZm9yIHRoaXMgZ3JvdXAsIGRvIG5vdCBzaG93IHRoZSBsYXllciBjb250cm9sbGVycyBmb3IgdGhpcyBncm91cFxuICogIEBwcm9wZXJ0eSAgIHtCb29sZWFufSAgICAgICBoaWRlX2dyb3VwX2NvbnRyb2xsZXIgICAgICAgRm9yIGNvbnRyb2xsZXJzIGZvciB0aGlzIGdyb3VwIGRvIG5vdCBzaG93IHRoZSBwYXJlbnQgZ3JvdXAgY29udHJvbGxlclxuICovXG5cbi8qKlxuICogUmVnaXN0ZXIgYSBncm91cCB3aXRoIG1ldGFkYXRhIGZvciBhbGwgc2VxdWVuY2UgcmVuZGVyZXJzLlxuICogQHN0YXRpY1xuICogQHBhcmFtIHtTdHJpbmd9IGdyb3VwTmFtZSAgICBOYW1lIHRvIGdpdmUgdG8gdGhpcyBncm91cFxuICogQHBhcmFtIHtIYXNofSBvcHRpb25zICAgICAgICBPcHRpb25zIHRvIGFwcGx5IHRvIHRoaXMgZ3JvdXAgLSBzZWUgTUFTQ1AuR3JvdXAgZm9yIGFsbCB0aGUgZmllbGRzXG4gKiBAcmV0dXJucyBOZXcgZ3JvdXAgb2JqZWN0XG4gKiBAdHlwZSBNQVNDUC5Hcm91cFxuICogQHNlZSBNQVNDUC5ldmVudDpncm91cFJlZ2lzdGVyZWRcbiAqIEBzZWUgTUFTQ1AuR3JvdXBcbiAqL1xuTUFTQ1AucmVnaXN0ZXJHcm91cCA9IGZ1bmN0aW9uKGdyb3VwTmFtZSwgb3B0aW9ucylcbntcbiAgICBpZiAoICEgdGhpcy5ncm91cHMgKSB7XG4gICAgICAgIHRoaXMuZ3JvdXBzID0ge307XG4gICAgfVxuICAgIGlmICh0aGlzLmdyb3Vwc1tncm91cE5hbWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdmFyIGdyb3VwID0gbmV3IE1BU0NQLkdyb3VwKCk7XG4gICAgXG4gICAgZ3JvdXAubmFtZSA9IGdyb3VwTmFtZTtcbiAgICBcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBcbiAgICBpZiAob3B0aW9ucy5oaWRlX21lbWJlcl9jb250cm9sbGVycykge1xuICAgICAgICBncm91cC5oaWRlX21lbWJlcl9jb250cm9sbGVycyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaGlkZV9ncm91cF9jb250cm9sbGVyKSB7XG4gICAgICAgIGdyb3VwLmhpZGVfZ3JvdXBfY29udHJvbGxlciA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZnVsbG5hbWUpIHtcbiAgICAgICAgZ3JvdXAuZnVsbG5hbWUgPSBvcHRpb25zLmZ1bGxuYW1lO1xuICAgIH1cbiAgICBcbiAgICBpZiAob3B0aW9ucy5jb2xvcikge1xuICAgICAgICBncm91cC5jb2xvciA9IG9wdGlvbnMuY29sb3I7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgZ3JvdXAuZ3JvdXAgPSB0aGlzLmdldEdyb3VwKG9wdGlvbnMuZ3JvdXApO1xuICAgICAgICBpZiAoICEgZ3JvdXAuZ3JvdXAgKSB7XG4gICAgICAgICAgICB0aHJvdyBcIkNhbm5vdCByZWdpc3RlciB0aGlzIGxheWVyIHdpdGggdGhlIGdpdmVuIGdyb3VwIC0gdGhlIGdyb3VwIGhhcyBub3QgYmVlbiByZWdpc3RlcmVkIHlldFwiO1xuICAgICAgICB9XG4gICAgICAgIGdyb3VwLmdyb3VwLl9sYXllcnMucHVzaChncm91cCk7XG4gICAgfVxuXG4gICAgZ3JvdXAuX2xheWVycyA9IFtdO1xuXG4gICAgZ3JvdXAuZ3JvdXBfaWQgPSBuZXcgRGF0ZSgpLmdldE1pbGxpc2Vjb25kcygpO1xuICAgIFxuICAgIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV0gPSBncm91cDtcbiAgICBcbiAgICBiZWFuLmZpcmUoTUFTQ1AsJ2dyb3VwUmVnaXN0ZXJlZCcsW2dyb3VwXSk7XG4gICAgXG4gICAgcmV0dXJuIGdyb3VwO1xufTtcblxuLyoqXG4gKiAgQGxlbmRzIE1BU0NQLkxheWVyLnByb3RvdHlwZVxuICogIEBwcm9wZXJ0eSAgIHtTdHJpbmd9ICAgICAgICBuYW1lICAgICAgICBOYW1lIGZvciB0aGlzIGxheWVyIHRvIGJlIHVzZWQgYXMgYW4gaWRlbnRpZmllclxuICogIEBwcm9wZXJ0eSAgIHtTdHJpbmd9ICAgICAgICBmdWxsbmFtZSAgICBUaGUgZnVsbCAobG9uZykgbmFtZSBmb3IgdGhpcyBsYXllciwgdGhhdCBjYW4gYmUgdXNlZCBpbiBVSSB3aWRnZXRzIGZvciBsYWJlbGxpbmdcbiAqICBAcHJvcGVydHkgICB7U3RyaW5nfSAgICAgICAgY29sb3IgICAgICAgQ29sb3Igc3RyaW5nIHRvIGFwcGx5IHRvIHRoaXMgbGF5ZXJcbiAqICBAcHJvcGVydHkgICB7TUFTQ1AuR3JvdXB9ICAgZ3JvdXAgICAgICAgR3JvdXAgdGhhdCB0aGlzIGxheWVyIGlzIHBhcnQgb2YuIEVpdGhlciBhIGdyb3VwIG9iamVjdCwgb3IgdGhlIG5hbWUgZm9yIHRoZSBncm91cC5cbiAqICBAcHJvcGVydHkgICB7U3RyaW5nfSAgICAgICAgY3NzICAgICAgICAgQ1NTIGJsb2NrIGZvciB0aGlzIGxheWVyLiBBY3RpdmUgYW5kIGluYWN0aXZlIGxheWVycyBhcmUgY2hpbGRyZW4gb2YgdGhlIC5hY3RpdmUgYW5kIC5pbmFjdGl2ZSBjbGFzc2VzIHJlc3BlY3RpdmVseS4gVG8gdGFyZ2V0IGEgdHJhY2stYmFzZWQgcmVuZGVyaW5nLCB1c2UgdGhlIC50cmFja3MgY2xhc3MgZmlyc3QsIGFuZCB0byB0YXJnZXQgb3ZlcmxheXMsIHVzZSB0aGUgLm92ZXJsYXkgY2xhc3MgbGFzdFxuICogIEBwcm9wZXJ0eSAgIHtPYmplY3R9ICAgICAgICBkYXRhICAgICAgICBEYXRhIGZvciB0aGlzIGxheWVyXG4gKi9cblxuLyoqXG4gKiBSZWdpc3RlciBhIGxheWVyIHdpdGggbWV0YWRhdGEgZm9yIGFsbCBzZXF1ZW5jZSByZW5kZXJlcnMuXG4gKiBAc3RhdGljXG4gKiBAcGFyYW0ge1N0cmluZ30gbGF5ZXJOYW1lICAgIE5hbWUgdG8gZ2l2ZSB0byB0aGlzIGxheWVyXG4gKiBAcGFyYW0ge0hhc2h9IG9wdGlvbnMgICAgICAgIE9wdGlvbnMgdG8gc2V0IGZpZWxkIHZhbHVlcyBmb3IgdGhpcyBsYXllciAtIHNlZSB0aGUgZmllbGRzIGZvciBNQVNDUC5MYXllci5cbiAqIEByZXR1cm5zIE5ldyBsYXllciBvYmplY3RcbiAqIEB0eXBlIE1BU0NQLkxheWVyXG4gKiBAc2VlIE1BU0NQLkxheWVyXG4gKiBAc2VlIE1BU0NQLmV2ZW50OmxheWVyUmVnaXN0ZXJlZFxuICovXG5NQVNDUC5yZWdpc3RlckxheWVyID0gZnVuY3Rpb24obGF5ZXJOYW1lLCBvcHRpb25zLCByZW5kZXJlcnMpXG57XG4gICAgaWYgKCAhIHRoaXMubGF5ZXJzICkge1xuICAgICAgICB0aGlzLmxheWVycyA9IHt9O1xuICAgIH1cbiAgICBpZiAoICEgcmVuZGVyZXJzICkge1xuICAgICAgICByZW5kZXJlcnMgPSBbXTtcbiAgICB9XG4gICAgdmFyIGxheWVyO1xuICAgIGlmICh0aGlzLmxheWVyc1tsYXllck5hbWVdKSB7XG4gICAgICAgIGlmICh0aGlzLmxheWVyc1tsYXllck5hbWVdLmRpc2FibGVkIHx8IHJlbmRlcmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyc1tsYXllck5hbWVdLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBiZWFuLmZpcmUoTUFTQ1AsJ2xheWVyUmVnaXN0ZXJlZCcsW3RoaXMubGF5ZXJzW2xheWVyTmFtZV1dLmNvbmNhdChyZW5kZXJlcnMpKTtcbiAgICAgICAgfVxuICAgICAgICBsYXllciA9IHRoaXMubGF5ZXJzW2xheWVyTmFtZV07XG4gICAgfVxuXG4gICAgaWYgKGxheWVyICYmIG9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgaWYgKGxheWVyLmdyb3VwICE9PSB0aGlzLmdldEdyb3VwKG9wdGlvbnMuZ3JvdXApKSB7XG4gICAgICAgICAgICBsYXllci5ncm91cCA9IHRoaXMuZ2V0R3JvdXAob3B0aW9ucy5ncm91cCk7XG4gICAgICAgICAgICBsYXllci5ncm91cC5fbGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICggISBsYXllci5ncm91cCApIHtcbiAgICAgICAgICAgIHRocm93IFwiQ2Fubm90IHJlZ2lzdGVyIHRoaXMgbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gZ3JvdXAgLSB0aGUgZ3JvdXAgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQgeWV0XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKGxheWVyKSB7XG4gICAgICAgIHJldHVybiBsYXllcjtcbiAgICB9XG5cbiAgICBsYXllciA9IG5ldyBNQVNDUC5MYXllcigpO1xuICAgIFxuICAgIGxheWVyLm5hbWUgPSBsYXllck5hbWU7XG4gICAgXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgXG4gICAgaWYgKG9wdGlvbnMuZnVsbG5hbWUpIHtcbiAgICAgICAgbGF5ZXIuZnVsbG5hbWUgPSBvcHRpb25zLmZ1bGxuYW1lO1xuICAgIH1cbiAgICBcbiAgICBpZiAob3B0aW9ucy5jb2xvcikge1xuICAgICAgICBsYXllci5jb2xvciA9IG9wdGlvbnMuY29sb3I7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuZGF0YSkge1xuICAgICAgICBsYXllci5kYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgIH1cbiAgICBcbiAgICBpZiAobGF5ZXIgJiYgb3B0aW9ucy5ncm91cCkge1xuICAgICAgICBsYXllci5ncm91cCA9IHRoaXMuZ2V0R3JvdXAob3B0aW9ucy5ncm91cCk7XG4gICAgICAgIGlmICggISBsYXllci5ncm91cCApIHtcbiAgICAgICAgICAgIHRocm93IFwiQ2Fubm90IHJlZ2lzdGVyIHRoaXMgbGF5ZXIgd2l0aCB0aGUgZ2l2ZW4gZ3JvdXAgLSB0aGUgZ3JvdXAgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQgeWV0XCI7XG4gICAgICAgIH1cbiAgICAgICAgbGF5ZXIuZ3JvdXAuX2xheWVycy5wdXNoKGxheWVyKTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5sYXllcnNbbGF5ZXJOYW1lXSA9IGxheWVyO1xuICAgIFxuICAgIGlmIChvcHRpb25zLmNzcykge1xuICAgICAgICBjb25zb2xlLmxvZyhcIm9wdGlvbnMuY3NzIGlzIGRlcHJlY2F0ZWRcIik7XG4gICAgfVxuICAgIGxheWVyLmxheWVyX2lkID0gbmV3IERhdGUoKS5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICBiZWFuLmZpcmUoTUFTQ1AsJ2xheWVyUmVnaXN0ZXJlZCcsW2xheWVyXS5jb25jYXQocmVuZGVyZXJzKSk7XG4gICAgXG4gICAgcmV0dXJuIGxheWVyO1xufTtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIE1ldGFkYXRhIGZvciBhIGdyb3VwIG9mIGxheWVycyB0byBiZSByZW5kZXJlZFxuICovXG5NQVNDUC5Hcm91cCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybjtcbn07XG5cbi8qKlxuICogRGVzY3JpYmUgd2hhdCB0aGlzIG1ldGhvZCBkb2VzXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fEFycmF5fEJvb2xlYW58TnVtYmVyfSBwYXJhbU5hbWUgRGVzY3JpYmUgdGhpcyBwYXJhbWV0ZXJcbiAqIEByZXR1cm5zIERlc2NyaWJlIHdoYXQgaXQgcmV0dXJuc1xuICogQHR5cGUgU3RyaW5nfE9iamVjdHxBcnJheXxCb29sZWFufE51bWJlclxuICovXG5NQVNDUC5Hcm91cC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3VudGVyID0gMDtcbiAgICBmb3IgKHZhciBpID0gMCA7IGkgPCB0aGlzLl9sYXllcnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIGlmICghIHRoaXMuX2xheWVyc1tpXS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgY291bnRlciArPSAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3VudGVyO1xufTtcblxuTUFTQ1AuR3JvdXAucHJvdG90eXBlLmVhY2hMYXllciA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICBmb3IgKHZhciBpID0gMCA7IGkgPCB0aGlzLl9sYXllcnMubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgIGlmICghIHRoaXMuX2xheWVyc1tpXS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgZnVuYy5jYWxsKHRoaXMuX2xheWVyc1tpXSx0aGlzLl9sYXllcnNbaV0pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLyoqXG4gKiBAY2xhc3NcbiAqIE1ldGFkYXRhIGZvciBhIHNpbmdsZSBsYXllciB0byBiZSByZW5kZXJlZFxuICovXG5NQVNDUC5MYXllciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybjtcbn07XG5cbi8qKlxuICogQGNsYXNzICAgUmVmb3JtYXR0ZXIgZm9yIHNlcXVlbmNlcyBpbiBodG1sIHBhZ2VzLiBUaGUgb2JqZWN0IHJldHJpZXZlcyB0aGUgYW1pbm8gYWNpZCBzZXF1ZW5jZSBmcm9tIHRoZSBcbiAqICAgICAgICAgIGdpdmVuIGVsZW1lbnQsIGFuZCB0aGVuIHJlZm9ybWF0cyB0aGUgZGlzcGxheSBvZiB0aGUgc2VxdWVuY2Ugc28gdGhhdCByZW5kZXJpbmcgbGF5ZXJzIGNhbiBiZVxuICogICAgICAgICAgYXBwbGllZCB0byBpdC4gXG4gKiBAYXV0aG9yICBoampvc2hpXG4gKiBAcGFyYW0gICB7RWxlbWVudH0gc2VxdWVuY2VDb250YWluZXIgQ29udGFpbmVyIGVsZW1lbnQgdGhhdCB0aGUgc2VxdWVuY2UgY3VycmVudGx5IGlzIGZvdW5kIGluLCBhbmQgYWxzbyBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgY29udGFpbmVyIHRoYXQgZGF0YSB3aWxsIGJlIHJlLWluc2VydGVkIGludG8uXG4gKi9cbmNvbnN0IFNlcXVlbmNlUmVuZGVyZXIgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiAgQGxlbmRzIFNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlXG4gICAgICogIEBwcm9wZXJ0eSAgIHtBcnJheX0gICAgIHRyYWNrT3JkZXIgIFRoZSBvcmRlciBvZiB0cmFja3Mgb24gdGhlIHJlbmRlcmVyLCBhbiBhcnJheSBvZiBsYXllci9ncm91cCBuYW1lcy5cbiAgICAgKi9cbiAgICB2YXIgc2V0dXBUcmFja09yZGVyID0gZnVuY3Rpb24ocmVuZGVyZXIpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVyX3RyYWNrX29yZGVyID0gW107XG5cbiAgICAgICAgdmFyIGFjY2Vzc29ycyA9IHtcblxuICAgICAgICAgICAgZ2V0VHJhY2tPcmRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcmVyX3RyYWNrX29yZGVyO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgc2V0VHJhY2tPcmRlcjogZnVuY3Rpb24oaW5fb3JkZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgdHJhY2tfb3JkZXIgPSBbXTtcbiAgICAgICAgICAgICAgICB2YXIgb3JkZXIgPSBpbl9vcmRlcjtcbiAgICAgICAgICAgICAgICBpZiAoICEgb3JkZXIgaW5zdGFuY2VvZiBBcnJheSApIHtcbiAgICAgICAgICAgICAgICAgICAgb3JkZXIgPSBbIGluX29yZGVyIF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYV90cmFjayA9IG9yZGVyW2ldO1xuICAgICAgICAgICAgICAgICAgICBpZiAoTUFTQ1AuZ2V0TGF5ZXIoYV90cmFjaykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cmFja19vcmRlci5pbmRleE9mKGFfdHJhY2spID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja19vcmRlci5zcGxpY2UodHJhY2tfb3JkZXIuaW5kZXhPZihhX3RyYWNrKSwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrX29yZGVyLnB1c2goYV90cmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKE1BU0NQLmdldEdyb3VwKGFfdHJhY2spKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBNQVNDUC5nZXRHcm91cChvcmRlcltpXSkuZWFjaExheWVyKGZ1bmN0aW9uKGdycF9sYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodHJhY2tfb3JkZXIuaW5kZXhPZihncnBfbGF5Lm5hbWUpID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tfb3JkZXIuc3BsaWNlKHRyYWNrX29yZGVyLmluZGV4T2YoZ3JwX2xheS5uYW1lKSwxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXIuc3BsaWNlKGkrMSwwLGdycF9sYXkubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAoKHJlbmRlcmVyX3RyYWNrX29yZGVyIHx8IFtdKS5sZW5ndGggLSAxKTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrX29yZGVyLmluZGV4T2YocmVuZGVyZXJfdHJhY2tfb3JkZXJbaV0pIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlTGF5ZXIocmVuZGVyZXJfdHJhY2tfb3JkZXJbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlR3JvdXAocmVuZGVyZXJfdHJhY2tfb3JkZXJbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1BU0NQLmdldExheWVyKHJlbmRlcmVyX3RyYWNrX29yZGVyW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlYW4uZmlyZShNQVNDUC5nZXRMYXllcihyZW5kZXJlcl90cmFja19vcmRlcltpXSksJ3JlbW92ZWQnLFtyZW5kZXJlcl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1BU0NQLmdldEdyb3VwKHJlbmRlcmVyX3RyYWNrX29yZGVyW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlYW4uZmlyZShNQVNDUC5nZXRHcm91cChyZW5kZXJlcl90cmFja19vcmRlcltpXSksJ3JlbW92ZWQnLFtyZW5kZXJlcl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbmRlcmVyX3RyYWNrX29yZGVyID0gdHJhY2tfb3JkZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWZyZXNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmVhbi5maXJlKHJlbmRlcmVyLCdvcmRlckNoYW5nZWQnLCBbIHRyYWNrX29yZGVyIF0gKTtcblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChNQVNDUC5JRSkge1xuICAgICAgICAgICAgcmVuZGVyZXIuc2V0VHJhY2tPcmRlciA9IGFjY2Vzc29ycy5zZXRUcmFja09yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh0eXBlb2YgT2JqZWN0LmRlZmluZVByb3BlcnR5ID09ICdmdW5jdGlvbicpICYmICEgTUFTQ1AuSUU4ICkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlbmRlcmVyLFwidHJhY2tPcmRlclwiLCB7XG4gICAgICAgICAgICAgICAgZ2V0IDogYWNjZXNzb3JzLmdldFRyYWNrT3JkZXIsXG4gICAgICAgICAgICAgICAgc2V0IDogYWNjZXNzb3JzLnNldFRyYWNrT3JkZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbihzZXF1ZW5jZUNvbnRhaW5lcikge1xuICAgICAgICBpZiAoISBzZXF1ZW5jZUNvbnRhaW5lcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzZXF1ZW5jZUNvbnRhaW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IHNlcXVlbmNlQ29udGFpbmVyO1xuICAgICAgICAgICAgaWYgKCAhIHRoaXMuX2NvbnRhaW5lci5zdHlsZS5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgICAgICB9XG4gICAgLy8gICAgICAgIHRoaXMuX2NvbnRhaW5lci5zdHlsZS53aWR0aCA9ICcxMDAlJztcblxuICAgICAgICAgICAgYmVhbi5hZGQodGhpcywnc2VxdWVuY2VDaGFuZ2UnLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgICAgICB3aGlsZSAoc2VxdWVuY2VDb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBzZXF1ZW5jZUNvbnRhaW5lci5yZW1vdmVDaGlsZChzZXF1ZW5jZUNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VxdWVuY2VfZWxzLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VxdWVuY2VDb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHZhciBmbG9hdF9jbGVhciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGZsb2F0X2NsZWFyLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCdjbGVhcjogYm90aDsgZmxvYXQ6IG5vbmU7IGhlaWdodDogMHB4OyB3aWR0aDogMTAwJTsnKTtcbiAgICAgICAgICAgICAgICBzZXF1ZW5jZUNvbnRhaW5lci5hcHBlbmRDaGlsZChmbG9hdF9jbGVhcik7XG4gICAgICAgICAgICAgICAgc2VxdWVuY2VDb250YWluZXIuc3R5bGUud2lkdGggPSAodGhpcy5fc2VxdWVuY2VfZWxzLmxlbmd0aCkrJ2VtJztcbiAgICAvLyAgICAgICAgICAgIHRoaXMuc2hvd1Jvd051bWJlcnMoKTsgICAgICAgICAgICBcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLnNldFNlcXVlbmNlKHNlcXVlbmNlQ29udGFpbmVyLnRleHRDb250ZW50IHx8ICcnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgc2V0dXBUcmFja09yZGVyKHRoaXMpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbn0pKCk7XG5cbi8qKlxuICogRXZlbnQgZmlyZWQgd2hlbiBhIGxheWVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgZ2xvYmFsIGxheWVyIHJlZ2lzdHJ5XG4gKiBAbmFtZSAgICBNQVNDUC5sYXllclJlZ2lzdGVyZWRcbiAqIEBldmVudFxuICogQHBhcmFtICAge09iamVjdH0gICAgZVxuICogQHBhcmFtICAge09iamVjdH0gICAgbGF5ZXIgTGF5ZXIganVzdCByZWdpc3RlcmVkXG4gKi9cblxuLyoqXG4gKiBFdmVudCBmaXJlZCB3aGVuIGEgZ3JvdXAgaXMgcmVnaXN0ZXJlZCB3aXRoIHRoZSBnbG9iYWwgZ3JvdXAgcmVnaXN0cnlcbiAqIEBuYW1lICAgIE1BU0NQLmdyb3VwUmVnaXN0ZXJlZFxuICogQGV2ZW50XG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBlXG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBncm91cCBHcm91cCBqdXN0IHJlZ2lzdGVyZWRcbiAqL1xuXG4vKipcbiAqIEV2ZW50IGZpcmVkIHdoZW4gdGhlIHNlcXVlbmNlIGlzIGNoYW5nZWQgaW4gYSBzZXF1ZW5jZSByZW5kZXJlclxuICogQG5hbWUgICAgU2VxdWVuY2VSZW5kZXJlciNzZXF1ZW5jZUNoYW5nZVxuICogQGV2ZW50XG4gKiBAcGFyYW0gICB7T2JqZWN0fSAgICBlXG4gKi9cblxuLyoqXG4gKiBFdmVudCBmaXJlZCB3aGVuIGEgcmVzdWx0IGlzIHJlbmRlcmVkIG9uIHRoaXMgcmVuZGVyZXJcbiAqIEBuYW1lICAgIFNlcXVlbmNlUmVuZGVyZXIjcmVzdWx0c1JlbmRlcmVkXG4gKiBAZXZlbnRcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGVcbiAqIEBwYXJhbSAgIHtNQVNDUC5TZXJ2aWNlfSByZWFkZXIgIFJlYWRlciB0aGF0IHJlbmRlcmVkIHRoZSByZXN1bHQuXG4gKi9cblxuLyoqXG4gKiBAbmFtZSAgICBNQVNDUC5Hcm91cCN2aXNpYmlsaXR5Q2hhbmdlXG4gKiBAZXZlbnRcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGVcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIHJlbmRlcmVyXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICB2aXNpYmlsaXR5XG4gKi9cblxuLyoqXG4gKiBAbmFtZSAgICBNQVNDUC5MYXllciN2aXNpYmlsaXR5Q2hhbmdlXG4gKiBAZXZlbnRcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIGVcbiAqIEBwYXJhbSAgIHtPYmplY3R9ICAgIHJlbmRlcmVyXG4gKiBAcGFyYW0gICB7Qm9vbGVhbn0gICB2aXNpYmlsaXR5XG4gKi9cblxuXG5cbi8qKlxuICogIEBsZW5kcyBTZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZVxuICogIEBwcm9wZXJ0eSAgIHtTdHJpbmd9ICBzZXF1ZW5jZSAgU2VxdWVuY2UgdG8gbWFyayB1cC5cbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUgPSB7XG4gICAgc2VxdWVuY2U6IG51bGwgXG59O1xuIFxuaWYgKCBNQVNDUC5JRSApIHtcbiAgICBTZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS5wcm90b3R5cGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbn1cblxuXG4vKipcbiAqIFNldCB0aGUgc2VxdWVuY2UgZm9yIHRoaXMgcmVuZGVyZXIuIEZpcmVzIHRoZSBzZXF1ZW5jZUNoYW5nZSBldmVudCB3aGVuIHRoZSBzZXF1ZW5jZSBpcyBzZXQuXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VxdWVuY2UgU2VxdWVuY2UgdG8gcmVuZGVyXG4gKiBAc2VlIFNlcXVlbmNlUmVuZGVyZXIjZXZlbnQ6c2VxdWVuY2VDaGFuZ2VcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuc2V0U2VxdWVuY2UgPSBmdW5jdGlvbihzZXF1ZW5jZSlcbntcbiAgICB0aGlzLnNlcXVlbmNlID0gdGhpcy5fY2xlYW5TZXF1ZW5jZShzZXF1ZW5jZSk7XG4gICAgdmFyIHNlcXVlbmNlX2VscyA9IFtdO1xuICAgIHZhciByZW5kZXJlciA9IHRoaXM7XG4gICAgaWYgKCAhIHRoaXMuc2VxdWVuY2UgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHNlcV9jaGFycyA9IHRoaXMuc2VxdWVuY2Uuc3BsaXQoJycpO1xuICAgIGZvciAodmFyIGkgPTA7IGkgPCBzZXFfY2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGFhID0gc2VxX2NoYXJzW2ldO1xuICAgICAgICBpZiAoYWEubWF0Y2goL1tBLVphLXpdLykpIHtcbiAgICAgICAgICAgIHZhciBzcGFuX2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xuICAgICAgICAgICAgc3Bhbl9lbC50ZXh0Q29udGVudCA9IGFhO1xuICAgICAgICAgICAgc2VxdWVuY2VfZWxzLnB1c2goc3Bhbl9lbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXF1ZW5jZV9lbHMuZm9yRWFjaCggZnVuY3Rpb24oZWwsaSkge1xuICAgICAgICAvLyBpZiAoIChpICUgMTApID09IDAgJiYgaSA+IDAgJiYgKChpICUgNTApICE9IDApKSB7XG4gICAgICAgIC8vICAgICB0aGlzLnN0eWxlLm1hcmdpbiA9ICcwcHggMHB4IDBweCAxZW0nO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGlmICggKGkgJSA1MCkgPT0gMCAmJiBpID4gMCApIHtcbiAgICAgICAgLy8gICAgIGlmIChNQVNDUC5JRTcpIHtcbiAgICAgICAgLy8gICAgICAgICBzZXF1ZW5jZV9lbHNbaS0xXS5zdHlsZS5zdHlsZUZsb2F0ID0gJ25vbmUnO1xuICAgICAgICAvLyAgICAgICAgIHNlcXVlbmNlX2Vsc1tpLTFdLnN0eWxlLndpZHRoID0gJzFlbSc7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vICAgICB0aGlzLnN0eWxlLmNsZWFyID0gJ2JvdGgnO1xuICAgICAgICAvLyB9XG4gICAgICAgIFxuICAgICAgICBlbC5faW5kZXggPSBpO1xuICAgICAgICBcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGVsLnN0eWxlLmNzc0Zsb2F0ID0gJ2xlZnQnO1xuICAgICAgICBlbC5zdHlsZS5zdHlsZUZsb2F0ID0gJ2xlZnQnO1xuICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSAnMS4xZW0nO1xuICAgICAgICBlbC5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cbiAgICAgICAgZWwuYWRkVG9MYXllciA9IFNlcXVlbmNlUmVuZGVyZXIuYWRkRWxlbWVudFRvTGF5ZXI7XG4gICAgICAgIGVsLmFkZEJveE92ZXJsYXkgPSBTZXF1ZW5jZVJlbmRlcmVyLmFkZEJveE92ZXJsYXlUb0VsZW1lbnQ7XG4gICAgICAgIGVsLmFkZFRvTGF5ZXJXaXRoTGluayA9IFNlcXVlbmNlUmVuZGVyZXIuYWRkRWxlbWVudFRvTGF5ZXJXaXRoTGluaztcbiAgICAgICAgZWwuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgfSk7XG4gICAgdGhpcy5fc2VxdWVuY2VfZWxzID0gc2VxdWVuY2VfZWxzOyAgIFxuICAgIGJlYW4uZmlyZSh0aGlzLCdzZXF1ZW5jZUNoYW5nZScpO1xufTtcblxuLyoqXG4gKiBDb2xvciBzb21lIHJlc2lkdWVzIG9uIHRoaXMgcmVzaWR1ZVxuICogQHBhcmFtIHtBcnJheX0gaW5kZXhlcyBJbmRleGVzIHRvIGFwcGx5IHRoZSBnaXZlbiBjb2xvciB0b1xuICogQHBhcmFtIHtTdHJpbmd9IGNvbG9yIENvbG9yIHRvIHVzZSB0byBoaWdobGlnaHQgdGhlIHJlc2lkdWVzXG4gKiBAcmV0dXJucyBJRCBmb3IgdGhlIGxheWVyIHRoYXQgaXMgY3JlYXRlZFxuICogQHR5cGUgU3RyaW5nXG4gKi9cblNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlLmNvbG9yUmVzaWR1ZXMgPSBmdW5jdGlvbihpbmRleGVzLCBjb2xvcikge1xuICAgIHZhciBsYXllcl9pZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSoxMDAwKS50b1N0cmluZygpO1xuICAgIE1BU0NQLnJlZ2lzdGVyTGF5ZXIobGF5ZXJfaWQsIHsgJ2NvbG9yJyA6IChjb2xvciB8fCAnI2ZmMDAwMCcpIH0pO1xuICAgIHZhciBhYXMgPSB0aGlzLmdldEFtaW5vQWNpZHNCeVBvc2l0aW9uKGluZGV4ZXMpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWFzLmxlbmd0aDsgaSsrICkge1xuICAgICAgICBhYXNbaV0uYWRkVG9MYXllcihsYXllcl9pZCk7XG4gICAgfVxuICAgIHJldHVybiBNQVNDUC5nZXRMYXllcihsYXllcl9pZCk7XG59O1xuXG5cblNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlLl9jbGVhblNlcXVlbmNlID0gZnVuY3Rpb24oc2VxdWVuY2UpIHtcbiAgICBpZiAoICEgc2VxdWVuY2UgKSB7XG4gICAgICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgICB9XG4gICAgdmFyIGNsZWFuZWRfc2VxdWVuY2UgPSBzZXF1ZW5jZTtcbiAgICBjbGVhbmVkX3NlcXVlbmNlID0gY2xlYW5lZF9zZXF1ZW5jZS5yZXBsYWNlKG5ldyBSZWdFeHAoU3RyaW5nLmZyb21DaGFyQ29kZSgxNjApLFwiZ1wiKSwnJyk7XG4gICAgY2xlYW5lZF9zZXF1ZW5jZSA9IGNsZWFuZWRfc2VxdWVuY2UucmVwbGFjZSgvW1xcblxcdFxcc1xcZF0rL21naSwnJyk7XG4gICAgY2xlYW5lZF9zZXF1ZW5jZSA9IGNsZWFuZWRfc2VxdWVuY2UucmVwbGFjZSgvXFwoLipcXCkvZywnJyk7XG4gICAgcmV0dXJuIGNsZWFuZWRfc2VxdWVuY2U7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBIVE1MIEVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgYW1pbm8gYWNpZHMgYXQgdGhlIGdpdmVuIHBvc2l0aW9ucy4gVGhlIGZpcnN0IGFtaW5vIGFjaWQgaXMgZm91bmQgYXQgcG9zaXRpb24gMS5cbiAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgSW5kZXhlcyB0byByZXRyaWV2ZSBlbGVtZW50cyBmb3JcbiAqIEByZXR1cm5zIEVsZW1lbnRzIHJlcHJlc2VudGluZyBlYWNoIGFtaW5vIGFjaWQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uc1xuICogQHR5cGUgQXJyYXlcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuZ2V0QW1pbm9BY2lkc0J5UG9zaXRpb24gPSBmdW5jdGlvbihpbmRleGVzKSB7XG4gICAgdmFyIHNlcXVlbmNlX2VscyA9IHRoaXMuX3NlcXVlbmNlX2VscztcbiAgICByZXR1cm4gaW5kZXhlcy5tYXAoZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlcXVlbmNlX2Vsc1tpbmRleC0xXTtcbiAgICB9KTtcbn07XG5cblNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlLmdldEFBID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRBbWlub0FjaWRzQnlQb3NpdGlvbihbaW5kZXhdKS5zaGlmdCgpO1xufTtcblxuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBIVE1MIEVsZW1lbnRzIHRoYXQgY29udGFpbiB0aGUgYW1pbm8gYWNpZHMgY29udGFpbmVkIGluIHRoZSBnaXZlbiBwZXB0aWRlIHNlcXVlbmNlLlxuICogQHBhcmFtIHtTdHJpbmd9IHBlcHRpZGVTZXF1ZW5jZSBQZXB0aWRlIHNlcXVlbmNlIHVzZWQgdG8gbG9vayB1cCB0aGUgYW1pbm8gYWNpZHNcbiAqIEByZXR1cm5zIEVsZW1lbnRzIHJlcHJlc2VudGluZyBlYWNoIGFtaW5vIGFjaWQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uc1xuICogQHR5cGUgQXJyYXlcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuZ2V0QW1pbm9BY2lkc0J5UGVwdGlkZSA9IGZ1bmN0aW9uKHBlcHRpZGVTZXF1ZW5jZSkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuc2VxdWVuY2UuaW5kZXhPZihwZXB0aWRlU2VxdWVuY2UpO1xuICAgIHZhciByZXN1bHRzID0gW107XG5cbiAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdHMuYWRkVG9MYXllciA9IGZ1bmN0aW9uKCkge307XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cbiAgICByZXN1bHRzID0gcmVzdWx0cy5jb25jYXQodGhpcy5fc2VxdWVuY2VfZWxzLnNsaWNlKHN0YXJ0LHN0YXJ0KyhwZXB0aWRlU2VxdWVuY2UubGVuZ3RoKSkpO1xuICAgIGlmIChyZXN1bHRzLmxlbmd0aCkge1xuICAgICAgICByZXN1bHRzLmFkZFRvTGF5ZXIgPSBmdW5jdGlvbihsYXllcm5hbWUsIGZyYWN0aW9uLCBvcHRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0c1swXS5hZGRCb3hPdmVybGF5KGxheWVybmFtZSxyZXN1bHRzLmxlbmd0aCxmcmFjdGlvbixvcHRpb25zKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRzLmFkZFRvTGF5ZXIgPSBmdW5jdGlvbigpIHt9O1xuICAgIH1cbiAgICAgICAgXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFRvZ2dsZSB0aGUgZGlzcGxheSBvZiB0aGUgZ2l2ZW4gbGF5ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gbGF5ZXIgTGF5ZXIgbmFtZSwgb3IgbGF5ZXIgb2JqZWN0XG4gKiBAc2VlIE1BU0NQLkxheWVyI2V2ZW50OnZpc2liaWxpdHlDaGFuZ2VcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUudG9nZ2xlTGF5ZXIgPSBmdW5jdGlvbihsYXllcixjb25zdW1lQ2hhbmdlKSB7XG4gICAgdmFyIGxheWVyTmFtZSA9IGxheWVyO1xuICAgIGlmICh0eXBlb2YgbGF5ZXIgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGF5ZXJOYW1lID0gbGF5ZXIubmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsYXllciA9IE1BU0NQLmxheWVyc1tsYXllcl07XG4gICAgfVxuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKGxheWVyTmFtZSsnX2FjdGl2ZScpO1xuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QudG9nZ2xlKGxheWVyTmFtZSsnX2luYWN0aXZlJyk7XG4gICAgaWYgKCAhIGNvbnN1bWVDaGFuZ2UgKSB7XG4gICAgICAgIGJlYW4uZmlyZShsYXllciwndmlzaWJpbGl0eUNoYW5nZScsW3RoaXMsdGhpcy5pc0xheWVyQWN0aXZlKGxheWVyKV0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2hvdyB0aGUgZ2l2ZW4gbGF5ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gbGF5ZXIgTGF5ZXIgbmFtZSwgb3IgbGF5ZXIgb2JqZWN0XG4gKiBAc2VlIE1BU0NQLkxheWVyI2V2ZW50OnZpc2liaWxpdHlDaGFuZ2VcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuc2hvd0xheWVyID0gZnVuY3Rpb24obGF5LGNvbnN1bWVDaGFuZ2UpIHtcbiAgICB2YXIgbGF5ZXIgPSBNQVNDUC5nZXRMYXllcihsYXkpO1xuXG4gICAgaWYgKCEgbGF5ZXIgfHwgbGF5ZXIuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZChsYXllci5uYW1lKydfYWN0aXZlJyk7XG4gICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZV9sYXllcicpOyAgICBcbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShsYXllci5uYW1lKydfaW5hY3RpdmUnKTtcbiAgICBpZiAoICEgY29uc3VtZUNoYW5nZSApIHtcbiAgICAgICAgYmVhbi5maXJlKGxheWVyLCd2aXNpYmlsaXR5Q2hhbmdlJyxbdGhpcyx0cnVlXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBIaWRlIHRoZSBnaXZlbiBsYXllclxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBsYXllciBMYXllciBuYW1lLCBvciBsYXllciBvYmplY3RcbiAqIEBzZWUgTUFTQ1AuTGF5ZXIjZXZlbnQ6dmlzaWJpbGl0eUNoYW5nZVxuICovXG5TZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS5oaWRlTGF5ZXIgPSBmdW5jdGlvbihsYXksY29uc3VtZUNoYW5nZSkge1xuICAgIHZhciBsYXllciA9IE1BU0NQLmdldExheWVyKGxheSk7XG5cbiAgICBpZiAoISBsYXllciB8fCBsYXllci5kaXNhYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgICAgICBcbiAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShsYXllci5uYW1lKydfYWN0aXZlJyk7XG4gICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZV9sYXllcicpO1xuICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKGxheWVyLm5hbWUrJ19pbmFjdGl2ZScpO1xuICAgIGlmICghIGNvbnN1bWVDaGFuZ2UgKSB7XG4gICAgICAgIGJlYW4uZmlyZShsYXllciwndmlzaWJpbGl0eUNoYW5nZScsW3RoaXMsZmFsc2VdKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgbGF5ZXIgd2l0aCB0aGlzIHJlbmRlcmVyLiBBY3R1YWxseSBpcyBhIHByb3h5IG9uIHRvIHRoZSBnbG9iYWwgcmVnaXN0cnkgbWV0aG9kXG4gKiBAc2VlIE1BU0NQI3JlZ2lzdGVyTGF5ZXJcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUucmVnaXN0ZXJMYXllciA9IGZ1bmN0aW9uKGxheWVyLG9wdGlvbnMpIHtcbiAgICByZXR1cm4gTUFTQ1AucmVnaXN0ZXJMYXllcihsYXllcixvcHRpb25zKTtcbn07XG5cbi8qKlxuICogSGlkZSBvciBzaG93IGEgZ3JvdXAuIEZpcmVzIGFuIGV2ZW50IHdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGdycCBHcm91cCB0byBzZXQgdGhlIHZpc2liaWxpdHkgZm9yXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHZpc2liaWxpdHkgVHJ1ZSBmb3IgdmlzaWJsZSwgZmFsc2UgZm9yIGhpZGRlblxuICogQHNlZSBNQVNDUC5Hcm91cCNldmVudDp2aXNpYmlsaXR5Q2hhbmdlXG4gKi9cblNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlLnNldEdyb3VwVmlzaWJpbGl0eSA9IGZ1bmN0aW9uKGdycCx2aXNpYmlsaXR5LGNvbnN1bWVDaGFuZ2UpIHtcbiAgICB2YXIgZ3JvdXAgPSBNQVNDUC5nZXRHcm91cChncnApO1xuICAgIGlmICggISBncm91cCApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZ3JvdXBOYW1lID0gZ3JvdXAubmFtZTtcbiAgICBcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzO1xuXG4gICAgZ3JvdXAuZWFjaExheWVyKGZ1bmN0aW9uKGxheWVyKSB7XG4gICAgICAgIGlmIChNQVNDUC5nZXRHcm91cChsYXllcikgPT09IGxheWVyKSB7XG4gICAgICAgICAgICAvLyBXZSBjYW4gc2tpcCBleHBsaWNpdGx5IHNldHRpbmcgdGhlIHZpc2liaWxpdHkgb2YgZ3JvdXBzIGhlcmUsIHNpbmNlXG4gICAgICAgICAgICAvLyBhbnkgc3ViLWdyb3VwcyBzaG91bGQgaGF2ZSBhIGNvbnRyb2xsZXIuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgJiYgdmlzaWJpbGl0eSkge1xuICAgICAgICAgICAgcmVuZGVyZXIuaGlkZUxheWVyKGxheWVyLm5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2aXNpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZW5kZXJlci5zaG93TGF5ZXIobGF5ZXIubmFtZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodmlzaWJpbGl0eSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJlbmRlcmVyLmhpZGVMYXllcihsYXllci5uYW1lKTsgICAgICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW5kZXJlci50b2dnbGVMYXllcihsYXllci5uYW1lKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh2aXNpYmlsaXR5ICE9PSBudWxsICYmICEgY29uc3VtZUNoYW5nZSkge1xuICAgICAgICBiZWFuLmZpcmUoZ3JvdXAsJ3Zpc2liaWxpdHlDaGFuZ2UnLFtyZW5kZXJlcix2aXNpYmlsaXR5XSk7XG4gICAgfVxufTtcblxuLyoqXG4gKiBIaWRlIGEgZ3JvdXAuIEZpcmVzIGFuIGV2ZW50IHdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGdycCBHcm91cCB0byBzZXQgdGhlIHZpc2liaWxpdHkgZm9yXG4gKiBAc2VlIE1BU0NQLkdyb3VwI2V2ZW50OnZpc2liaWxpdHlDaGFuZ2VcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuaGlkZUdyb3VwID0gZnVuY3Rpb24oZ3JvdXAsY29uc3VtZUNoYW5nZSkge1xuICAgIHRoaXMuc2V0R3JvdXBWaXNpYmlsaXR5KGdyb3VwLGZhbHNlLGNvbnN1bWVDaGFuZ2UpO1xufTtcblxuLyoqXG4gKiBTaG93IGEgZ3JvdXAuIEZpcmVzIGFuIGV2ZW50IHdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLlxuICogQHBhcmFtIHtPYmplY3R9IGdycCBHcm91cCB0byBzZXQgdGhlIHZpc2liaWxpdHkgZm9yXG4gKiBAc2VlIE1BU0NQLkdyb3VwI2V2ZW50OnZpc2liaWxpdHlDaGFuZ2VcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuc2hvd0dyb3VwID0gZnVuY3Rpb24oZ3JvdXAsY29uc3VtZUNoYW5nZSkge1xuICAgIHRoaXMuc2V0R3JvdXBWaXNpYmlsaXR5KGdyb3VwLHRydWUsY29uc3VtZUNoYW5nZSk7XG59O1xuXG4vKipcbiAqIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBmb3IgYSBncm91cC4gRmlyZXMgYW4gZXZlbnQgd2hlbiB0aGlzIG1ldGhvZCBpcyBjYWxsZWQuXG4gKiBAcGFyYW0ge09iamVjdH0gZ3JwIEdyb3VwIHRvIHNldCB0aGUgdmlzaWJpbGl0eSBmb3JcbiAqIEBzZWUgTUFTQ1AuR3JvdXAjZXZlbnQ6dmlzaWJpbGl0eUNoYW5nZVxuICovXG5TZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS50b2dnbGVHcm91cCA9IGZ1bmN0aW9uKGdyb3VwLGNvbnN1bWVDaGFuZ2UpIHtcbiAgICB0aGlzLnNldEdyb3VwVmlzaWJpbGl0eShncm91cCxjb25zdW1lQ2hhbmdlKTtcbn07XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIGxheWVyIGlzIGFjdGl2ZVxuICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSBsYXllciBMYXllciBuYW1lLCBvciBsYXllciBvYmplY3RcbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhpcyBsYXllciBpcyBhY3RpdmUgb24gdGhpcyByZW5kZXJlclxuICogQHR5cGUgQm9vbGVhblxuICovXG5TZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS5pc0xheWVyQWN0aXZlID0gZnVuY3Rpb24obGF5ZXIpIHtcbiAgICB2YXIgbGF5ZXJOYW1lID0gbGF5ZXI7XG4gICAgaWYgKHR5cGVvZiBsYXllciAhPSAnc3RyaW5nJykge1xuICAgICAgICBsYXllck5hbWUgPSBsYXllci5uYW1lO1xuICAgIH1cbiAgICByZXR1cm4gKCEgbGF5ZXIuZGlzYWJsZWQpICYmIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMobGF5ZXJOYW1lKydfYWN0aXZlJyk7XG59O1xuXG4vKipcbiAqIERlcHJlY2F0ZWQgdW50aWwgdGhlcmUncyBhIGJldHRlciBpbXBsZW1lbnRhdGlvbiBmb3IgdGhlIENvbmRlbnNlZFNlcXVlbmNlUmVuZGVyZXJcbiAqIEBwcml2YXRlXG4gKi9cblxuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuX3NldEhpZ2hsaWdodCA9IGZ1bmN0aW9uKGxheWVyLGlzSGlnaGxpZ2h0ZWQpIHtcbiAgICByZXR1cm47XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIGxheWVyIGNvbnRyb2xsZXIgZm9yIHRoaXMgc2VxdWVuY2UgcmVuZGVyZXIuIEF0dGFjaCB0aGUgY29udHJvbGxlciB0byB0aGUgY29udGFpbmluZyBib3gsIGFuZCBzaGlmdCB0aGUgYm94IGFjcm9zcyAyMHB4LlxuICovXG5TZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVMYXllckNvbnRyb2xsZXIgPSBmdW5jdGlvbigpIHtcbiAgICBjb25zb2xlLmxvZyhcImNyZWF0ZUxheWVyQ29udHJvbGxlciBpcyBkZXByZWN0ZWRcIik7XG4gICAgcmV0dXJuO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgYSBjaGVja2JveCB0aGF0IGlzIHVzZWQgdG8gY29udHJvbCB0aGUgZ2l2ZW4gbGF5ZXJcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gbGF5ZXIgTGF5ZXIgbmFtZSBvciBsYXllciBvYmplY3QgdGhhdCBhIGNvbnRyb2xsZXIgc2hvdWxkIGJlIGdlbmVyYXRlZCBmb3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dEVsZW1lbnQgT3B0aW9uYWwgaW5wdXQgZWxlbWVudCB0byBiaW5kIGV2ZW50cyB0by4gSWYgbm8gZWxlbWVudCBpcyBnaXZlbiwgYSBuZXcgb25lIGlzIGNyZWF0ZWQuXG4gKiBAcmV0dXJucyBDaGVja2JveCBlbGVtZW50IHRoYXQgd2hlbiBjaGVja2VkIHdpbGwgdG9nZ2xlIG9uIHRoZSBsYXllciwgYW5kIHRvZ2dsZSBpdCBvZmYgd2hlbiB1bmNoZWNrZWRcbiAqIEB0eXBlIE9iamVjdFxuICovXG5TZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVMYXllckNoZWNrYm94ID0gZnVuY3Rpb24obGF5ZXIsaW5wdXRFbGVtZW50LGV4Y2x1c2l2ZSkge1xuICAgIGNvbnNvbGUubG9nKFwiY3JlYXRlTGF5ZXJDaGVja2JveCBpcyBkZXByZWNhdGVkXCIpO1xuICAgIHJldHVybjtcbn07XG5cbi8qKlxuICogUmV0cmlldmUgYSBsYXllciBvYmplY3QgZnJvbSB0aGUgbGF5ZXIgcmVnaXN0cnkuIElmIGEgbGF5ZXIgb2JqZWN0IGlzIHBhc3NlZCB0byB0aGlzIG1ldGhvZCwgdGhlIHNhbWUgbGF5ZXIgaXMgcmV0dXJuZWQuXG4gKiBAcGFyYW0ge1N0cmluZ30gbGF5ZXIgICAgTGF5ZXIgbmFtZVxuICogQHJldHVybnMgTGF5ZXIgb2JqZWN0XG4gKiBAdHlwZSBPYmplY3RcbiAqIEBzZWUgTUFTQ1AuTGF5ZXJcbiAqL1xuTUFTQ1AuZ2V0TGF5ZXIgPSBmdW5jdGlvbihsYXllcikge1xuICAgIGlmICggISBNQVNDUC5sYXllcnMgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuICh0eXBlb2YgbGF5ZXIgPT0gJ3N0cmluZycpID8gTUFTQ1AubGF5ZXJzW2xheWVyXSA6IGxheWVyOyAgICBcbn07XG5cbi8qKlxuICogUmV0cmlldmUgYSBncm91cCBvYmplY3QgZnJvbSB0aGUgZ3JvdXAgcmVnaXN0cnkuIElmIGEgZ3JvcCBvYmplY3QgaXMgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLCB0aGUgc2FtZSBncm91cCBpcyByZXR1cm5lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBncm91cCAgICBHcm91cCBuYW1lXG4gKiBAcmV0dXJucyBHcm91cCBvYmplY3RcbiAqIEB0eXBlIE9iamVjdFxuICogQHNlZSBNQVNDUC5Hcm91cFxuICovXG5NQVNDUC5nZXRHcm91cCA9IGZ1bmN0aW9uKGdyb3VwKSB7XG4gICAgaWYgKHR5cGVvZiBncm91cCA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICggISBNQVNDUC5ncm91cHMgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBncm91cCA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gTUFTQ1AuZ3JvdXBzW2dyb3VwXTtcbiAgICB9XG4gICAgcmV0dXJuIChncm91cCA9PSBNQVNDUC5ncm91cHNbZ3JvdXAubmFtZV0pID8gZ3JvdXAgOiBudWxsO1xufTtcblxuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUuX3JlbW92ZU90aGVyQmluZGluZ3MgPSBmdW5jdGlvbihvYmplY3QsaW5wdXRFbGVtZW50KSB7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcztcbiAgICBcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0RWxlbWVudC5fY3VycmVudF9iaW5kaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIGlucHV0RWxlbWVudC5fY3VycmVudF9iaW5kaW5nc1tpXS5yZW5kZXJlciAhPSByZW5kZXJlciApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjYiA9IGlucHV0RWxlbWVudC5fY3VycmVudF9iaW5kaW5nc1tpXTtcbiAgICAgICAgXG4gICAgICAgIGlmICggY2IubGF5ZXIgJiYgY2IubGF5ZXIgIT0gb2JqZWN0Lm5hbWUgKSB7XG4gICAgICAgICAgICBiZWFuLnJlbW92ZShNQVNDUC5nZXRMYXllcihjYi5sYXllciksJ3Zpc2liaWxpdHlDaGFuZ2UnLGNiLm9iamVjdF9mdW5jdGlvbik7XG4gICAgICAgICAgICBiZWFuLnJlbW92ZShpbnB1dEVsZW1lbnQsJ2NoYW5nZScsY2IuaW5wdXRfZnVuY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIGNiLmdyb3VwICYmIGNiLmdyb3VwICE9IG9iamVjdC5uYW1lICkge1xuICAgICAgICAgICAgYmVhbi5yZW1vdmUoTUFTQ1AuZ2V0R3JvdXAoY2IuZ3JvdXApLCd2aXNpYmlsaXR5Q2hhbmdlJyxjYi5vYmplY3RfZnVuY3Rpb24pO1xuICAgICAgICAgICAgYmVhbi5yZW1vdmUoaW5wdXRFbGVtZW50LCdjaGFuZ2UnLGNiLmlucHV0X2Z1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBjYi5ncm91cCA9IG51bGw7XG4gICAgICAgIGNiLmxheWVyID0gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIGxheWVyIGJhc2VkIGNvbnRyb2xsZXIgZm9yIGEgZ3JvdXAuIFRoaXMgbGF5ZXIgY2FuIGFjdCBhcyBhIHByb3h5IGZvciB0aGUgb3RoZXIgbGF5ZXJzXG4gKiBAcGFyYW0ge09iamVjdH0gbGF5IExheWVyIHRvIHR1cm4gaW50byBhIGdyb3VwIGNvbnRyb2xsZXJcbiAqIEBwYXJhbSB7T2JqZWN0fSBncnAgR3JvdXAgdG8gYmUgY29udHJvbGxlZCBieSB0aGlzIGxheWVyLlxuICovXG5cblNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUdyb3VwQ29udHJvbGxlciA9IGZ1bmN0aW9uKGxheSxncnApIHtcbiAgICB2YXIgbGF5ZXIgPSBNQVNDUC5nZXRMYXllcihsYXkpO1xuICAgIHZhciBncm91cCA9IE1BU0NQLmdldEdyb3VwKGdycCk7XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgYmVhbi5hZGQobGF5ZXIsJ3Zpc2liaWxpdHlDaGFuZ2UnLGZ1bmN0aW9uKHJlbmQsdmlzaWJsZSkge1xuICAgICAgICBpZiAocmVuZCA9PSBzZWxmKSB7XG4gICAgICAgICAgICBzZWxmLnNldEdyb3VwVmlzaWJpbGl0eShncm91cCwgdmlzaWJsZSk7XG4gICAgICAgICAgICBzZWxmLnJlZnJlc2goKTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0byBiZSBhZGRlZCB0byBBbWlubyBhY2lkIGVsZW1lbnRzIHRvIGZhY2lsaXRhdGUgYWRkaW5nIGVsZW1lbnRzIHRvIGxheWVyc1xuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBsYXllck5hbWUgVGhlIGxheWVyIHRoYXQgdGhpcyBhbWlubyBhY2lkIHNob3VsZCBiZSBhZGRlZCB0b1xuICogQHJldHVybnMgSXRzZWxmXG4gKiBAdHlwZSBFbGVtZW50XG4gKi9cblNlcXVlbmNlUmVuZGVyZXIuYWRkRWxlbWVudFRvTGF5ZXIgPSBmdW5jdGlvbihsYXllck5hbWUpXG57XG4gICAgdGhpcy5hZGRCb3hPdmVybGF5KGxheWVyTmFtZSwxKTtcbiAgICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gdG8gYmUgYWRkZWQgdG8gQW1pbm8gYWNpZCBlbGVtZW50cyB0byBmYWNpbGl0YXRlIGFkZGluZyBlbGVtZW50cyB0byBsYXllcnMgd2l0aCBhIGxpbmtcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gbGF5ZXJOYW1lIFRoZSBsYXllciB0aGF0IHRoaXMgYW1pbm8gYWNpZCBzaG91bGQgYmUgYWRkZWQgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVVJMIHRvIGxpbmsgdG9cbiAqIEByZXR1cm5zIEl0c2VsZlxuICogQHR5cGUgRWxlbWVudFxuICovXG5TZXF1ZW5jZVJlbmRlcmVyLmFkZEVsZW1lbnRUb0xheWVyV2l0aExpbmsgPSBmdW5jdGlvbihsYXllck5hbWUsIHVybCwgd2lkdGgpXG57XG4gICAgdGhpcy5jbGFzc0xpc3QuYWRkKGxheWVyTmFtZSk7XG4gICAgdmFyIGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBhbmNob3Iuc2V0QXR0cmlidXRlKCdocmVmJyx1cmwpO1xuICAgIGFuY2hvci5jbGFzc0xpc3QuYWRkKGxheWVyTmFtZSsnX292ZXJsYXknKTtcbiAgICBhbmNob3Iuc2V0QXR0cmlidXRlKCdzdHlsZScsJ2Rpc3BsYXk6IGJveDsgbGVmdDogMHB4OyB0b3A6IDBweDsgd2lkdGg6IDEwMCU7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgaGVpZ2h0OiAxMDAlOycpO1xuICAgIGFuY2hvci50ZXh0Q29udGVudCA9ICcmbmJzcDsnO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQoYW5jaG9yKTtcbiAgICB3aGlsZSAod2lkdGggJiYgd2lkdGggPiAwKSB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLl9zZXF1ZW5jZV9lbHNbdGhpcy5faW5kZXggKyB3aWR0aF0uYWRkVG9MYXllcldpdGhMaW5rKGxheWVyTmFtZSx1cmwpO1xuICAgICAgICB3aWR0aCAtPSAxO1xuICAgIH1cbiAgICBpZiAodGhpcy5fel9pbmRleGVzICYmIHRoaXMuX3pfaW5kZXhlc1tsYXllck5hbWVdKSB7XG4gICAgICAgIGFuY2hvci5zdHlsZS56SW5kZXggPSB0aGlzLl96X2luZGV4ZXNbbGF5ZXJOYW1lXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7ICAgIFxufTtcblxuLyoqXG4gKiBGdW5jdGlvbiB0byBiZSBhZGRlZCB0byBBbWlubyBhY2lkIGVsZW1lbnRzIHRvIGZhY2lsaXRhdGUgYWRkaW5nIGJveCBvdmVybGF5cyB0byBlbGVtZW50c1xuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBsYXllck5hbWUgVGhlIGxheWVyIHRoYXQgdGhpcyBhbWlubyBhY2lkIHNob3VsZCBiZSBhZGRlZCB0bywgYXMgd2VsbCBhcyB0aGUgZnJhY3Rpb24gb3BhY2l0eSB0byB1c2UgZm9yIHRoaXMgb3ZlcmxheVxuICogQHJldHVybnMgSXRzZWxmXG4gKiBAdHlwZSBFbGVtZW50XG4gKi9cblNlcXVlbmNlUmVuZGVyZXIuYWRkQm94T3ZlcmxheVRvRWxlbWVudCA9IGZ1bmN0aW9uKGxheWVyTmFtZSwgd2lkdGgsIGZyYWN0aW9uKVxue1xuICAgIGlmICh0eXBlb2YgZnJhY3Rpb24gPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZnJhY3Rpb24gPSAxO1xuICAgIH1cblxuICAgIHRoaXMuY2xhc3NMaXN0LmFkZChsYXllck5hbWUpO1xuICAgIHZhciBuZXdfZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBuZXdfZWwuY2xhc3NMaXN0LmFkZChsYXllck5hbWUrJ19vdmVybGF5Jyk7XG4gICAgbmV3X2VsLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCd0b3A6IDBweDsgd2lkdGg6IDEwMCU7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgaGVpZ2h0OiAxMDAlOyBvcGFjaXR5OicrZnJhY3Rpb24rJzsnKTtcbiAgICB0aGlzLmFwcGVuZENoaWxkKG5ld19lbCk7XG4gICAgd2hpbGUgKHdpZHRoICYmIHdpZHRoID4gMSkge1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5fc2VxdWVuY2VfZWxzW3RoaXMuX2luZGV4ICsgd2lkdGggLSAxXS5hZGRCb3hPdmVybGF5KGxheWVyTmFtZSwwLGZyYWN0aW9uKTtcbiAgICAgICAgd2lkdGggLT0gMTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3pfaW5kZXhlcyAmJiB0aGlzLl96X2luZGV4ZXNbbGF5ZXJOYW1lXSkge1xuICAgICAgICBuZXdfZWwuc3R5bGUuekluZGV4ID0gdGhpcy5fel9pbmRleGVzW2xheWVyTmFtZV07XG4gICAgfVxuICAgIHZhciBldmVudF9uYW1lcyA9IFsnbW91c2VvdmVyJywnbW91c2Vkb3duJywnbW91c2Vtb3ZlJywnbW91c2VvdXQnLCdjbGljaycsJ2RibGNsaWNrJywnbW91c2V1cCcsJ21vdXNlZW50ZXInLCdtb3VzZWxlYXZlJ107XG4gICAgZm9yICh2YXIgaSA9IDAgOyBpIDwgZXZlbnRfbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYmVhbi5hZGQobmV3X2VsLGV2ZW50X25hbWVzW2ldLGZ1bmN0aW9uKCkgeyByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgYmVhbi5maXJlKE1BU0NQLmdldExheWVyKGxheWVyTmFtZSksZS50eXBlLFtlLCdTZXF1ZW5jZVJlbmRlcmVyJ10pO1xuICAgICAgICB9O30oaSkpO1xuICAgIH0gICAgXG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5cbi8qKlxuICogUmVzZXQgdGhpcyByZW5kZXJlci4gSGlkZSBhbGwgZ3JvdXBzIGFuZCBsYXllcnMsIGRpc2FibGluZyB0aGVtIGluIHRoZSByZWdpc3RyeS5cbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpXG57XG4gICAgd2hpbGUodGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuaXRlbSgwKSk7XG4gICAgfVxuICAgIGZvciAoIHZhciBncm91cCBpbiBNQVNDUC5ncm91cHMpIHtcbiAgICAgICAgaWYgKE1BU0NQLmdyb3Vwcy5oYXNPd25Qcm9wZXJ0eShncm91cCkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZUdyb3VwKGdyb3VwKTtcbiAgICAgICAgfVxuICAgIH0gICAgXG4gICAgZm9yICggdmFyIGxheWVyIGluIE1BU0NQLmxheWVycykge1xuICAgICAgICBpZiAoTUFTQ1AubGF5ZXJzLmhhc093blByb3BlcnR5KGxheWVyKSkge1xuICAgICAgICAgICAgdGhpcy5oaWRlTGF5ZXIobGF5ZXIsdHJ1ZSk7XG4gICAgICAgICAgICBNQVNDUC5sYXllcnNbbGF5ZXJdLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWxldGUgdGhpcy5fc2NhbGVycztcbiAgICBkZWxldGUgdGhpcy5mb3JjZVRyYWNrQWNjcztcblxuICAgIGlmICh0aGlzLnJlc2V0QW5ub3RhdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yZXNldEFubm90YXRpb25zKCk7XG4gICAgfVxuICAgIFxufTtcblxuLyoqXG4gKiBFeGVjdXRlIHRoZSBnaXZlbiBibG9jayBvZiBjb2RlIChpbiB0aGUgcmVuZGVyZXIgY29udGV4dCkgbW92aW5nIHRoZSByZWZyZXNoIG1ldGhvZCBhd2F5IHNvIHRoYXQgaXQgaXMgbm90IGNhbGxlZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBGdW5jdGlvbiB0aGF0IGNvbnRhaW5zIG9wZXJhdGlvbnMgdG8gcnVuIHdpdGhvdXQgcmVmcmVzaGluZyB0aGUgcmVuZGVyZXJcbiAqL1xuU2VxdWVuY2VSZW5kZXJlci5wcm90b3R5cGUud2l0aG91dFJlZnJlc2ggPSBmdW5jdGlvbihmdW5jKVxue1xuICAgIHZhciBjdXJyX3JlZnJlc2ggPSB0aGlzLnJlZnJlc2g7XG4gICAgdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24oKSB7fTtcbiAgICB0aGlzLnJlZnJlc2guc3VzcGVuZGVkID0gdHJ1ZTtcbiAgICBmdW5jLmFwcGx5KHRoaXMpO1xuICAgIHRoaXMucmVmcmVzaCA9IGN1cnJfcmVmcmVzaDtcbn07XG5cbi8qKlxuICogUmVmcmVzaCB0aGUgZGlzcGxheSBmb3IgdGhpcyBzZXF1ZW5jZSByZW5kZXJlclxuICovXG5TZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKVxue1xuICAgIHZhciB6X2luZGV4ID0gLTI7XG4gICAgaWYgKCAhIHRoaXMuX3pfaW5kZXhlcykge1xuICAgICAgICB0aGlzLl96X2luZGV4ZXMgPSB7fTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAodGhpcy50cmFja09yZGVyIHx8IFtdKS5sZW5ndGg7IGkrKyApIHtcbiAgICAgICAgaWYgKCEgdGhpcy5pc0xheWVyQWN0aXZlKHRoaXMudHJhY2tPcmRlcltpXSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy4nK3RoaXMudHJhY2tPcmRlcltpXSsnX292ZXJsYXknKSkuZm9yRWFjaChmdW5jdGlvbihlbCkge1xuICAgICAgICAgICAgZWwuc3R5bGUuekluZGV4ID0gel9pbmRleDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3pfaW5kZXhlc1t0aGlzLnRyYWNrT3JkZXJbaV1dID0gel9pbmRleDtcbiAgICAgICAgel9pbmRleCAtPSAxO1xuICAgIH1cbn07XG5cbi8qKlxuICogQmluZCBhIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gYSBwYXJ0aWN1bGFyIGV2ZW50IGZvciB0aGlzIG9iamVjdFxuICogQHBhcmFtIHtTdHJpbmd9IGV2IEV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgRnVuY3Rpb24gdG8gZXhlY3V0ZVxuICovXG5cblNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbihldixmdW5jKVxue1xuICAgIGJlYW4uYWRkKHRoaXMsZXYsZnVuYyk7XG59O1xuXG5TZXF1ZW5jZVJlbmRlcmVyLnByb3RvdHlwZS51bmJpbmQgPSBmdW5jdGlvbihldixmdW5jKVxue1xuICAgIGJlYW4ucmVtb3ZlKHRoaXMsZXYsZnVuYyk7XG59O1xuXG5cblNlcXVlbmNlUmVuZGVyZXIucHJvdG90eXBlLnRyaWdnZXIgPSBmdW5jdGlvbihldixhcmdzKVxue1xuICAgIGJlYW4uZmlyZSh0aGlzLGV2LGFyZ3MpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU2VxdWVuY2VSZW5kZXJlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7Ozs7QUFVQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FBVUE7Ozs7Ozs7Ozs7QUFVQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUFRQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQWpEQTtBQUNBO0FBbURBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBUUE7Ozs7Ozs7O0FBUUE7Ozs7Ozs7QUFPQTs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7QUFRQTs7Ozs7Ozs7QUFVQTs7OztBQUlBO0FBQ0E7QUFEQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7QUFLQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTs7Ozs7O0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7O0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FBUUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Ozs7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/lib/SequenceRenderer.js\n");

/***/ }),

/***/ "./js/lib/UniprotReader.js":
/*!*********************************!*\
  !*** ./js/lib/UniprotReader.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MascpService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _UserdataReader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UserdataReader */ \"./js/lib/UserdataReader.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/**\n * @fileOverview    Classes for reading data from Uniprot database\n */\n\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve data from Uniprot for a given AGI.\n *  @param      {String} agi            Agi to look up\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst UniprotReader = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buildService(function (data) {\n    if (data && typeof data === 'string') {\n        var dats = UniprotReader.parseFasta(data);\n        var key;\n        for (key in dats) {\n            if (dats.hasOwnProperty(key)) {\n                data = { 'data': dats[key] };\n                this._raw_data = data;\n            }\n        }\n    }\n    this._data = data || {};\n    if (!this._data.data) {\n        this._data = { 'data': ['', ''] };\n    }\n    return this;\n});\n\nUniprotReader.SERVICE_URL = null;\n\nUniprotReader.prototype.requestData = function () {\n    var self = this;\n    if (!UniprotReader.SERVICE_URL) {\n        throw new Error('No service URL for UniprotReader');\n    }\n    return {\n        type: \"GET\",\n        dataType: \"json\",\n        'auth': _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_AUTH_TOKEN,\n        'api_key': _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].GATOR_CLIENT_ID,\n        'url': UniprotReader.SERVICE_URL + '/' + this.agi.toUpperCase()\n    };\n};\n\nUniprotReader.Result.prototype.getDescription = function () {\n    return this._data.data[1];\n};\n\nUniprotReader.Result.prototype.getSequence = function () {\n    return this._data.data[0];\n};\n\nUniprotReader.parseFasta = function (datablock) {\n    var chunks = datablock.split('>');\n    var datas = {};\n    chunks.forEach(function (entry) {\n        var lines = entry.split(/\\n/);\n        if (lines.length <= 1) {\n            return;\n        }\n        var header = lines.shift();\n        var seq = lines.join(\"\");\n        var header_data = header.split('|');\n        var acc = header_data[1];\n        var desc = header_data[2];\n        datas[acc] = [seq, desc];\n    });\n    return datas;\n};\n\nUniprotReader.readFastaFile = function (datablock, callback) {\n\n    var datas = UniprotReader.parseFasta(datablock);\n\n    var writer = new _UserdataReader__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    writer.toString = function () {\n        return \"UniprotReader\";\n    };\n    writer.map = function (dat) {\n        return dat.data;\n    };\n    writer.datasetname = \"UniprotReader\";\n    callback(writer);\n    setTimeout(function () {\n        writer.avoid_database = true;\n        writer.setData(\"UniprotReader\", { \"data\": datas });\n    }, 0);\n    return writer;\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (UniprotReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9saWIvVW5pcHJvdFJlYWRlci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9qcy9saWIvVW5pcHJvdFJlYWRlci5qcz9hMjFkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVPdmVydmlldyAgICBDbGFzc2VzIGZvciByZWFkaW5nIGRhdGEgZnJvbSBVbmlwcm90IGRhdGFiYXNlXG4gKi9cblxuaW1wb3J0IE1BU0NQIGZyb20gJy4vTWFzY3BTZXJ2aWNlJztcbmltcG9ydCBVc2VyZGF0YVJlYWRlciBmcm9tICcuL1VzZXJkYXRhUmVhZGVyJztcbmltcG9ydCBiZWFuIGZyb20gJy4uL2JlYW4nO1xuXG5cbi8qKiBEZWZhdWx0IGNsYXNzIGNvbnN0cnVjdG9yXG4gKiAgQGNsYXNzICAgICAgU2VydmljZSBjbGFzcyB0aGF0IHdpbGwgcmV0cmlldmUgZGF0YSBmcm9tIFVuaXByb3QgZm9yIGEgZ2l2ZW4gQUdJLlxuICogIEBwYXJhbSAgICAgIHtTdHJpbmd9IGFnaSAgICAgICAgICAgIEFnaSB0byBsb29rIHVwXG4gKiAgQHBhcmFtICAgICAge1N0cmluZ30gZW5kcG9pbnRVUkwgICAgRW5kcG9pbnQgVVJMIGZvciB0aGlzIHNlcnZpY2VcbiAqICBAZXh0ZW5kcyAgICBNQVNDUC5TZXJ2aWNlXG4gKi9cbmNvbnN0IFVuaXByb3RSZWFkZXIgPSBNQVNDUC5idWlsZFNlcnZpY2UoZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkYXRhICYmIHR5cGVvZihkYXRhKSA9PT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdHMgPSBVbmlwcm90UmVhZGVyLnBhcnNlRmFzdGEoZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBkYXRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7ICdkYXRhJyA6IGRhdHNba2V5XSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmF3X2RhdGEgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICEgdGhpcy5fZGF0YS5kYXRhICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB7ICdkYXRhJyA6IFsnJywnJ10gfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuVW5pcHJvdFJlYWRlci5TRVJWSUNFX1VSTCA9IG51bGw7XG5cblVuaXByb3RSZWFkZXIucHJvdG90eXBlLnJlcXVlc3REYXRhID0gZnVuY3Rpb24oKVxue1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBpZiAoICEgVW5pcHJvdFJlYWRlci5TRVJWSUNFX1VSTCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNlcnZpY2UgVVJMIGZvciBVbmlwcm90UmVhZGVyJyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiR0VUXCIsXG4gICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgJ2F1dGgnIDogTUFTQ1AuR0FUT1JfQVVUSF9UT0tFTixcbiAgICAgICAgJ2FwaV9rZXknIDogTUFTQ1AuR0FUT1JfQ0xJRU5UX0lELFxuICAgICAgICAndXJsJyAgIDogVW5pcHJvdFJlYWRlci5TRVJWSUNFX1VSTCsnLycrKHRoaXMuYWdpKS50b1VwcGVyQ2FzZSgpXG4gICAgfTtcbn07XG5cblVuaXByb3RSZWFkZXIuUmVzdWx0LnByb3RvdHlwZS5nZXREZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9kYXRhLmRhdGFbMV07XG59O1xuXG5Vbmlwcm90UmVhZGVyLlJlc3VsdC5wcm90b3R5cGUuZ2V0U2VxdWVuY2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0YS5kYXRhWzBdO1xufTtcblxuVW5pcHJvdFJlYWRlci5wYXJzZUZhc3RhID0gZnVuY3Rpb24oZGF0YWJsb2NrKSB7XG4gICAgdmFyIGNodW5rcyA9IChkYXRhYmxvY2suc3BsaXQoJz4nKSk7XG4gICAgdmFyIGRhdGFzID0ge307XG4gICAgY2h1bmtzLmZvckVhY2goZnVuY3Rpb24oZW50cnkpIHtcbiAgICAgICAgdmFyIGxpbmVzID0gZW50cnkuc3BsaXQoL1xcbi8pO1xuICAgICAgICBpZiAobGluZXMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGVhZGVyID0gbGluZXMuc2hpZnQoKTtcbiAgICAgICAgdmFyIHNlcSA9IGxpbmVzLmpvaW4oXCJcIik7XG4gICAgICAgIHZhciBoZWFkZXJfZGF0YSA9IGhlYWRlci5zcGxpdCgnfCcpO1xuICAgICAgICB2YXIgYWNjID0gaGVhZGVyX2RhdGFbMV07XG4gICAgICAgIHZhciBkZXNjID0gaGVhZGVyX2RhdGFbMl07XG4gICAgICAgIGRhdGFzW2FjY10gPSBbc2VxLGRlc2NdO1xuICAgIH0pO1xuICAgIHJldHVybiBkYXRhcztcbn1cblxuVW5pcHJvdFJlYWRlci5yZWFkRmFzdGFGaWxlID0gZnVuY3Rpb24oZGF0YWJsb2NrLGNhbGxiYWNrKSB7XG5cbiAgICB2YXIgZGF0YXMgPSBVbmlwcm90UmVhZGVyLnBhcnNlRmFzdGEoZGF0YWJsb2NrKTtcblxuICAgIHZhciB3cml0ZXIgPSBuZXcgVXNlcmRhdGFSZWFkZXIoKTtcbiAgICB3cml0ZXIudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFwiVW5pcHJvdFJlYWRlclwiO1xuICAgIH07XG4gICAgd3JpdGVyLm1hcCA9IGZ1bmN0aW9uKGRhdCkge1xuICAgICAgICByZXR1cm4gZGF0LmRhdGE7XG4gICAgfTtcbiAgICB3cml0ZXIuZGF0YXNldG5hbWUgPSBcIlVuaXByb3RSZWFkZXJcIjtcbiAgICBjYWxsYmFjayh3cml0ZXIpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHdyaXRlci5hdm9pZF9kYXRhYmFzZSA9IHRydWU7XG4gICAgICAgIHdyaXRlci5zZXREYXRhKFwiVW5pcHJvdFJlYWRlclwiLHtcImRhdGFcIiA6IGRhdGFzfSk7XG4gICAgfSwwKTtcbiAgICByZXR1cm4gd3JpdGVyO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgVW5pcHJvdFJlYWRlcjtcblxuXG5cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7OztBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/lib/UniprotReader.js\n");

/***/ }),

/***/ "./js/lib/UserdataReader.js":
/*!**********************************!*\
  !*** ./js/lib/UserdataReader.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _MascpService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MascpService */ \"./js/lib/MascpService.js\");\n/* harmony import */ var _bean__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../bean */ \"./js/bean.js\");\n/**\n * @fileOverview    Classes for getting arbitrary user data onto the GATOR\n */\n\n\n\n\n/** Default class constructor\n *  @class      Service class that will retrieve sequence data for a given AGI from a given ecotype\n *  @param      {String} agi            Agi to look up\n *  @param      {String} endpointURL    Endpoint URL for this service\n *  @extends    MASCP.Service\n */\nconst UserdataReader = _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].buildService(function (data) {\n    if (!data) {\n        return this;\n    }\n    this._raw_data = data;\n    return this;\n});\n\nUserdataReader.prototype.toString = function () {\n    return 'UserdataReader.' + this.datasetname;\n};\n\nUserdataReader.prototype.requestData = function () {\n    var agi = this.agi.toUpperCase();\n    return {\n        type: \"GET\",\n        dataType: \"json\",\n        data: { 'agi': agi,\n            'service': this.datasetname\n        }\n    };\n};\n\nUserdataReader.prototype.setupSequenceRenderer = function (renderer) {\n    // We don't have any default rendering for the UserDataReader\n    // since it's all going to be custom stuff anyway\n};\n\nvar apply_map = function apply_map(data_block) {\n    var map = this.map;\n    var databits = data_block.data;\n    var headers = databits.shift();\n    var dataset = {};\n    var id_col = headers.indexOf(map.id);\n    var cols_to_add = [];\n    for (var col in map) {\n        if (col == \"id\") {\n            continue;\n        }\n        if (map.hasOwnProperty(col)) {\n            cols_to_add.push({ \"name\": col, \"index\": headers.indexOf(map[col]) });\n        }\n    }\n    while (databits.length > 0) {\n        var row = databits.shift();\n        var id = row[id_col].toLowerCase();\n        if (!dataset[id]) {\n            dataset[id] = { \"data\": {} };\n        }\n        var obj = dataset[id];\n        var i;\n        for (i = cols_to_add.length - 1; i >= 0; i--) {\n            if (!obj.data[cols_to_add[i].name]) {\n                obj.data[cols_to_add[i].name] = [];\n            }\n            obj.data[cols_to_add[i].name] = obj.data[cols_to_add[i].name].concat((row[cols_to_add[i].index] || '').split(','));\n        }\n        obj.retrieved = data_block.retrieved;\n        obj.title = data_block.title;\n        if (data_block.etag) {\n            obj.etag = data_block.etag;\n        }\n    }\n    return dataset;\n};\n\nUserdataReader.prototype.setData = function (name, data) {\n\n    if (!data) {\n        return;\n    }\n\n    var self = this;\n\n    // Call CacheService on this object/class\n    // just to make sure that it has access\n    // to the cache retrieval mechanisms\n\n    _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Service.CacheService(this);\n\n    this.datasetname = name;\n\n    if (!data.retrieved) {\n        data.retrieved = new Date();\n    }\n    if (!data.title) {\n        data.title = name;\n    }\n\n    self.title = data.title;\n\n    var dataset = {}; // Format is { \"accession\" : { \"data\" : {}, \"retrieved\" : \"\" , \"title\" : \"\"  } };\n\n    if (typeof this.map == 'object') {\n        dataset = apply_map.call(this, data);\n    }\n    if (typeof this.map == 'function') {\n\n        if (this.map.callback) {\n            var self_func = arguments.callee;\n            this.map(data, function (parsed) {\n                self.map = function (d) {\n                    return d;\n                };\n                self_func.call(self, name, parsed);\n            });\n            return;\n        }\n        dataset = this.map(data);\n    }\n\n    if (!this.map) {\n        return;\n    }\n    this.data = dataset;\n\n    var inserter = new UserdataReader();\n\n    inserter.toString = function () {\n        return self.toString();\n    };\n\n    inserter.data = dataset;\n\n    inserter.retrieve = function (an_acc, cback) {\n        this.agi = an_acc;\n        // this._dataReceived(dataset[this.agi]);\n        cback.call(this);\n    };\n\n    _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Service.CacheService(inserter);\n\n    var accs = [];\n    var acc;\n    for (acc in dataset) {\n        if (dataset.hasOwnProperty(acc)) {\n            if (acc.match(/[A-Z]/)) {\n                dataset[acc.toLowerCase()] = dataset[acc];\n                delete dataset[acc];\n                acc = acc.toLowerCase();\n            }\n            accs.push(acc);\n        }\n    }\n    var total = accs.length;\n\n    var retrieve = this.retrieve;\n\n    this.retrieve = function (id, cback) {\n        console.log(\"Data not ready! Waiting for ready state\");\n        var self = this;\n        _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].add(self, 'ready', function () {\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].remove(self, 'ready', arguments.callee);\n            self.retrieve(id, cback);\n        });\n    };\n    if (accs.length < 1) {\n        setTimeout(function () {\n            self.retrieve = retrieve;\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'ready', [data]);\n        }, 0);\n        return;\n    }\n    _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Service.BulkOperation(function (err) {\n        if (err) {\n            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'error', [err]);\n            return;\n        }\n        var trans = this.transaction;\n        inserter.avoid_database = true;\n        inserter.retrieve(accs[0], function () {\n            while (accs.length > 0) {\n                var acc = accs.shift();\n                _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'progress', [100 * ((total - accs.length) / total), total - accs.length, total]);\n                inserter.agi = acc;\n                inserter._dataReceived(dataset[acc]);\n                if (accs.length === 0) {\n                    self.retrieve = retrieve;\n                    trans(function (err) {\n                        if (!err) {\n                            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'ready', [data]);\n                        } else {\n                            _bean__WEBPACK_IMPORTED_MODULE_1__[\"default\"].fire(self, 'error');\n                        }\n                    });\n                    return;\n                }\n            }\n        });\n    });\n};\n\nUserdataReader.datasets = function (cback, done) {\n    _MascpService__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Service.FindCachedService(this, function (services) {\n        var result = [];\n        for (var i = 0, len = services.length; i < len; i++) {\n            result.push(services[i].replace(/UserdataReader./, ''));\n        }\n        if (result.forEach) {\n            result.forEach(cback);\n        }\n        if (done) {\n            done();\n        }\n    });\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (UserdataReader);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/lib/UserdataReader.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n\n/* WEBPACK VAR INJECTION */}.call(this, {}))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2FtZC1vcHRpb25zLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2FtZC1vcHRpb25zLmpzPzAwODYiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX3dlYnBhY2tfYW1kX29wdGlvbnNfXyAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19hbWRfb3B0aW9uc19fO1xyXG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/amd-options.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function get() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL25vZGVfbW9kdWxlcy93ZWJwYWNrL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanM/MTZhMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/harmony-module.js\n");

/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./js/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./js/index.js */"./js/index.js");


/***/ })

/******/ });