var MASCP=MASCP||{};if(MASCP.Service=function(a,b){},"undefined"!=typeof module&&module.exports){var events=require("events");MASCP.Service.prototype=new events.EventEmitter;var singletonService=new MASCP.Service;MASCP.Service.emit=function(a,b){singletonService.emit(a,b)},MASCP.Service.removeAllListeners=function(a,b){b?singletonService.removeListeners(a,b):singletonService.removeAllListeners(a)},MASCP.Service.addListener=function(a,b){singletonService.addListener(a,b)};var bean={add:function(a,b,c){"error"==b&&(b="MASCP.error"),a.addListener&&a.addListener(b,c)},remove:function(a,b,c){"error"==b&&(b="MASCP.error"),c&&a.removeListener?a.removeListener(b,c):a.removeAllListeners&&"undefined"==typeof c&&a.removeAllListeners(b)},fire:function(a,b,c){"error"==b&&(b="MASCP.error"),a.emit&&a.emit.apply(a,[b].concat(c))}};MASCP.events=new events.EventEmitter,module.exports=MASCP;var parser=require("jsdom").jsdom,XMLHttpRequest=require("xmlhttprequest").XMLHttpRequest;XMLHttpRequest.prototype.__defineGetter__("responseXML",function(){return parser((this.responseText||"").replace(/&/g,"&amp;"))}),XMLHttpRequest.prototype.__defineSetter__("responseXML",function(){}),XMLHttpRequest.prototype.customUA="MASCP Gator crawler (+http://gator.masc-proteomics.org/)"}else{window.MASCP=MASCP;var ie=function(){var a,b=3,c=document.createElement("div"),d=c.getElementsByTagName("i");do c.innerHTML="<!--[if gt IE "+ ++b+"]><i></i><![endif]-->";while(d[0]);return b>4?b:a}();ie&&(7===ie&&(MASCP.IE=!0,MASCP.IE7=!0),8===ie&&(MASCP.IE=!0,MASCP.IE8=!0),MASCP.IE=!0)}if(MASCP.buildService=function(a){var b=function(a,c){return"undefined"!=typeof c?this._endpointURL=c:this._endpointURL=b.SERVICE_URL,this.agi=a,this};return b.Result=function(b){return a.apply(this,[b]),this},b.prototype=MASCP.extend(new MASCP.Service,{__class__:b,__result_class:b.Result,_endpointURL:null}),b.Result.prototype=MASCP.extend(new MASCP.Service.Result,{__class__:b.Result}),b.Result.prototype=MASCP.extend(b.Result.prototype,a.apply({},[])),b.toString=function(){for(var a in MASCP)if(this===MASCP[a])return"MASCP."+a},b},MASCP.cloneService=function(a,b){var c=MASCP.buildService(function(){return this});return c.Result=a.Result,c.prototype=new a,MASCP[b]=c,c.prototype.__class__=c,c},MASCP.extend=function(a,b){for(var c in b)a[c]=b[c];return a},MASCP.extend(MASCP.Service.prototype,{agi:null,result:null,__result_class:null,async:!0}),MASCP.Service.prototype._dataReceived=function(a,b){if(!a)return!1;var c=this.__result_class;if(a&&a.error&&""!=a.error&&null!==a.error)return bean.fire(this,"error",[a.error]),!1;if("[object Array]"===Object.prototype.toString.call(a)){for(var d=0;d<a.length;d++)arguments.callee.call(this,a[d],b);0===d&&(this.result=new c),this.result._raw_data={data:a}}else if(this.result){try{c.call(this.result,a)}catch(e){return bean.fire(this,"error",[e]),!1}this.result._raw_data||(this.result._raw_data=a)}else{var f;try{f=new c(a)}catch(g){return bean.fire(this,"error",[g]),!1}f._raw_data||(f._raw_data=a),this.result=f}return a&&a.retrieved&&(this.result.retrieved=a.retrieved,this.result._raw_data.retrieved=a.retrieved),this.result.agi=this.agi,!0},MASCP.Service.prototype.gotResult=function(){var a=this,b=function(b){b.readers||(b.readers=[]),b.readers.push(a.toString())};bean.add(MASCP,"layerRegistered",b),bean.add(MASCP,"groupRegistered",b),bean.fire(a,"resultReceived");try{bean.remove(MASCP,"layerRegistered",b),bean.remove(MASCP,"groupRegistered",b)}catch(c){}bean.fire(MASCP.Service,"resultReceived")},MASCP.Service.prototype.requestComplete=function(){bean.fire(this,"requestComplete"),bean.fire(MASCP.Service,"requestComplete",[this])},MASCP.Service.registeredLayers=function(a){var b=[];for(var c in MASCP.layers)if(MASCP.layers.hasOwnProperty(c)){var d=MASCP.layers[c];d.readers&&d.readers.indexOf(a.toString())>=0&&b.push(d)}return b},MASCP.Service.registeredGroups=function(a){var b=[];for(var c in MASCP.groups)if(MASCP.groups.hasOwnProperty(c)){var d=MASCP.groups[c];d.readers&&d.readers.indexOf(a.toString())>=0&&b.push(d)}return b},MASCP.Service.prototype.bind=function(a,b){return bean.add(this,a,b),this},MASCP.Service.prototype.unbind=function(a,b){return bean.remove(this,a,b),this},function(a){var b=function(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c+"="+a[c]);return b.join("&")},c=function(a){var c=null;if(!a.url)return void a.success.call(null,null);var d=new XMLHttpRequest;if("GET"==a.type&&a.data){var e=a.url.indexOf("?");e==a.url.length-1&&(a.url=a.url.slice(0,-1),e=-1);var f=e>=0?"&":"?";a.url=a.url.replace(/\?$/,"")+f+b(a.data)}d.open(a.type,a.url,a.async),"POST"==a.type&&(d.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),c=b(a.data)),d.customUA&&d.setRequestHeader("User-Agent",d.customUA),d.onreadystatechange=function(b){if(4==d.readyState)if(200==d.status){var c;c="xml"==a.dataType?"undefined"!=typeof document?document.implementation.createDocument(null,"nodata",null):{getElementsByTagName:function(){return[]}}:{};try{d.responseText;c="xml"==a.dataType?d.responseXML||MASCP.importNode(d.responseText):JSON.parse(d.responseText)}catch(e){return"unexpected_eos"==e.type?void a.success.call(null,{},d.status,d):void a.error.call(null,{error:e.type||e.message,stack:e})}a.success.call(null,c,d.status,d),c=null}else a.error.call(null,d.responseText,d,d.status)},d.send(c)},d=function(a){var c=new XDomainRequest,d=!1,e=0;for(c.onerror=a.error,c.onprogress=function(){},c.open("GET",a.url+"?"+b(a.data)),c.onload=function(){if(d=!0,"xml"==a.dataType){var b=new ActiveXObject("Microsoft.XMLDOM");b.async=!1,b.loadXML(c.responseText),a.success(b,"success",c)}else if("json"==a.dataType){var e=null;try{e=JSON.parse(c.responseText)}catch(f){a.error(c,c,{})}e&&a.success(e,"success",c)}else a.success(c.responseText,"success",c)},setTimeout(function(){c.send()},0);!a.async&&!d&&e<3;)alert("This browser does not support synchronous requests, click OK while we're waiting for data"),e+=1;a.async||d||alert("No data")};a.retrieve=function(a,b){var e=this;if(MASCP.Service._current_reqs=MASCP.Service._current_reqs||0,MASCP.Service._waiting_reqs=MASCP.Service._waiting_reqs||0,MASCP.Service.MAX_REQUESTS){var f=arguments.callee;if(MASCP.Service._current_reqs>MASCP.Service.MAX_REQUESTS)return MASCP.Service._waiting_reqs+=1,bean.add(MASCP.Service,"requestComplete",function(){bean.remove(this,"requestComplete",arguments.callee),setTimeout(function(){MASCP.Service._waiting_reqs-=1,f.call(e,a,b)},0)}),this}if(a&&(this.agi=a),a&&b){this.agi=a;var g=!1,h=function(a){bean.remove(e,"resultReceived",h),bean.remove(e,"error",h),bean.remove(e,"requestComplete",h),g||(a?b.call(e,a):b.call(e)),g=!0};bean.add(e,"resultReceived",h),bean.add(e,"error",h),bean.add(e,"requestComplete",h)}var i=this.requestData();if(!i)return this;var j={async:this.async,url:i.url||this._endpointURL,timeout:5e3,error:function(a,b,c){MASCP.Service._current_reqs-=1,"string"==typeof c&&(c={error:c,request:b}),bean.fire(e,"error",[c]),bean.fire(MASCP.Service,"requestComplete"),e.requestComplete()},success:function(a,b,c){return MASCP.Service._current_reqs-=1,c&&null!==c.status&&0===c.status?(bean.fire(e,"error",[{error:"Zero return status from request "}]),void e.requestComplete()):(e._dataReceived(a,b)&&e.gotResult(),void e.requestComplete())}};return MASCP.extend(j,i),MASCP.IE?d(j):c(j),MASCP.Service._current_reqs+=1,this}}(MASCP.Service.prototype),function(a){var b,c,d,e,f,g,h,i,j,k,l=0,m=0;a.BeginCaching=function(){a.CacheService(a.prototype)},a.SetMinimumAge=function(a){m=0===a?0:a.getTime()},a.SetMaximumAge=function(a){l=0===a?0:a.getTime()},a.SweepCache=function(a){a||(a=a.getTime()),h(a.getTime())},a.CacheService=function(a){if(!a.retrieve.caching){var d=a.retrieve;a.retrieve=function(a,e){var f=this,g=a?a:f.agi;return g?(g=g.toLowerCase(),f.agi=g,b(g,f.toString(),function(a,b){if(b)e&&bean.add(f,"resultReceived",function(){bean.remove(f,"resultReceived",arguments.callee),e.call(f)}),f._dataReceived(b,"db")&&f.gotResult(),f.requestComplete();else{var h=f._dataReceived;f._dataReceived=function(){return function(a){var b=h.call(this,a);return b&&this.result&&null!==this.result._raw_data&&c(g,this.toString(),this.result._raw_data||{}),this._dataReceived=null,this._dataReceived=h,a={},b}}();var i=f._endpointURL;0!==l&&(f._endpointURL=null),d.call(f,g,e),f._endpointURL=i}}),f):(d.call(f,g,e),f)},a.retrieve.caching=!0}},a.FindCachedService=function(a,b){var c=a.toString();return d(c,b),!0},a.CachedAgis=function(a,b){var c=a.toString();return i(c,b),!0},a.ClearCache=function(a,b){var c=a.toString();return e(c,b),!0},a.HistoryForService=function(a,b){var c=a.toString();g(c,null,b)},a.BulkOperation=function(){return j(),function(){k()}};var n;if("undefined"!=typeof module&&module.exports){var o=require("sqlite3");n=new o.Database("cached.db")}else if("openDatabase"in window){try{n=openDatabase("cached","","MASCP Gator cache",1048576)}catch(p){throw p}n.all=function(a,b,c){this.exec(a,b,c)},n.exec=function(a,b,c){var d=this,e=b,f=c;"undefined"==typeof f&&e&&"[object Array]"!=Object.prototype.toString.call(e)&&(f=b,e=null),d.transaction(function(b){b.executeSql(a,e,function(a,b){for(var c=[],d=0;d<b.rows.length;d++)c.push(b.rows.item(d));f&&f.call(n,null,c)},function(a,b){f&&f.call(n,b)})})}}if("undefined"!=typeof n){n.all('SELECT version from versions where tablename = "datacache"',function(a,b){var c=b?b[0].version:null;return 1.3==c?void(MASCP.events&&MASCP.events.emit("ready")):((!c||""==c||c<1)&&(n.exec("CREATE TABLE if not exists versions (version REAL, tablename TEXT);"),n.exec('CREATE TABLE if not exists "datacache" (agi TEXT,service TEXT,retrieved REAL,data TEXT);',function(a){if(a&&"Error: not an error"!=a)throw a}),n.exec('DELETE FROM versions where tablename = "datacache"'),n.exec('INSERT INTO versions(version,tablename) VALUES(1.1,"datacache");',function(a,b){}),c=1.1),c<1.2&&(n.exec("DROP TABLE if exists datacache_tmp;"),n.exec("CREATE TABLE if not exists datacache_tmp (acc TEXT,service TEXT,retrieved REAL,data TEXT);"),n.exec("INSERT INTO datacache_tmp(acc,service,retrieved,data) SELECT agi,service,retrieved,data FROM datacache;"),n.exec("DROP TABLE datacache;"),n.exec("ALTER TABLE datacache_tmp RENAME TO datacache;"),n.exec("CREATE INDEX accessions on datacache(acc);"),n.exec("CREATE INDEX accessions_service on datacache(acc,service);"),n.exec('DELETE FROM versions where tablename = "datacache"'),n.exec('INSERT INTO versions(version,tablename) VALUES(1.2,"datacache");',function(a,b){}),c=1.2),void(c<1.3&&(n.exec("CREATE INDEX if not exists services on datacache(service);"),n.exec('DELETE FROM versions where tablename = "datacache"'),n.exec('INSERT INTO versions(version,tablename) VALUES(1.3,"datacache");',function(a,b){a||MASCP.events&&MASCP.events.emit("ready")}),c=1.3)))});var q=b;j=function(){b=function(a,b,c){setTimeout(function(){c.call(null,null)},0)},n.exec("BEGIN TRANSACTION;",function(){})},k=function(){b=q,n.exec("END TRANSACTION;",function(){})},h=function(a){n.all("DELETE from datacache where retrieved <= ? ",[a],function(){})},e=function(a,b){var c=a;c+="%",b?n.all("DELETE from datacache where service like ? and acc = ?",[c,b.toLowerCase()],function(){}):n.all("DELETE from datacache where service like ? ",[c],function(){})},d=function(a,b){n.all("SELECT distinct service from datacache where service like ? ",[a+"%"],function(a,c){var d={};c&&c.length>0&&c.forEach(function(a){d[a.service]=!0});var e=[];for(var f in d)d.hasOwnProperty(f)&&e.push(f);return b.call(MASCP.Service,e),e})},i=function(a,b){n.all("SELECT distinct acc from datacache where service = ?",[a],function(a,c){for(var d=[],e=0;e<c.length;e++)d.push(c[e].acc);b.call(MASCP.Service,d)})},b=function(a,b,c){var d=l?[m,l]:[m,(new Date).getTime()];return f(a,b,d,c)};var r=function(a,b){return function(a,b){}};c=function(a,b,c){if(!("object"!=typeof c||"undefined"!=typeof Document&&c instanceof Document)){var d;try{d=JSON.stringify(c)}catch(e){return}var f=c.retrieved?c.retrieved:new Date;"string"==typeof f&&(f=new Date),f.setUTCHours(0),f.setUTCMinutes(0),f.setUTCSeconds(0),f.setUTCMilliseconds(0);var g=f.getTime();c={},n.all("INSERT INTO datacache(acc,service,retrieved,data) VALUES(?,?,?,?)",[a,b,g,d],r(a,b))}},f=function(a,b,c,d){var e="SELECT * from datacache where acc=? and service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved DESC LIMIT 1",f=[a,b,c[0],c[1]];n.all(e,f,function(a,b){if(b&&b.length>0&&"undefined"!=typeof b[0]){var c="string"==typeof b[0].data?JSON.parse(b[0].data):b[0].data;c&&(c.retrieved=new Date(b[0].retrieved)),d.call(null,null,c)}else d.call(null,null,null)})},g=function(a,b,c){b&&"object"==typeof b&&b.length||(b=[0,(new Date).getTime()]);var d="SELECT distinct retrieved from datacache where service=? and retrieved >= ? and retrieved <= ? ORDER BY retrieved ASC",e=[a,b[0],b[1]];n.all(d,e,function(a,b){var d=[];if(b&&b.length>0&&"undefined"!=typeof b[0])for(var e=b.length-1;e>=0;e--)d.push(new Date(b[e].retrieved));c.call(null,d)})}}else"localStorage"in window?(h=function(a){if("localStorage"in window){for(var b=[],c=0,d=localStorage.length;c<d;c++)b.push(localStorage.key(c));for(var e=b.shift();e;){if(new RegExp("^MASCP.*").test(e)){var f=localStorage[e];if(f&&"string"==typeof f){var g=JSON.parse(f);g.retrieved=a,localStorage.removeItem(e)}}e=b.shift()}}},e=function(a,b){if("localStorage"in window){for(var c=[],d=0,e=localStorage.length;d<e;d++)c.push(localStorage.key(d));for(var f=c.shift();f;){if(new RegExp("^"+a+".*"+(b?"#"+b.toLowerCase()+"$":"")).test(f)&&(localStorage.removeItem(f),b))return;f=c.shift()}}},d=function(b,c){var d={};if("localStorage"in window)for(var e,f=new RegExp("^"+b+".*"),g=0,h=localStorage.length;g<h;g++)e=localStorage.key(g),f.test(e)&&(d[e.replace(/\.#.*$/g,"")]=!0);var i=[];for(var j in d)d.hasOwnProperty(j)&&i.push(j);return c.call(a,i),i},i=function(b,c){if("localStorage"in window)for(var d,e=new RegExp("^"+b),f=0,g=localStorage.length;f<g;f++)d=localStorage.key(f),e.test(d)&&(d=d.replace(b,""),results[d]=!0);var h=[];for(var i in results)results.hasOwnProperty(i)&&h.push(i);c.call(a,h)},b=function(a,b,c){var d=localStorage[b.toString()+".#"+(a||"").toLowerCase()];if(d&&"string"==typeof d){var e=JSON.parse(d);e.retrieved=new Date(e.retrieved),c.call(null,null,e)}else c.call(null,null,null)},c=function(a,b,c){c&&("object"!=typeof c||c instanceof Document||c.nodeName)||(c.retrieved=(new Date).getTime(),localStorage[b.toString()+".#"+(a||"").toLowerCase()]=JSON.stringify(c))},f=function(a,c,d,e){return b(a,c,e)},g=function(a,b,c){c.call(null,[])},j=function(){},k=function(){}):(h=function(a){},e=function(a,b){},d=function(a,b){},i=function(b,c){c.call(a,[])},b=function(a,b,c){c.call(null,null,null)},c=function(a,b,c){},f=function(a,b,c,d){d.call(null,[])},g=function(a,b,c){c.call(null,[])},j=function(){},k=function(){})}(MASCP.Service),MASCP.Service.prototype.setAsync=function(a){return this.async=a,this},MASCP.Service.prototype.requestData=function(){},MASCP.Service.prototype.toString=function(){for(var a in MASCP)if(this.__class__==MASCP[a])return"MASCP."+a},MASCP.Service.prototype.registerSequenceRenderer=function(a){return this.setupSequenceRenderer&&(this.renderers=this.renderers||[],this.setupSequenceRenderer(a),this.renderers.push(a)),this},MASCP.Service.prototype.setupSequenceRenderer=function(a){return this},MASCP.Service.importNode=function(a){if("undefined"==typeof document)return a;var b;return"string"==typeof a?(b=document.createElement("div"),b.innerHTML=a,b.firstChild):document.importNode?document.importNode(a,!0):(b=document.createElement("div"),b.innerHTML=a.xml,b.firstChild)},MASCP.Service.Result=function(){},MASCP.Service.Result.prototype={agi:null,reader:null},MASCP.Service.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.AccessionReader=MASCP.buildService(function(a){return this._data=a||{data:["",""]},this}),MASCP.AccessionReader.SERVICE_URL="http://gator.masc-proteomics.org/tair.pl",MASCP.AccessionReader.prototype.requestData=function(){return{type:"GET",dataType:"json",data:{agi:this.agi,accession:this.accession,service:"tair"}}},MASCP.AccessionReader.Result.prototype.getDeletions=function(){return[]},MASCP.AccessionReader.prototype.setupSequenceRenderer=function(a){var b=this;this.bind("resultReceived",function(){var c=b.accession.split(","),d=c.shift(),e=b.result.length?b.result.shift():b.result;for(MASCP.registerGroup("all_insertions"),MASCP.registerGroup("all_deletions"),a.registerLayer("insertions",{fullname:"Accession",color:"#ff0000"}),a.createGroupController&&a.createGroupController("insertions","all_insertions"),console.log(e);e;){var f=a.sequence,g=e.getSequence(),h=(new diff_match_patch).diff_main(f,g),i=1,j=[],k=[];if(h.length<=1)e=b.result.length?b.result.shift():null,d=c.shift();else{var l="all_"+d;a.registerLayer(l,{fullname:d,group:"all_insertions"});var m;for(m=h.length-1;m>=0;m--)m>0&&h[m-1][0]<=0&&(i+=h[m-1][1].length,i>a.sequence.length&&(i=a.sequence.length)),h[m][0]==-1&&k.push({index:i,delta:h[m][1]}),1==h[m][0]&&j.push({insertBefore:i,delta:h[m][1]});for(m=j.length-1;m>=0;m--)a.getAA(j[m].insertBefore-1).addAnnotation(l,1,{border:"rgb(150,0,0)",content:j[m].delta}),a.getAA(j[m].insertBefore-1).addAnnotation("insertions",1,{border:"rgb(150,0,0)",content:j[m].delta});for(m=k.length-1;m>=0;m--)a.getAA(k[m].index).addAnnotation(l,1,{angle:90,border:"rgb(0,0,150)",content:k[m].delta}),a.getAA(k[m].index).addAnnotation("insertions",1,{angle:90,border:"rgb(0,0,150)",content:k[m].delta});e=b.result.length?b.result.shift():null,d=c.shift()}}})},MASCP.AccessionReader.Result.prototype.getDescription=function(){return this._data.data[1]},MASCP.AccessionReader.Result.prototype.getSequence=function(){return"object"==typeof this._data&&this._data.length?this._data[0].data[2]:this._data.data[2]},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.ArbitraryDataReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.ArbitraryDataReader.SERVICE_URL="http://gator.masc-proteomics.org/datasets.pl?",MASCP.ArbitraryDataReader.prototype.requestData=function(){var a=this.agi,b=this._dataset();return b?{type:"GET",dataType:"json",data:{agi:a,dataset:b,service:"ArbitraryData"}}:{type:"GET",dataType:"json",data:{service:"ArbitraryData"}}},MASCP.ArbitraryDataReader.prototype._extend=function(a){if(null===this||"object"!=typeof this||"undefined"==typeof a||!a)return this;var b=new MASCP.ArbitraryDataReader;return b._endpointURL=this._endpointURL,b.agi=this.agi,b.toString=function(){var c=MASCP.Service.prototype.toString.call(b);return c+"."+a},b._dataset=function(){return a},b.layer=function(){return"arbitrary_"+a},b},MASCP.ArbitraryDataReader.prototype._dataset=function(){return null},MASCP.ArbitraryDataReader.prototype.retrieve=function(a,b){var c=this,d=this.agi||a;if(d&&this._dataset())return void MASCP.Service.prototype.retrieve.call(c,a,b);if(!this._SERVER_DATASETS&&d&&"dummy"!=d){var e=new MASCP.ArbitraryDataReader("",c._endpointURL);return void e.retrieve("dummy",function(){this.result?c._SERVER_DATASETS=this.result._raw_data.data:c._SERVER_DATASETS=[],c.retrieve(a,b)})}return this._SERVER_DATASETS?0==this._SERVER_DATASETS.length?(MASCP.Service.prototype.retrieve.call(c,"dummy",b),void(c.renderers||[]).forEach(function(a){jQuery(a).trigger("resultsRendered",[c])})):void this._SERVER_DATASETS.forEach(function(a){var e=c._extend(a);(c.renderers||[]).forEach(function(a){e.setupSequenceRenderer(a),a.bind("resultsRendered",function(b,d){d==e&&jQuery(a).trigger("resultsRendered",[c])})}),e.bind("resultReceived",function(){c.gotResult()}),e.bind("requestComplete",function(){c.requestComplete()}),e.retrieve(d,b)}):void MASCP.Service.FindCachedService(c.toString(),function(a){if(a.length>=0){var d=[];a.forEach(function(a){d.push(a.replace(c.toString()+".",""))}),c._SERVER_DATASETS=d,c.result={},c.result._raw_data={data:d}}c._endpointURL&&c._endpointURL.length&&MASCP.Service.ClearCache(c),MASCP.Service.prototype.retrieve.call(c,"dummy",b)})},MASCP.ArbitraryDataReader.Result=MASCP.ArbitraryDataReader.Result,MASCP.ArbitraryDataReader.Result.prototype.getPeptides=function(){return this._peptides?this._peptides:this._raw_data&&this._raw_data.data?this._raw_data.data:[]},MASCP.ArbitraryDataReader.prototype.setupSequenceRenderer=function(a){var b=this;if(this._dataset()){var c=".active .overlay { background: #ff5533; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";return this.bind("resultReceived",function(){var d=this.result.getPeptides();if(d.length<=0)return void jQuery(a).trigger("resultsRendered",[b]);MASCP.registerGroup("arbitrary_datasets",{fullname:"Other data",color:"#ff5533"}),MASCP.registerLayer("arbitrary_controller",{fullname:"Other data",color:"#ff5533",css:c});var e=this.layer();MASCP.registerLayer(e,{group:"arbitrary_datasets",fullname:this._dataset(),color:this.result._raw_data.color||"#ff5533",css:c}),this.result._raw_data.url&&(MASCP.getLayer(e).href=this.result._raw_data.url);for(var f=0;f<d.length;f++){var g,h=d[f];"string"==typeof h?(g=a.getAminoAcidsByPeptide(h),g.addToLayer(e)):2==h.length&&a.getAA(h[0]).addBoxOverlay(e,h[1]-h[0])}a.createGroupController&&a.createGroupController("arbitrary_controller","arbitrary_datasets"),jQuery(a).trigger("resultsRendered",[b])}),this}},MASCP.ArbitraryDataReader.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.AtChloroReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.AtChloroReader.SERVICE_URL="http://prabi2.inrialpes.fr/at_chloro/annotation/",MASCP.AtChloroReader.prototype.requestData=function(){var a=this.agi;return{type:"GET",url:this._endpointURL+a.toUpperCase(),dataType:"json",data:{agi:a.toUpperCase(),service:"atchloro"}}},MASCP.AtChloroReader.Result=MASCP.AtChloroReader.Result,MASCP.AtChloroReader.Result.prototype.getPeptides=function(){if(this._peptides)return this._peptides;if(this._long_name_map={},!this._raw_data||!this._raw_data.peptides)return[];for(var a=[],b=0;b<this._raw_data.peptides.length;b++){var c=this._raw_data.peptides[b],d={sequence:this._cleanSequence(c.sequence)};a.push(d)}return this._peptides=a,a},MASCP.AtChloroReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.AtChloroReader.prototype.setupSequenceRenderer=function(a){var b=this,c=".active .overlay { background: #55ff33; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";return this.bind("resultReceived",function(){var d=this.result.getPeptides();d.length>0&&(MASCP.registerLayer("atchloro_experimental",{fullname:"AT_CHLORO MS/MS",color:"#55ff33",css:c}),MASCP.getLayer("atchloro_experimental").href="http://prabi2.inrialpes.fr/at_chloro/protein/"+b.agi.toUpperCase());for(var e=0;e<d.length;e++){var f=d[e].sequence,g=a.getAminoAcidsByPeptide(f);g.addToLayer("atchloro_experimental")}jQuery(a).trigger("resultsRendered",[b])}),this},MASCP.AtChloroReader.Result.prototype.render=function(){if(this.getPeptides().length>0){var a=jQuery('<div>MS/MS spectra <input class="group_toggle" type="checkbox"/>AtChloro</div>');return jQuery(this.reader.renderers).each(function(b){this.createGroupCheckbox("atchloro_experimental",jQuery("input.group_toggle",a))}),a}return null},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.AtPeptideReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.AtPeptideReader.SERVICE_URL="http://gator.masc-proteomics.org/atpeptide.pl?",MASCP.AtPeptideReader.prototype.requestData=function(){var a=this.agi;return{type:"GET",dataType:"json",data:{agi:a,service:"atpeptide"}}},MASCP.AtPeptideReader.Result.prototype.tissues=function(){return this._tissues},MASCP.AtPeptideReader.Result=MASCP.AtPeptideReader.Result,MASCP.AtPeptideReader.Result.prototype.getPeptides=function(){if(this._peptides)return this._peptides;if(this._tissues=[],this.spectra={},this._long_name_map={},!this._raw_data||!this._raw_data.peptides)return[];for(var a=[],b=function(){return this.sequence},c=this._raw_data.peptides.length-1;c>=0;c--){var d=this._raw_data.peptides[c],e={sequence:this._cleanSequence(d.sequence),tissues:[]};e.toString=b,a.push(e);for(var f=d.tissues.length-1;f>=0;f--){var g=d.tissues[f];if(this._tissues.indexOf(g["PO:tissue"])<0){var h=g["PO:tissue"];this._tissues.push(h),h.long_name=g.tissue,this._long_name_map[h]=g.tissue}e.tissues.push(g["PO:tissue"]),this.spectra[g["PO:tissue"]]||(this.spectra[g["PO:tissue"]]=0),this.spectra[g["PO:tissue"]]+=1}}return this._peptides=a,a},MASCP.AtPeptideReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.AtPeptideReader.prototype.setupSequenceRenderer=function(a){var b=this;return this.bind("resultReceived",function(){MASCP.registerGroup("atpeptide_experimental",{fullname:"AtPeptide MS/MS",hide_member_controllers:!0,hide_group_controller:!0,color:"#ff5533"});var c="atpeptide_controller",d=".active .overlay { background: #ff5533; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";MASCP.registerLayer(c,{fullname:"AtPeptide MS/MS",color:"#ff5533",css:d}),a.createGroupController&&a.createGroupController("atpeptide_controller","atpeptide_experimental");for(var e=this.result.getPeptides(),f=0;f<this.result.tissues().length;f++){var g=this.result.tissues()[f];MASCP.registerLayer("atpeptide_peptide_"+g,{fullname:this.result._long_name_map[g],group:"atpeptide_experimental",color:"#ff5533",css:d});for(var h=0;h<e.length;h++){var i=e[h].sequence;if(!(e[h].tissues.indexOf(g+"")<0)){var j=a.getAminoAcidsByPeptide(i),k="atpeptide_peptide_"+g;j.addToLayer(k),j.addToLayer(c)}}}jQuery(a).trigger("resultsRendered",[b])}),this},MASCP.AtPeptideReader.Result.prototype.render=function(){if(this.getPeptides().length>0){var a=jQuery('<div>MS/MS spectra <input class="group_toggle" type="checkbox"/>AtPeptide</div>');return jQuery(this.reader.renderers).each(function(b){this.createGroupCheckbox("atpeptide_experimental",jQuery("input.group_toggle",a))}),a}return null},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.GelMapReader=MASCP.buildService(function(a){if(this._raw_data=a,!a)return this;if(!a.Maps)return this;for(var b=[],c=a.Maps.length-1;c>=0;c--){var d=a.Maps[c];d.sequence="",b.push(d)}return this.maps=b,this}),MASCP.GelMapReader.SERVICE_URL="http://gelmap.de/gator2.php?",MASCP.GelMapReader.prototype.requestData=function(){var a=this.agi.toUpperCase();return{type:"GET",dataType:"json",data:{agi:a,service:"gelmap"}}},MASCP.GelMapReader.Result=MASCP.GelMapReader.Result,MASCP.GelMapReader.Result.prototype.getPeptides=function(){return this._peptides?this._peptides:(this._peptides=peptides,peptides)},MASCP.GelMapReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.GelMapReader.prototype.setupSequenceRenderer=function(a){var b=this;MASCP.registerGroup("gelmap_experimental",{fullname:"GelMap",hide_member_controllers:!0,hide_group_controller:!0,color:"#aaaaff"});var c="gelmap_controller",d=".active .overlay { background: #ff5533; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";MASCP.registerLayer(c,{fullname:"GelMap",color:"#aaaaff",css:d}),a.createGroupController&&a.createGroupController("gelmap_controller","gelmap_experimental");var e=function(a){a=a.sort(function(a,b){return 1*a-1*b});for(var b=[a[0]],c=1;c<a.length;c++)a[c-1]!==a[c]&&b.push(a[c]);return b};return this.bind("resultReceived",function(){for(var f=this.result.maps,g=f.length-1;g>=0;g--){var h=f[g];MASCP.registerLayer("gelmap_map_"+h.id,{fullname:h.title,group:"gelmap_experimental",color:"#aaaaff",css:d}),MASCP.getLayer("gelmap_map_"+h.id).href=h.url;for(var i=e(f[g].peptides),j=i.length-1;j>=0;j--){var k=i[j],l=a.getAminoAcidsByPeptide(k),m="gelmap_map_"+h.id;l.addToLayer(m),l.addToLayer(c)}}jQuery(a).trigger("resultsRendered",[b])}),this},MASCP.GelMapReader.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.InterproReader=MASCP.buildService(function(a){return a&&(this._raw_data||a.data?this._raw_data=a:(this._raw_data={data:[]},this._raw_data.data.push(a))),this}),MASCP.InterproReader.SERVICE_URL="http://gator.masc-proteomics.org/interpro.pl?",MASCP.InterproReader.prototype.requestData=function(){return{type:"GET",dataType:"json",data:{agi:this.agi,service:"interpro"}}},function(){var a=MASCP.InterproReader.prototype.retrieve;MASCP.InterproReader.prototype.retrieve=function(b,c){var d=this;this.agi||(this.agi=b);var e=arguments.callee,f=c;return null===this.sequence||"undefined"==typeof this.sequence?(new MASCP.TairReader(d.agi).bind("resultReceived",function(){d.sequence=this.result.getSequence()||"",e.call(d,d.agi,f)}).bind("error",function(a){d.trigger("error",[a])}).retrieve(),this):(a!==MASCP.Service.prototype.retrieve&&(a=MASCP.Service.prototype.retrieve),a.call(d,d.agi,f),this)}}(),MASCP.InterproReader.Result=MASCP.InterproReader.Result,MASCP.InterproReader.Result.prototype.getDomains=function(){if(!this._raw_data||0===this._raw_data.data.length)return{};if(this._peptides_by_domain)return this._peptides_by_domain;for(var a={},b={},c=this._raw_data.data,d=0;d<c.length;d++){var e=a[c[d].interpro]||[];e.push(this.sequence.substring(c[d].start,c[d].end)),b[c[d].interpro]=c[d].description,a[c[d].interpro]=e}return this._peptides_by_domain=a,a},MASCP.InterproReader.prototype.setupSequenceRenderer=function(a){var b=this;return this.bind("resultReceived",function(){this.agi;MASCP.registerGroup("interpro_domains",{fullname:"Interpro domains",color:"#000000"});var c="interpro_controller",d=".active .overlay { background: #000000; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";MASCP.registerLayer(c,{fullname:"Interpro domains",color:"#000000",css:d}),MASCP.getLayer("interpro_controller").href="",this.result.sequence=a.sequence;var e=this.result.getDomains();for(var f in e)if(e.hasOwnProperty(f)){var g=null;g=f;var h=MASCP.registerLayer("interpro_domain_"+g,{fullname:g,group:"interpro_domains",color:"#000000",css:d});h.href="http://www.ebi.ac.uk/interpro/IEntry?ac="+g;for(var i=e[g],j=0;j<i.length;j++){var k=a.getAminoAcidsByPeptide(i[j]),l="interpro_domain_"+g;k.addToLayer(l),k.addToLayer(c)}}a.createGroupController&&a.createGroupController("interpro_controller","interpro_domains"),jQuery(a).trigger("resultsRendered",[b])}),this},MASCP.InterproReader.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.P3dbReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.P3dbReader.SERVICE_URL="http://p3db.org/gator.php?",MASCP.P3dbReader.prototype.requestData=function(){var a=this.agi.toLowerCase();return{type:"GET",dataType:"json",data:{agi:a,service:"p3db"
}}},MASCP.P3dbReader.Result=MASCP.P3dbReader.Result,MASCP.P3dbReader.Result.prototype.getPeptides=function(){if(this._peptides)return this._peptides;if(this._long_name_map={},!this._raw_data||!this._raw_data.peptides)return[];for(var a=[],b=0;b<this._raw_data.peptides.length;b++){var c=this._raw_data.peptides[b],d={sequence:this._cleanSequence(c)};a.push(d)}return this._peptides=a,a},MASCP.P3dbReader.Result.prototype.getOrthologousPeptides=function(a){var b=this;if(!this._raw_data.orthologs)return[];var c=[];return this._raw_data.orthologs.forEach(function(d){if(d.organism===a&&d.peptides)for(var e=0;e<d.peptides.length;e++){var f=d.peptides[e],g={sequence:b._cleanSequence(f)};c.push(g)}}),c},MASCP.P3dbReader.Result.prototype.getOrganisms=function(){if(!this._raw_data.orthologs)return[];var a=[];return this._raw_data.orthologs.forEach(function(b){a.push({id:b.organism,name:b.name})}),a},MASCP.P3dbReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.P3dbReader.prototype.setupSequenceRenderer=function(a){var b=this,c="#5533ff";return MASCP.registerGroup("p3db_experimental",{fullname:"P3DB (mod)",color:c}),this.bind("resultReceived",function(){var d=this.result,e=d.getPeptides();e.length>0&&MASCP.registerLayer("p3db_controller",{fullname:"P3DB (mod)",color:c});for(var f=0;f<e.length;f++){var g=e[f].sequence,h=a.getAminoAcidsByPeptide(g);h.addToLayer("p3db_controller")}d.getOrganisms().forEach(function(b){if(3702!==b.id){var e="p3db_tax_"+b.id,f=d.getOrthologousPeptides(b.id);f.length>0&&MASCP.registerLayer(e,{fullname:b.name,group:"p3db_experimental",color:c});for(var g=0;g<f.length;g++){var h=f[g].sequence,i=a.getAminoAcidsByPeptide(h);i.addToLayer(e)}}}),a.createGroupController&&a.createGroupController("p3db_controller","p3db_experimental"),jQuery(a).trigger("resultsRendered",[b])}),this},MASCP.P3dbReader.Result.prototype.render=function(){},MASCP.Pep2ProReader=MASCP.buildService(function(a){return this._raw_data=a,a&&(this._populate_spectra(a),this._populate_peptides(a)),this}),MASCP.Pep2ProReader.prototype.requestData=function(){var a=this.agi;return{type:"GET",dataType:"json",data:{agi:a,service:"pep2pro"}}},MASCP.Pep2ProReader.SERVICE_URL="http://fgcz-pep2pro.uzh.ch/mascp_gator.php?",MASCP.Pep2ProReader.Result=MASCP.Pep2ProReader.Result,MASCP.Pep2ProReader.Result.prototype.tissues=function(){return this._tissues},MASCP.Pep2ProReader.Result.prototype.getPeptides=function(){return this._peptides},MASCP.Pep2ProReader.Result.prototype=MASCP.extend(MASCP.Pep2ProReader.Result.prototype,{spectra:null,peptide_counts_by_tissue:null,sequence:null}),MASCP.Pep2ProReader.Result.prototype._populate_spectra=function(a){if(this.spectra={},this._tissues=[],this._long_name_map={},a&&a.tissues)for(var b=0;b<a.tissues.length;b++)this._tissues[b]=a.tissues[b]["PO:tissue"]||{},this._tissues[b].long_name=a.tissues[b].tissue,this._long_name_map[this._tissues[b]]=a.tissues[b].tissue,this.spectra[a.tissues[b]["PO:tissue"]]=parseInt(a.tissues[b].qty_spectra,10)},MASCP.Pep2ProReader.Result.prototype._populate_peptides=function(a){if(this.peptide_counts_by_tissue={},a&&a.peptides){this.sequence=a.sequence,this._peptides=[];for(var b=0;b<a.peptides.length;b++){var c=a.peptides[b];this._peptides.push(c.sequence);for(var d=c.position+"-"+(parseInt(c.position,10)+parseInt(c.sequence.length,10)),e=0;e<c.tissues.length;e++){var f=c.tissues[e];this.peptide_counts_by_tissue[f["PO:tissue"]]||(this.peptide_counts_by_tissue[f["PO:tissue"]]={}),this.peptide_counts_by_tissue[f["PO:tissue"]][d]=parseInt(f.qty_spectra,10)}}}},MASCP.Pep2ProReader.Result.prototype.render=function(){var a=jQuery.param(this.reader.requestData().data),b=0;for(var c in this.spectra)this.spectra.hasOwnProperty(c)&&(b+=parseInt(this.spectra[c],10));var d=jQuery('<div>MS/MS spectra <input type="checkbox" class="group_toggle"/><a style="display: block; float: right;" href="http://fgcz-pep2pro.unizh.ch/index.php?'+a+'">Pep2Pro</a></div>');return jQuery(this.reader.renderers).each(function(a){this.createGroupCheckbox("pep2pro",jQuery("input.group_toggle",d))}),d},MASCP.Pep2ProReader.prototype._rendererRunner=function(a){for(var b=this.result?this.result.tissues():[],c=b.length-1;c>=0;c--){var d=b[c];if(!(this.result.spectra[d]<1)){var e=this.result.peptide_counts_by_tissue[d],f="pep2pro_by_tissue_"+d,g=" .overlay { display: none; } .tracks .active { fill: #000099; } .inactive { display: none; } .active .overlay { display: block; top: 0px; background: #000099; } ";MASCP.registerLayer(f,{fullname:this.result._long_name_map[d],group:"pep2pro",color:"#000099",css:g,data:{po:d,count:e}});for(var h=this._normalise(this._mergeCounts(e)),i=1,j=null;i<=h.length;)null!==j&&("undefined"!=typeof h[i]&&i!=h.length||(a.getAminoAcidsByPosition([j])[0].addBoxOverlay(f,i-1-j),j=null)),h[i]>0&&null===j&&(j=i),i+=1}}},MASCP.Pep2ProReader.prototype._groupSummary=function(a){var b=this.result?this.result.tissues():[],c=[],d=function(){var a=[];for(var b in this)this.hasOwnProperty(b)&&a.push(b);return a.sort().join(",")};for(var e in b)if(b.hasOwnProperty(e)){var f=b[e];if(this.result.spectra[f]<1)continue;for(var g=this._mergeCounts(this.result.peptide_counts_by_tissue[f]),h=0;h<g.length;h++)g[h]>0&&(c[h]||(c[h]={},c[h].tissue=d),c[h][f]=!0)}var i=0,j=null,k=null,l="pep2pro_controller",m=" .overlay { display: none; } .tracks .active { fill: #000099; } .inactive { display: none; } .active .overlay { display: block; top: 0px; background: #000099; } ";MASCP.registerLayer(l,{fullname:"Pep2Pro MS/MS",color:"#000099",css:m});var n=this.result.agi,o=n.replace(/\.\d/,"");for(MASCP.getLayer("pep2pro_controller").href="http://fgcz-pep2pro.uzh.ch/locus.php?"+o;i<=c.length;)if(i<=0)i+=1;else{if((!c[i]||c[i].tissue()!=k||i==c.length)&&null!==j){var p=i-j;c[i]||(p-=1),a.getAminoAcidsByPosition([j])[0].addBoxOverlay(l,p),j=null}c[i]&&null===j&&(k=c[i].tissue(),j=i),i+=1}a.createGroupController&&a.createGroupController("pep2pro_controller","pep2pro")},MASCP.Pep2ProReader.prototype.setupSequenceRenderer=function(a){var b=this;return this.bind("resultReceived",function(){return MASCP.registerGroup("pep2pro",{fullname:"Pep2Pro data",hide_member_controllers:!0,hide_group_controller:!0,color:"#000099"}),a.sequence!=this.result.sequence&&""!=this.result.sequence?(jQuery(a).bind("sequenceChange",function(){jQuery(a).unbind("sequenceChange",arguments.callee),b._groupSummary(a),b._rendererRunner(a),jQuery(a).trigger("resultsRendered",[b])}),void a.setSequence(this.result.sequence)):(b._groupSummary(a),b._rendererRunner(a),jQuery(a).trigger("resultsRendered",[b]),void 0)}),this},MASCP.Pep2ProReader.prototype._normalise=function(a){var b=0,c=0;for(c=0;c<a.length;c++)a[c]&&a[c]>b&&(b=a[c]);for(c=0;c<a.length;c++)a[c]&&a[c]>0&&(a[c]=1*a[c]/b);return a},MASCP.Pep2ProReader.prototype._mergeCounts=function(a){var b=[];for(var c in a)if(a.hasOwnProperty(c))for(var d=c.split("-"),e=parseInt(d[0],10),f=parseInt(d[1],10),g=e;g<=f;g++)b[g]||(b[g]=0),b[g]+=a[c];return b},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.PhosphatReader=MASCP.buildService(function(a){if(a&&a.result&&!this._sequence)for(var b=0;b<a.result.length;b++)if("Imported protein - no info"==a.result[b].prot_sequence){var c=a.result[b].code;c=c.replace(/\s+$/,""),this._sequence=MASCP.getSequence(c);break}return a&&a.experimental&&a.relatives&&a.predicted?(this._raw_data=a,this):(a&&"getPredictedAa"==a.request_method&&(this._raw_data||(this._raw_data={}),this._raw_data.predicted=a),a&&"getExperimentsModAa"==a.request_method&&(this._raw_data||(this._raw_data={}),this._raw_data.experimental=a),a&&"getRelatives"==a.request_method&&(this._raw_data||(this._raw_data={}),this._raw_data.relatives=a),this)}),MASCP.PhosphatReader.SERVICE_URL="http://gator.masc-proteomics.org/proxy.pl?",MASCP.PhosphatReader.prototype.requestData=function(){var a=[null,this.agi];this.method||this._methods||(this._methods=["getPredictedAa","getExperimentsModAa","getRelatives"]),this.combine&&(this._methods=[]);var b=this._methods[0];return"getRelatives"==b&&(a=[this.agi]),{type:"POST",dataType:"json",data:{id:1,method:b,agi:this.agi,params:encodeURI(a.toJSON?a.toJSON():JSON.stringify(a)),service:"phosphat"}}},function(a){var b=a.prototype._dataReceived;a.prototype._dataReceived=function(a,c){if(null===a)return b.call(this,null,c);a.request_method=this._methods?this._methods[0]:null,this._methods&&this._methods.shift(),a.error&&0===a.error.indexOf("SELECT")&&(a.error=null);var d=b.call(this,a,c);return this.result&&this.result._raw_data&&this.result._raw_data.experimental&&this.result._raw_data.relatives&&this.result._raw_data.predicted?(this._methods=null,d):(d&&this.retrieve(),!1)}}(MASCP.PhosphatReader),MASCP.PhosphatReader.Result=MASCP.PhosphatReader.Result,MASCP.PhosphatReader.Result.prototype.getAllPredictedPositions=function(){var a=[],b=this._raw_data.predicted.result;for(var c in b)if(b.hasOwnProperty(c)){var d=this._raw_data.predicted.result[c];d.prd_score>0&&a.push(d.prd_position)}return a},MASCP.PhosphatReader.Result.prototype.getAllExperimentalPositions=function(){var a={},b=this._raw_data.experimental.result;for(var c in b)if(b.hasOwnProperty(c)){var d=this._raw_data.experimental.result[c],e=d.pep_sequence||"";if(e=e.replace(/[^A-Z]/g,""),"phos"!=d.modificationType)continue;var f=this._sequence||d.prot_sequence,g=f.indexOf(e);if(g<0)continue;g+=d.position,a[g]=1}var h=[];for(var i in a)a.hasOwnProperty(i)&&h.push(parseInt(i,10));return h},MASCP.PhosphatReader.Result.prototype.getAllExperimentalPhosphoPeptides=function(){var a={},b=this._raw_data.experimental.result;for(var c in b)if(b.hasOwnProperty(c)){var d=this._raw_data.experimental.result[c],e=d.pep_sequence||"";if(e=e.replace(/[^A-Z]/g,""),"phos"!=d.modificationType)continue;var f=this._sequence||d.prot_sequence,g=f.indexOf(e);if(g>=0){var h=""+g+"-"+e.length;a[h]=a[h]||[g,e.length],a[h].indexOf(d.position+g,2)<=0&&a[h].push(d.position+g)}}var i=[];for(var j in a)a.hasOwnProperty(j)&&i.push(a[j]);return i},MASCP.PhosphatReader.Result.prototype.getSpectra=function(){if(!this._raw_data.relatives||!this._raw_data.relatives.result)return{};for(var a={},b=this._raw_data.relatives.result,c=0;c<b.length;c++){var d=b[c].Tissue;a[d]||(a[d]=0),a[d]+=1}return a},MASCP.PhosphatReader.Result.prototype.render=function(){return null},MASCP.PhosphatReader.prototype.setupSequenceRenderer=function(a){var b=this;return this.bind("resultReceived",function(){var c=[],d=this.result.getAllExperimentalPhosphoPeptides();return 0===d.length?void jQuery(a).trigger("resultsRendered",[b]):(MASCP.registerLayer("phosphat_experimental",{fullname:"PhosPhAt (mod)",color:"#000000",css:".active { background: #999999; color: #000000; font-weight: bolder; } .tracks .active { background: #000000; fill: #000000; } .inactive { display: none; }"}),MASCP.registerGroup("phosphat_peptides",{fullname:"PhosPhAt peptides"}),a.createGroupController&&a.createGroupController("phosphat_experimental","phosphat_peptides"),jQuery(d).each(function(b){MASCP.registerLayer("phosphat_peptide_"+b,{fullname:"PhosPhAt MS/MS",group:"phosphat_peptides",color:"#000000",css:".active { background: #999999; color: #000000; } .tracks .active { background: #000000; fill: #000000; } .inactive { display: none; }"});var d=this.shift(),e=this.shift(),f=a.getAminoAcidsByPosition([d+1])[0];f&&(f.addBoxOverlay("phosphat_peptide_"+b,e,.5),c.push(f.addBoxOverlay("phosphat_experimental",e,.5))),jQuery(a.getAminoAcidsByPosition(this)).each(function(){this.addToLayer("phosphat_peptide_"+b),c=c.concat(this.addToLayer("phosphat_experimental"))})}),jQuery(MASCP.getGroup("phosphat_peptides")).bind("visibilityChange",function(b,d,e){d==a&&c.forEach(function(a){a.style||a.setAttribute("style",""),a.style.display=e?"none":"inline"})}),MASCP.getLayer("phosphat_experimental")&&(MASCP.getLayer("phosphat_experimental").href="http://phosphat.mpimp-golm.mpg.de/app.html?agi="+this.result.agi),void jQuery(a).trigger("resultsRendered",[b]))}),this},MASCP.PpdbReader=MASCP.buildService(function(a){if(!a)return this;var b=function(){for(var a=this._raw_data.getElementsByTagName("FEATURE"),b=[],c={},d={},e=0;e<a.length;e++){var f=a[e].getElementsByTagName("TYPE")[0],g=f.textContent||f.text||f.nodeValue;if("Peptide"==g){var h=a[e].getAttribute("label");c[h]||(c[h]={experiments:[]});var i=parseInt(a[e].getElementsByTagName("GROUP")[0].getAttribute("id"),10);c[h].experiments.push(i),d[i]=!0}}for(var j in c)if(c.hasOwnProperty(j)){var k={sequence:j,experiments:c[j].experiments};b.push(k)}this._experiments=[];for(var l in d)d.hasOwnProperty(l)&&this._experiments.push(parseInt(l,10));return b};if(this._raw_data=a,a.getElementsByTagName){var c=b.call(this);this._raw_data={experiments:this._experiments,peptides:c}}return this._experiments=this._raw_data.experiments,this._peptides=this._raw_data.peptides,this}),MASCP.PpdbReader.prototype.requestData=function(){var a=(this.agi+"").replace(/\..*$/,""),b="json";return(this._endpointURL||"").indexOf("xml")>=0&&(b="xml"),{type:"GET",dataType:b,data:{segment:a,agi:this.agi,service:"ppdb"}}},MASCP.PpdbReader.SERVICE_URL="http://ppdb.tc.cornell.edu/das/arabidopsis/features/?output=xml",MASCP.PpdbReader.Result=MASCP.PpdbReader.Result,MASCP.PpdbReader.Result.prototype=MASCP.extend(MASCP.PpdbReader.Result.prototype,{spectra:null,peptide_counts_by_tissue:null,sequence:null}),MASCP.PpdbReader.Result.prototype.render=function(){return null},MASCP.PpdbReader.Result.prototype.getExperiments=function(){return this._experiments||[]},MASCP.PpdbReader.Result.prototype.getPeptides=function(){var a=this._peptides||[];return a.forEach(function(a){a.toString=function(a){return function(){return a.sequence}}(a)}),a},MASCP.PpdbReader.prototype.setupSequenceRenderer=function(a){var b=this;return this.bind("resultReceived",function(){MASCP.registerGroup("ppdb",{fullname:"PPDB spectra data",hide_member_controllers:!0,hide_group_controller:!0,color:"#aa9900"});var c="ppdb_controller",d=".active .overlay { background: #aa9900; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";MASCP.registerLayer(c,{fullname:"PPDB MS/MS",color:"#aa9900",css:d}),a.createGroupController&&a.createGroupController("ppdb_controller","ppdb");for(var e=this.result.getPeptides(),f=this.result.getExperiments(),g=0;g<f.length;g++){var h="ppdb_experiment"+f[g];MASCP.registerLayer(h,{fullname:"Experiment "+f[g],group:"ppdb",color:"#aa9900",css:d}),MASCP.getLayer(h).href="http://ppdb.tc.cornell.edu/dbsearch/searchsample.aspx?exprid="+f[g];for(var i=0;i<e.length;i++){var j=e[i];if(!(e[i].experiments.indexOf(f[g])<0)){var k=a.getAminoAcidsByPeptide(j.sequence);k.addToLayer(h),k.addToLayer(c)}}}jQuery(a).trigger("resultsRendered",[b])}),this},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.ProcessingReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.ProcessingReader.SERVICE_URL="?",MASCP.ProcessingReader.prototype.requestData=function(){var a=this.agi;return{type:"GET",dataType:"json",data:{agi:a,service:"processing"}}},MASCP.ProcessingReader.Result=MASCP.ProcessingReader.Result,MASCP.ProcessingReader.Result.prototype.getProcessing=function(){return this._raw_data&&this._raw_data.data&&this._raw_data.data.processing?this._raw_data.data.processing:[]},MASCP.ProcessingReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.ProcessingReader.prototype.setupSequenceRenderer=function(a){var b=this,c=".active .overlay { background: #666666; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";return this.bind("resultReceived",function(){var d=this.result.getProcessing(),e=a.sequence.indexOf(d);if(!(e<0)){MASCP.registerLayer("processing",{fullname:"N-Terminal (mod)",color:"#ffEEEE",css:c});var f=a.getAA(e+1+d.length);f&&f.addAnnotation("processing",1,{border:"rgb(150,0,0)",content:"Mat",angle:0}),jQuery(a).trigger("resultsRendered",[b])}}),this},MASCP.ProcessingReader.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.PromexReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.PromexReader.SERVICE_URL="http://131.130.57.242/json/?",MASCP.PromexReader.prototype.requestData=function(){var a=(this.agi+"").replace(/\..*$/,"");return{type:"GET",dataType:"json",data:{agi:this.agi,ac:a,service:"promex"}}},MASCP.PromexReader.Result=MASCP.PromexReader.Result,MASCP.PromexReader.Result.prototype.getPeptides=function(){if(!this._raw_data||!this._raw_data.peptides)return[];for(var a=[],b=0;b<this._raw_data.peptides.length;b++)a.push(this._cleanSequence(this._raw_data.peptides[b].sequence));return a},MASCP.PromexReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.PromexReader.prototype.setupSequenceRenderer=function(a){var b=this;MASCP.registerGroup("promex_experimental",{fullname:"ProMex spectra data",hide_member_controllers:!0,hide_group_controller:!0,color:"#ff9900"});var c="promex_controller",d=".active .overlay { background: #ff9900; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";return MASCP.registerLayer(c,{fullname:"ProMEX MS/MS",color:"#ff9900",css:d}),this.bind("resultReceived",function(){var e=(this.result.agi+"").replace(/\..*$/,"");MASCP.getLayer("promex_controller").href="http://promex.pph.univie.ac.at/promex/?ac="+e;for(var f=this.result.getPeptides(),g=0;g<f.length;g++){MASCP.registerLayer("promex_experimental_spectrum_"+g,{fullname:"Spectrum",group:"promex_experimental",color:"#ff9900",css:d});var h=f[g],i=a.getAminoAcidsByPeptide(h);if(i&&0!==i.length){var j="promex_experimental_spectrum_"+g;i.addToLayer(j),i.addToLayer(c)}}jQuery(a).trigger("resultsRendered",[b]),a.createGroupController&&a.createGroupController("promex_controller","promex_experimental")}),this},MASCP.PromexReader.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.RippdbReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.RippdbReader.SERVICE_URL="http://gator.masc-proteomics.org/rippdb.pl?",MASCP.RippdbReader.prototype.requestData=function(){var a=this.agi;return{type:"GET",dataType:"json",data:{agi:a,service:"rippdb"}}},MASCP.RippdbReader.Result=MASCP.RippdbReader.Result,MASCP.RippdbReader.Result.prototype.getSpectra=function(){return this._spectra?this._spectra:this._raw_data&&this._raw_data.spectra?(this._spectra=this._raw_data.spectra,this._spectra):[]},MASCP.RippdbReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.RippdbReader.prototype.setupSequenceRenderer=function(a){var b=this,c=".active .overlay { background: #666666; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";return this.bind("resultReceived",function(){var d=this.result.getSpectra(),e="prippdb_experimental",f=[];d.length>0&&(MASCP.registerLayer(e,{fullname:"RIPP-DB (mod)",color:"#666666",css:c}),MASCP.registerGroup("prippdb_peptides",{fullname:"Phosphorylation Rippdb",hide_member_controllers:!0,hide_group_controller:!0,color:"#666666"}),a.createGroupController&&a.createGroupController("prippdb_experimental","prippdb_peptides"),jQuery(MASCP.getGroup("prippdb_peptides")).bind("visibilityChange",function(b,c,d){c==a&&f.forEach(function(a){a.style.display=d?"none":"inline"})}));for(var g=0;g<d.length;g++){var h=d[g],i=h.peptides;if(0!==i.length){var j="prippdb_spectrum_"+h.spectrum_id;MASCP.registerLayer(j,{fullname:"Spectrum "+h.spectrum_id,group:"prippdb_peptides",color:"#666666",css:c});for(var k=0;k<i.length;k++){var l=i[k].sequence,m=a.getAminoAcidsByPeptide(l);if(0!==m.length){m.addToLayer(j),f.push(m.addToLayer("prippdb_experimental"));for(var n=0;n<i[k].positions.length;n++)f=f.concat(m[i[k].positions[n]-1].addToLayer("prippdb_experimental")),m[i[k].positions[n]-1].addToLayer(j)}}}}jQuery(a).trigger("resultsRendered",[b])}),this},MASCP.RippdbReader.Result.prototype.getAllExperimentalPositions=function(){var a=this.getSpectra(),b=[],c={};return a.forEach(function(a){var d=a.peptides;d.forEach(function(a){a.positions.forEach(function(a){c[a]||(b.push(a),c[a]=!0)})})}),b},MASCP.RippdbReader.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.SnpReader=MASCP.buildService(function(a){return this._raw_data=a||{},this}),MASCP.SnpReader.SERVICE_URL="http://gator.masc-proteomics.org/snps.pl?",MASCP.SnpReader.prototype.requestData=function(){return{type:"GET",dataType:"json",data:{agi:this.agi,service:"nssnps"}}},MASCP.SnpReader.prototype.showSnp=function(a,b){var c=this.result.getSnp(b);if(!(c.length<1)){var d,e="all"+b,f=[],g=[];for(d=c.length-1;d>=0;d--)g.push({index:c[d][0],delta:c[d][1]}),f.push({insertBefore:c[d][0]+1,delta:c[d][2]});for(d=f.length-1;d>=0;d--)a.getAA(f[d].insertBefore-1).addAnnotation(e,1,{border:"rgb(150,0,0)",content:f[d].delta})}},MASCP.SnpReader.ALL_ACCESSIONS=["AGU","BAK2","BAY","BUR0","CDM0","COL0","DEL10","DOG4","DON0","EY152","FEI0","HKT24","ICE1","ICE102","ICE104","ICE106","ICE107","ICE111","ICE112","ICE119","ICE120","ICE127","ICE130","ICE134","ICE138","ICE150","ICE152","ICE153","ICE163","ICE169","ICE173","ICE181","ICE21","ICE212","ICE213","ICE216","ICE226","ICE228","ICE29","ICE33","ICE36","ICE49","ICE50","ICE60","ICE61","ICE63","ICE7","ICE70","ICE71","ICE72","ICE73","ICE75","ICE79","ICE91","ICE92","ICE93","ICE97","ICE98","ISTISU1","KASTEL1","KOCH1","KRO0","LAG22","LEO1","LER1","LERIK13","MER6","NEMRUT1","NIE12","PED0","PRA6","QUI0","RI0","RUE3131","SHA","STAR8","TUESB303","TUESCHA9","TUEV13","TUEWA12","VASH1","VIE0","WALHAESB4","XAN1"],MASCP.SnpReader.prototype.setupSequenceRenderer=function(a){var b=this;b.bind("resultReceived",function(){var c=b.result;MASCP.registerGroup("insertions"),MASCP.registerGroup("deletions"),a.withoutRefresh(function(){for(var d,e=c.getAccessions();e.length>0;){var f=e.shift(),g=f,h=c.getSnp(f);if(!(h.length<1)){d||(d=a.registerLayer("insertions_controller",{fullname:"nsSNPs",color:"#ff0000"}));var i="all"+f,j=f.indexOf("_")>=0?f.split("_")[0].toUpperCase():null;["SALK","MPICAO","GMI","MPISCHNEE","MPICOLLAB","JGI"].indexOf(j)<0?j=null:(j.match(/^MPI/)&&(j="MPI"),g=f.replace(/^[^_]+_/,""));var k=[],l=[];j&&(MASCP.registerGroup(j,{group:"insertions"}),a.registerLayer(j+"_controller",{fullname:j,group:"insertions",color:"#ff0000"}),a.createGroupController&&j&&a.createGroupController(j+"_controller",j));var m=a.registerLayer(i,{fullname:g,group:j||"insertions"});!function(a){return function(){var c=!1,d=i;m.href=function(e){return c="boolean"==typeof e?e:!c,c?(MASCP.getLayer(d).icon="#minus_icon",b.showSnp(MASCP.renderer,a)):(MASCP.getLayer(d).icon="#plus_icon",MASCP.renderer.removeAnnotations(d),MASCP.renderer.redrawAnnotations()),MASCP.renderer.refresh(),!1}}}(f)(),MASCP.getLayer(i).icon=null;var n;for(n=h.length-1;n>=0;n--)l.push({index:h[n][0]+1,delta:h[n][1]}),k.push({insertBefore:h[n][0]+1,delta:h[n][2]});for(n=k.length-1;n>=0;n--){var o=k[n].insertBefore-1;o>a.sequence.length&&(o=a.sequence.length);var p=a.getAA(o).addAnnotation("insertions_controller",1,{border:"rgb(150,0,0)",content:k[n].delta,angle:"auto"});p._click||(p.addEventListener("click",function(c){var d=!1;return function(){d=!d,a.withoutRefresh(function(){b.result.getSnpsForPosition(c).forEach(function(a){b.showSnp(MASCP.renderer,a),MASCP.getLayer("all"+a).href(d)})}),a.refresh()}}(o),!1),p.style.cursor="pointer",p._click=!0)}}}MASCP.getGroup("insertions").size()>0&&a.createGroupController&&a.createGroupController("insertions_controller","insertions")}),a.redrawAnnotations("insertions_controller"),jQuery(a).trigger("resultsRendered",[b])})},MASCP.SnpReader.Result.prototype.getAccessions=function(){var a=this._raw_data.data,b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c);return b},MASCP.SnpReader.Result.prototype.getSnp=function(a){var b=this._raw_data.data[a],c=[];for(var d in b)if(b.hasOwnProperty(d)){var e=parseInt(d,10)+1,f=b[d],g=[e,f.charAt(0),f.charAt(1)];c.push(g)}return c},MASCP.SnpReader.Result.prototype.getSnpsForPosition=function(a){var b=this;if(this._cached=this._cached||{},this._cached[a])return this._cached[a];var c=[];return this.getAccessions().forEach(function(d){b.getSnp(d).forEach(function(b){if(b[0]==a)return void c.push(d)})}),this._cached[a]=c,c},MASCP.cloneService(MASCP.SnpReader,"RnaEditReader"),MASCP.RnaEditReader.SERVICE_URL="?",MASCP.RnaEditReader.prototype.requestData=function(){return{type:"GET",dataType:"json",data:{agi:this.agi,service:"rnaedit"}}},MASCP.RnaEditReader.prototype.setupSequenceRenderer=function(a){var b=this;b.bind("resultReceived",function(){var c=b.result;a.withoutRefresh(function(){for(var b=c.getAccessions();b.length>0;){var d=b.shift(),e=c.getSnp(d);if(!(e.length<1)){var f="rnaedit",g=[],h=[];a.registerLayer(f,{fullname:"RNA Edit (mod)"});MASCP.getLayer(f).icon=null;var i;for(i=e.length-1;i>=0;i--)h.push({index:e[i][0]+1,delta:e[i][1]}),g.push({insertBefore:e[i][0]+1,delta:e[i][2]});for(i=g.length-1;i>=0;i--){var j=g[i].insertBefore-1;j>a.sequence.length&&(j=a.sequence.length),a.getAA(j).addAnnotation("rnaedit",1,{border:"rgb(150,0,0)",content:g[i].delta,angle:"auto"})}}}}),jQuery(a).trigger("resultsRendered",[b])})},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.SubaReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.SubaReader.SERVICE_URL="http://suba.plantenergy.uwa.edu.au/services/byAGI.php?",MASCP.SubaReader.prototype.requestData=function(){return{type:"GET",dataType:"json",data:{agi:this.agi,service:"suba"}}},MASCP.SubaReader.Result=MASCP.SubaReader.Result,MASCP.SUBA_FIELDS={location_gfp:null,location_ipsort:null,location_loctree:null,location_mitopred:null,location_mitoprot2:null,location_ms:null,location_multiloc:null,location_preoxp:null,location_predotar:null,location_subloc:null,location_swissprot:null,location_targetp:null,location_wolfpsort:null},MASCP.SubaReader.Result.prototype._getLocalisation=function(a){for(var b={},c=!1,d=0;d<this._raw_data.observed.length;d++){var e=this._raw_data.observed[d];e[2]==a&&(b[e[0]]||(b[e[0]]=[]),b[e[0]].push(e[1]),c=!0)}return c?b:null},MASCP.SubaReader.Result.prototype._parseLocalisation=function(a){if(null===a||0===a.length)return null;var b,c=a.split(";"),d={};for(b=c.length-1;b>=0;b--){var e=c[b].split(":");d[e[0]]=d[e[0]]||[],d[e[0]].push(e[1])}return d},MASCP.SubaReader.Result.prototype._sortLocalisation=function(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c);return b=b.sort(function(b,c){return a[b].length-a[c].length})},MASCP.SubaReader.Result.prototype.getMassSpecLocalisation=function(){return this._getLocalisation("ms")},MASCP.SubaReader.Result.prototype.getGfpLocalisation=function(){return this._getLocalisation("gfp")},MASCP.SubaReader.Result.prototype.getWinnerTakesAllGfp=function(){var a,b=this.getGfpLocalisation(),c=this._sortLocalisation(b),d=[],e=-1;for(a=c.length-1;a>=0;a--)if(e&&b[c[a]]==e)d.push(c[a]);else{if(!(e<0))break;e=b[c[a]],d.push(c[a])}for(d._values=[],a=d.length-1;a>=0;a--)d._values.push(b[d[a]].length);return d},MASCP.SubaReader.Result.prototype.getWinnerTakesAllMassSpec=function(){var a,b=this.getMassSpecLocalisation(),c=this._sortLocalisation(b),d=[],e=-1;for(a=c.length-1;a>=0;a--)if(e&&b[c[a]]==e)d.push(c[a]);else{if(!(e<0))break;e=b[c[a]],d.push(c[a])}for(d._values=[],a=d.length-1;a>=0;a--)d._values.push(b[d[a]].length);return d},MASCP.SubaReader.Result.prototype.getPredictedLocalisations=function(){for(var a={},b=0;b<this._raw_data.predicted.length;b++)a[this._raw_data.predicted[b][0]]||(a[this._raw_data.predicted[b][0]]=[]),a[this._raw_data.predicted[b][0]].push(this._raw_data.predicted[b][1]);return a},MASCP.SubaReader.Result.prototype.mapController=function(a){if(!this._map)return null;var b=this._map;if(a=a?jQuery(a):jQuery('<ul><li class="ms"><div style="position: relative; left: 0px; top: 0px; float: left; background-color: #ff0000; width: 1em; height: 1em;"></div><input class="ms" type="checkbox"/> MS</li><li class="gfp"><div style="position: relative; left: 0px; top: 0px; float: left; background-color: #00ff00; width: 1em; height: 1em;"></div><input class="gfp" type="checkbox"/> GFP</li></ul>'),this.getMassSpecLocalisation()){var c=this._sortLocalisation(this.getMassSpecLocalisation());jQuery("input.ms",a).unbind("change").bind("change",function(){var a;for(a=c.length-1;a>=0;a--)this.checked?b.showKeyword(c[a],"#ff0000"):b.hideKeyword(c[a],"#ff0000")}).attr("checked",c.length>0)}else jQuery("li.ms",a).css({display:"none"});if(this.getGfpLocalisation()){var d=this._sortLocalisation(this.getGfpLocalisation());jQuery("input.gfp",a).unbind("change").bind("change",function(){var a;for(a=d.length-1;a>=0;a--)this.checked?b.showKeyword(d[a],"#00ff00"):b.hideKeyword(d[a],"#00ff00")}).attr("checked",d.length>0)}else jQuery("li.gfp",a).css({display:"none"});return a[0]},MASCP.SubaReader.Result.prototype.render=function(){return null},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.TairReader=MASCP.buildService(function(a){return this._data=a||{},this._data.data||(this._data={data:["",""]}),this}),MASCP.TairReader.SERVICE_URL="http://gator.masc-proteomics.org/tair.pl?",MASCP.TairReader.prototype.requestData=function(){return{type:"GET",dataType:"json",data:{agi:this.agi,service:"tair"}}},MASCP.TairReader.Result.prototype.getDescription=function(){return this._data.data[1]},MASCP.TairReader.Result.prototype.getSequence=function(){return this._data.data[2]},MASCP.getSequence=function(a){var b=arguments.callee;return b._reader||(b._reader=new MASCP.TairReader,b._reader.async=!1),b._reader.result=null,b._reader.agi=a,b._reader.retrieve(),b._reader.result?b._reader.result.getSequence():""},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";if(MASCP.UbiquitinReader=MASCP.buildService(function(a){return this._raw_data=a,this}),MASCP.UbiquitinReader.SERVICE_URL="?",MASCP.UbiquitinReader.prototype.requestData=function(){var a=this.agi;return{type:"GET",dataType:"json",data:{agi:a,service:"ubiquitin"}}},MASCP.UbiquitinReader.Result=MASCP.UbiquitinReader.Result,MASCP.UbiquitinReader.Result.prototype.getPeptides=function(){return this._raw_data&&this._raw_data.data&&this._raw_data.data.peptides?this._raw_data.data.peptides:[]},MASCP.UbiquitinReader.Result.prototype._cleanSequence=function(a){return a.replace(/[^A-Z]/g,"")},MASCP.UbiquitinReader.prototype.setupSequenceRenderer=function(a){var b=this,c=".active .overlay { background: #666666; } .active a { color: #000000; text-decoration: none !important; }  :indeterminate { background: #ff0000; } .tracks .active { background: #0000ff; } .inactive a { text-decoration: none; } .inactive { display: none; }";return this.bind("resultReceived",function(){var d=this.result.getPeptides(),e="ubiquitin_experimental",f="ubiquitin_peptides",g=[];d.length>0&&(MASCP.registerLayer(e,{fullname:"UBQ (mod)",color:"#666666",css:c}),MASCP.registerGroup(f,{
fullname:"UBQ",hide_member_controllers:!0,hide_group_controller:!0,color:"#666666"}),a.createGroupController&&a.createGroupController(e,f),jQuery(MASCP.getGroup(f)).bind("visibilityChange",function(b,c,d){c==a&&g.forEach(function(a){a.style.display=d?"none":"inline"})}));for(var h=0;h<d.length;h++){var i="ubiquitin_peptide_"+h;MASCP.registerLayer(i,{fullname:"Peptide",group:f,color:"#666666",css:c});var j=d[h].sequence,k=a.getAminoAcidsByPeptide(j);if(0!==k.length){k.addToLayer(i),g.push(k.addToLayer(i));for(var l=0;l<d[h].positions.length;l++)g=g.concat(k[d[h].positions[l]-1].addToLayer(e)),k[d[h].positions[l]-1].addToLayer(i)}}jQuery(a).trigger("resultsRendered",[b])}),this},MASCP.UbiquitinReader.Result.prototype.getAllExperimentalPositions=function(){var a=this.getPeptides(),b=[],c={};return a.forEach(function(a){a.positions.forEach(function(a){c[a]||(b.push(a),c[a]=!0)})}),b},MASCP.UbiquitinReader.Result.prototype.render=function(){},"undefined"==typeof MASCP||"undefined"==typeof MASCP.Service)throw"MASCP.Service is not defined, required class";MASCP.UserdataReader=MASCP.buildService(function(a){return a?(this.data=a?a.data:a,function(b){b.getPeptides=function(){return a.data}}(this),this):this}),MASCP.UserdataReader.prototype.toString=function(){return"MASCP.UserdataReader."+this.datasetname},MASCP.UserdataReader.prototype.setupSequenceRenderer=function(a){var b=this,c=function(a){return"[object Array]"==Object.prototype.toString.call(a)};b.bind("resultReceived",function(){for(var d=[].concat(this.result.data);d.length>0;){var e=d.shift();if(e){MASCP.registerLayer(b.datasetname,{fullname:b.datasetname,color:"#00ff00"});var f=function(){return function(c){a.getAminoAcidsByPeptide(c).addToLayer(b.datasetname)}}();c(e)&&!c(e[0])?f=function(){return function(c){var d=parseInt(c[0],10),e=parseInt(c[1],10);isNaN(d)||isNaN(e)?c.forEach(function(c){a.getAminoAcidsByPeptide(c).addToLayer(b.datasetname)}):a.getAA(d).addBoxOverlay(b.datasetname,e-d)}}():c(e)&&c(e[0])?f=function(){return function(c){c.forEach(function(c){var d=parseInt(c[0],10),e=parseInt(c[1],10);a.getAA(d).addBoxOverlay(b.datasetname,e-d)})}}():e===parseInt(e[0],10)&&(f=function(){return function(c){var d=c;a.getAA(d).addAnnotation(b.datasetname,1)}}()),f.call(this,e)}}jQuery(a).trigger("resultsRendered",[b])})},function(){var a=function(a,b){if(!a||a.length<1)return[];var c,d=-1;for(c=0;c<a[0].length;c++)if((a[0][c]||"").toString().toLowerCase().match(/at[\dA-Z]g\d+/)){d=c;break}if(d==-1)return a;var e=[];for(c=0;c<a.length;c++)b||e.push(a[c][d].toLowerCase()),b&&a[c][d].toLowerCase()===b.toLowerCase()&&e.push(a[c]);return e},b=function(a){if(a.length<1)return[];var b,c=null;for(b=0;b<a[0].length;b++){var d=a[0][b],e=b;if(d.toString().match(/\d+-\d+/)&&(c=function(){return function(a){var b=[];return a[e].split(/,/).forEach(function(a){b.push(a.split(/-/))}),b}}(b)),d.toString().match(/^\d+$/)){c=a[0][b+1]&&a[0][b+1].toString().match(/^\d+$/)?function(){return function(a){return[a[e],a[e+1]]}}(b):function(){return function(a){return a[e]}}(b);break}d.toString().match(/^[A-Z]+$/)&&(c=function(){return function(a){return a[e]}}(b))}if(!c)return[];var f=[];for(b=0;b<a.length;b++)f.push(c.call(this,a[b]));return f};MASCP.UserdataReader.prototype.setData=function(c,d){if(d){var e=this;MASCP.Service.CacheService(this),this.datasetname=c,this.data=d;var f=new MASCP.UserdataReader;f.datasetname=c,f.data=d,f.retrieve=function(c,d){this.agi=c,this._dataReceived(b(a(this.data,this.agi))),d.call(this)},MASCP.Service.CacheService(f);var g=a(d),h=this.retrieve;this.retrieve=function(a,b){console.log("Data not ready! Waiting for ready state");var c=this;bean.add(c,"ready",function(){bend.remove(c,"ready",arguments.callee),c.retrieve(a,b)})},function(){if(0===g.length)return e.retrieve=h,void bean.fire(e,"ready");var a=g.shift();f.retrieve(a,arguments.callee)}()}},MASCP.UserdataReader.datasets=function(a){MASCP.Service.FindCachedService(this,function(b){for(var c=[],d=0,e=b.length;d<e;d++)c.push(b[d].replace(/MASCP.UserdataReader./,""));c.forEach&&c.forEach(a)})}}(),MascotToJSON=function(){},function(){var a={file:"",do_export:"1",export_format:"CSV",protein_master:"1",peptide_master:"1",pep_seq:"1",pep_score:"0",REPORT:"AUTO",show_same_sets:"1",_requireboldred:"1",_ignoreionsscorebelow:"0.05",prot_hit_num:"0",pep_end:"0",pep_miss:"0",pep_homol:"0",pep_ident:"0",pep_frame:"0",pep_var_mod:"0",pep_num_match:"0",pep_scan_title:"0",pep_query:"0",pep_rank:"0",pep_isbold:"0",pep_exp_mz:"0",pep_calc_mr:"0",pep_exp_z:"0",pep_exp_mr:"0",pep_delta:"0",_sigthreshold:"0.05",_showallfromerrortolerant:"0",_onlyerrortolerant:"0",_noerrortolerant:"0",_show_decoy_report:"0",_showsubsets:"0",_server_mudpit_switch:"0.000000001"},b=function(a){if(null===a||"object"!=typeof a)return a;var c=a.constructor();for(var d in a)a.hasOwnProperty(d)&&(c[d]=b(a[d]));return c},c=function(a){var b=[];for(var c in a)a.hasOwnProperty(c)&&b.push(c+"="+a[c]);return b.join("&")},d=function(a,b){b=b||",";for(var c=new RegExp("(\\"+b+'|\\r?\\n|\\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^"\\'+b+"\\r\\n]*))","gi"),d=[[]],e=null;null!==(e=c.exec(a));){var f=e[1];f.length&&f!=b&&d.push([]);var g;g=e[2]?e[2].replace(new RegExp('""',"g"),'"'):e[3],d[d.length-1].push(g)}return d},e=function(a){var b=[],c=null,d={};return a.forEach(function(a){a[1]&&""!==a[1]&&(c=a[1]);var e=a[6]+a[7]+a[8];e&&!d[c+e]&&b.push([c,e]),d[c+e]=1}),b};MascotToJSON.prototype.convertReport=function(f,g){var h=this,i=new window.XMLHttpRequest,j=f.replace(/master_results(_2)?.pl.*/,"export_dat_2.pl"),k=(/file=([^&]*)/.exec(f)||[]).shift(),l=b(a);l.file=k,i.onreadystatechange=function(){if(4==i.readyState)if(200==i.status){var a=i.responseText;a=a.replace(/(.+\n)+\n.*\n/m,""),g&&g.call(h,e(d(a)))}else 0===i.status&&g&&g.call(h,[],new Error("Could not load page"))},i.open("GET",j+"?"+c(l),!0),i.send(null)}}(),"undefined"!=typeof module&&module.exports&&(module.exports.MascotToJSON=MascotToJSON);